// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitopia/repository.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RepositoryCollaborator_Permission int32

const (
	RepositoryCollaborator_READ     RepositoryCollaborator_Permission = 0
	RepositoryCollaborator_TRIAGE   RepositoryCollaborator_Permission = 1
	RepositoryCollaborator_WRITE    RepositoryCollaborator_Permission = 2
	RepositoryCollaborator_MAINTAIN RepositoryCollaborator_Permission = 3
	RepositoryCollaborator_ADMIN    RepositoryCollaborator_Permission = 4
)

var RepositoryCollaborator_Permission_name = map[int32]string{
	0: "READ",
	1: "TRIAGE",
	2: "WRITE",
	3: "MAINTAIN",
	4: "ADMIN",
}

var RepositoryCollaborator_Permission_value = map[string]int32{
	"READ":     0,
	"TRIAGE":   1,
	"WRITE":    2,
	"MAINTAIN": 3,
	"ADMIN":    4,
}

func (x RepositoryCollaborator_Permission) String() string {
	return proto.EnumName(RepositoryCollaborator_Permission_name, int32(x))
}

func (RepositoryCollaborator_Permission) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_771033d6361900fa, []int{6, 0}
}

type RepositoryBackup_Store int32

const (
	RepositoryBackup_IPFS    RepositoryBackup_Store = 0
	RepositoryBackup_ARWEAVE RepositoryBackup_Store = 1
)

var RepositoryBackup_Store_name = map[int32]string{
	0: "IPFS",
	1: "ARWEAVE",
}

var RepositoryBackup_Store_value = map[string]int32{
	"IPFS":    0,
	"ARWEAVE": 1,
}

func (x RepositoryBackup_Store) String() string {
	return proto.EnumName(RepositoryBackup_Store_name, int32(x))
}

func (RepositoryBackup_Store) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_771033d6361900fa, []int{9, 0}
}

type Repository struct {
	Creator             string                    `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id                  uint64                    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Name                string                    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Owner               *RepositoryOwner          `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	Description         string                    `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Forks               []uint64                  `protobuf:"varint,6,rep,packed,name=forks,proto3" json:"forks,omitempty"`
	Subscribers         string                    `protobuf:"bytes,7,opt,name=subscribers,proto3" json:"subscribers,omitempty"`
	Commits             string                    `protobuf:"bytes,8,opt,name=commits,proto3" json:"commits,omitempty"`
	IssuesCount         uint64                    `protobuf:"varint,9,opt,name=issuesCount,proto3" json:"issuesCount,omitempty"`
	PullsCount          uint64                    `protobuf:"varint,10,opt,name=pullsCount,proto3" json:"pullsCount,omitempty"`
	Labels              []*RepositoryLabel        `protobuf:"bytes,11,rep,name=labels,proto3" json:"labels,omitempty"`
	LabelsCount         uint64                    `protobuf:"varint,12,opt,name=labelsCount,proto3" json:"labelsCount,omitempty"`
	Releases            []*RepositoryRelease      `protobuf:"bytes,13,rep,name=releases,proto3" json:"releases,omitempty"`
	CreatedAt           int64                     `protobuf:"varint,14,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt           int64                     `protobuf:"varint,15,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	PushedAt            int64                     `protobuf:"varint,16,opt,name=pushedAt,proto3" json:"pushedAt,omitempty"`
	Stargazers          []uint64                  `protobuf:"varint,17,rep,packed,name=stargazers,proto3" json:"stargazers,omitempty"`
	Archived            bool                      `protobuf:"varint,18,opt,name=archived,proto3" json:"archived,omitempty"`
	License             string                    `protobuf:"bytes,19,opt,name=license,proto3" json:"license,omitempty"`
	DefaultBranch       string                    `protobuf:"bytes,20,opt,name=defaultBranch,proto3" json:"defaultBranch,omitempty"`
	Parent              uint64                    `protobuf:"varint,21,opt,name=parent,proto3" json:"parent,omitempty"`
	Fork                bool                      `protobuf:"varint,22,opt,name=fork,proto3" json:"fork,omitempty"`
	Collaborators       []*RepositoryCollaborator `protobuf:"bytes,23,rep,name=collaborators,proto3" json:"collaborators,omitempty"`
	AllowForking        bool                      `protobuf:"varint,24,opt,name=allowForking,proto3" json:"allowForking,omitempty"`
	Backups             []*RepositoryBackup       `protobuf:"bytes,25,rep,name=backups,proto3" json:"backups,omitempty"`
	EnableArweaveBackup bool                      `protobuf:"varint,26,opt,name=enableArweaveBackup,proto3" json:"enableArweaveBackup,omitempty"`
}

func (m *Repository) Reset()         { *m = Repository{} }
func (m *Repository) String() string { return proto.CompactTextString(m) }
func (*Repository) ProtoMessage()    {}
func (*Repository) Descriptor() ([]byte, []int) {
	return fileDescriptor_771033d6361900fa, []int{0}
}
func (m *Repository) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Repository) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Repository.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Repository) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Repository.Merge(m, src)
}
func (m *Repository) XXX_Size() int {
	return m.Size()
}
func (m *Repository) XXX_DiscardUnknown() {
	xxx_messageInfo_Repository.DiscardUnknown(m)
}

var xxx_messageInfo_Repository proto.InternalMessageInfo

func (m *Repository) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Repository) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Repository) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Repository) GetOwner() *RepositoryOwner {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *Repository) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Repository) GetForks() []uint64 {
	if m != nil {
		return m.Forks
	}
	return nil
}

func (m *Repository) GetSubscribers() string {
	if m != nil {
		return m.Subscribers
	}
	return ""
}

func (m *Repository) GetCommits() string {
	if m != nil {
		return m.Commits
	}
	return ""
}

func (m *Repository) GetIssuesCount() uint64 {
	if m != nil {
		return m.IssuesCount
	}
	return 0
}

func (m *Repository) GetPullsCount() uint64 {
	if m != nil {
		return m.PullsCount
	}
	return 0
}

func (m *Repository) GetLabels() []*RepositoryLabel {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Repository) GetLabelsCount() uint64 {
	if m != nil {
		return m.LabelsCount
	}
	return 0
}

func (m *Repository) GetReleases() []*RepositoryRelease {
	if m != nil {
		return m.Releases
	}
	return nil
}

func (m *Repository) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Repository) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *Repository) GetPushedAt() int64 {
	if m != nil {
		return m.PushedAt
	}
	return 0
}

func (m *Repository) GetStargazers() []uint64 {
	if m != nil {
		return m.Stargazers
	}
	return nil
}

func (m *Repository) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *Repository) GetLicense() string {
	if m != nil {
		return m.License
	}
	return ""
}

func (m *Repository) GetDefaultBranch() string {
	if m != nil {
		return m.DefaultBranch
	}
	return ""
}

func (m *Repository) GetParent() uint64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *Repository) GetFork() bool {
	if m != nil {
		return m.Fork
	}
	return false
}

func (m *Repository) GetCollaborators() []*RepositoryCollaborator {
	if m != nil {
		return m.Collaborators
	}
	return nil
}

func (m *Repository) GetAllowForking() bool {
	if m != nil {
		return m.AllowForking
	}
	return false
}

func (m *Repository) GetBackups() []*RepositoryBackup {
	if m != nil {
		return m.Backups
	}
	return nil
}

func (m *Repository) GetEnableArweaveBackup() bool {
	if m != nil {
		return m.EnableArweaveBackup
	}
	return false
}

type RepositoryId struct {
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RepositoryId) Reset()         { *m = RepositoryId{} }
func (m *RepositoryId) String() string { return proto.CompactTextString(m) }
func (*RepositoryId) ProtoMessage()    {}
func (*RepositoryId) Descriptor() ([]byte, []int) {
	return fileDescriptor_771033d6361900fa, []int{1}
}
func (m *RepositoryId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepositoryId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RepositoryId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RepositoryId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepositoryId.Merge(m, src)
}
func (m *RepositoryId) XXX_Size() int {
	return m.Size()
}
func (m *RepositoryId) XXX_DiscardUnknown() {
	xxx_messageInfo_RepositoryId.DiscardUnknown(m)
}

var xxx_messageInfo_RepositoryId proto.InternalMessageInfo

func (m *RepositoryId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RepositoryId) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type BaseRepositoryKey struct {
	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *BaseRepositoryKey) Reset()         { *m = BaseRepositoryKey{} }
func (m *BaseRepositoryKey) String() string { return proto.CompactTextString(m) }
func (*BaseRepositoryKey) ProtoMessage()    {}
func (*BaseRepositoryKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_771033d6361900fa, []int{2}
}
func (m *BaseRepositoryKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseRepositoryKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseRepositoryKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseRepositoryKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseRepositoryKey.Merge(m, src)
}
func (m *BaseRepositoryKey) XXX_Size() int {
	return m.Size()
}
func (m *BaseRepositoryKey) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseRepositoryKey.DiscardUnknown(m)
}

var xxx_messageInfo_BaseRepositoryKey proto.InternalMessageInfo

func (m *BaseRepositoryKey) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BaseRepositoryKey) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *BaseRepositoryKey) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RepositoryOwner struct {
	Id   string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type OwnerType `protobuf:"varint,2,opt,name=type,proto3,enum=gitopia.gitopia.gitopia.v2.OwnerType" json:"type,omitempty"`
}

func (m *RepositoryOwner) Reset()         { *m = RepositoryOwner{} }
func (m *RepositoryOwner) String() string { return proto.CompactTextString(m) }
func (*RepositoryOwner) ProtoMessage()    {}
func (*RepositoryOwner) Descriptor() ([]byte, []int) {
	return fileDescriptor_771033d6361900fa, []int{3}
}
func (m *RepositoryOwner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepositoryOwner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RepositoryOwner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RepositoryOwner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepositoryOwner.Merge(m, src)
}
func (m *RepositoryOwner) XXX_Size() int {
	return m.Size()
}
func (m *RepositoryOwner) XXX_DiscardUnknown() {
	xxx_messageInfo_RepositoryOwner.DiscardUnknown(m)
}

var xxx_messageInfo_RepositoryOwner proto.InternalMessageInfo

func (m *RepositoryOwner) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RepositoryOwner) GetType() OwnerType {
	if m != nil {
		return m.Type
	}
	return OwnerType_USER
}

type IssueIid struct {
	Iid uint64 `protobuf:"varint,1,opt,name=iid,proto3" json:"iid,omitempty"`
	Id  uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *IssueIid) Reset()         { *m = IssueIid{} }
func (m *IssueIid) String() string { return proto.CompactTextString(m) }
func (*IssueIid) ProtoMessage()    {}
func (*IssueIid) Descriptor() ([]byte, []int) {
	return fileDescriptor_771033d6361900fa, []int{4}
}
func (m *IssueIid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IssueIid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IssueIid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IssueIid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssueIid.Merge(m, src)
}
func (m *IssueIid) XXX_Size() int {
	return m.Size()
}
func (m *IssueIid) XXX_DiscardUnknown() {
	xxx_messageInfo_IssueIid.DiscardUnknown(m)
}

var xxx_messageInfo_IssueIid proto.InternalMessageInfo

func (m *IssueIid) GetIid() uint64 {
	if m != nil {
		return m.Iid
	}
	return 0
}

func (m *IssueIid) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type PullRequestIid struct {
	Iid uint64 `protobuf:"varint,1,opt,name=iid,proto3" json:"iid,omitempty"`
	Id  uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *PullRequestIid) Reset()         { *m = PullRequestIid{} }
func (m *PullRequestIid) String() string { return proto.CompactTextString(m) }
func (*PullRequestIid) ProtoMessage()    {}
func (*PullRequestIid) Descriptor() ([]byte, []int) {
	return fileDescriptor_771033d6361900fa, []int{5}
}
func (m *PullRequestIid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PullRequestIid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PullRequestIid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PullRequestIid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullRequestIid.Merge(m, src)
}
func (m *PullRequestIid) XXX_Size() int {
	return m.Size()
}
func (m *PullRequestIid) XXX_DiscardUnknown() {
	xxx_messageInfo_PullRequestIid.DiscardUnknown(m)
}

var xxx_messageInfo_PullRequestIid proto.InternalMessageInfo

func (m *PullRequestIid) GetIid() uint64 {
	if m != nil {
		return m.Iid
	}
	return 0
}

func (m *PullRequestIid) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type RepositoryCollaborator struct {
	Id         string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Permission RepositoryCollaborator_Permission `protobuf:"varint,2,opt,name=permission,proto3,enum=gitopia.gitopia.gitopia.v2.RepositoryCollaborator_Permission" json:"permission,omitempty"`
}

func (m *RepositoryCollaborator) Reset()         { *m = RepositoryCollaborator{} }
func (m *RepositoryCollaborator) String() string { return proto.CompactTextString(m) }
func (*RepositoryCollaborator) ProtoMessage()    {}
func (*RepositoryCollaborator) Descriptor() ([]byte, []int) {
	return fileDescriptor_771033d6361900fa, []int{6}
}
func (m *RepositoryCollaborator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepositoryCollaborator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RepositoryCollaborator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RepositoryCollaborator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepositoryCollaborator.Merge(m, src)
}
func (m *RepositoryCollaborator) XXX_Size() int {
	return m.Size()
}
func (m *RepositoryCollaborator) XXX_DiscardUnknown() {
	xxx_messageInfo_RepositoryCollaborator.DiscardUnknown(m)
}

var xxx_messageInfo_RepositoryCollaborator proto.InternalMessageInfo

func (m *RepositoryCollaborator) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RepositoryCollaborator) GetPermission() RepositoryCollaborator_Permission {
	if m != nil {
		return m.Permission
	}
	return RepositoryCollaborator_READ
}

type RepositoryLabel struct {
	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Color       string `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *RepositoryLabel) Reset()         { *m = RepositoryLabel{} }
func (m *RepositoryLabel) String() string { return proto.CompactTextString(m) }
func (*RepositoryLabel) ProtoMessage()    {}
func (*RepositoryLabel) Descriptor() ([]byte, []int) {
	return fileDescriptor_771033d6361900fa, []int{7}
}
func (m *RepositoryLabel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepositoryLabel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RepositoryLabel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RepositoryLabel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepositoryLabel.Merge(m, src)
}
func (m *RepositoryLabel) XXX_Size() int {
	return m.Size()
}
func (m *RepositoryLabel) XXX_DiscardUnknown() {
	xxx_messageInfo_RepositoryLabel.DiscardUnknown(m)
}

var xxx_messageInfo_RepositoryLabel proto.InternalMessageInfo

func (m *RepositoryLabel) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RepositoryLabel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RepositoryLabel) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *RepositoryLabel) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type RepositoryRelease struct {
	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TagName string `protobuf:"bytes,2,opt,name=tagName,proto3" json:"tagName,omitempty"`
}

func (m *RepositoryRelease) Reset()         { *m = RepositoryRelease{} }
func (m *RepositoryRelease) String() string { return proto.CompactTextString(m) }
func (*RepositoryRelease) ProtoMessage()    {}
func (*RepositoryRelease) Descriptor() ([]byte, []int) {
	return fileDescriptor_771033d6361900fa, []int{8}
}
func (m *RepositoryRelease) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepositoryRelease) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RepositoryRelease.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RepositoryRelease) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepositoryRelease.Merge(m, src)
}
func (m *RepositoryRelease) XXX_Size() int {
	return m.Size()
}
func (m *RepositoryRelease) XXX_DiscardUnknown() {
	xxx_messageInfo_RepositoryRelease.DiscardUnknown(m)
}

var xxx_messageInfo_RepositoryRelease proto.InternalMessageInfo

func (m *RepositoryRelease) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RepositoryRelease) GetTagName() string {
	if m != nil {
		return m.TagName
	}
	return ""
}

type RepositoryBackup struct {
	Store RepositoryBackup_Store `protobuf:"varint,1,opt,name=store,proto3,enum=gitopia.gitopia.gitopia.v2.RepositoryBackup_Store" json:"store,omitempty"`
	Refs  []string               `protobuf:"bytes,2,rep,name=refs,proto3" json:"refs,omitempty"`
}

func (m *RepositoryBackup) Reset()         { *m = RepositoryBackup{} }
func (m *RepositoryBackup) String() string { return proto.CompactTextString(m) }
func (*RepositoryBackup) ProtoMessage()    {}
func (*RepositoryBackup) Descriptor() ([]byte, []int) {
	return fileDescriptor_771033d6361900fa, []int{9}
}
func (m *RepositoryBackup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepositoryBackup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RepositoryBackup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RepositoryBackup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepositoryBackup.Merge(m, src)
}
func (m *RepositoryBackup) XXX_Size() int {
	return m.Size()
}
func (m *RepositoryBackup) XXX_DiscardUnknown() {
	xxx_messageInfo_RepositoryBackup.DiscardUnknown(m)
}

var xxx_messageInfo_RepositoryBackup proto.InternalMessageInfo

func (m *RepositoryBackup) GetStore() RepositoryBackup_Store {
	if m != nil {
		return m.Store
	}
	return RepositoryBackup_IPFS
}

func (m *RepositoryBackup) GetRefs() []string {
	if m != nil {
		return m.Refs
	}
	return nil
}

func init() {
	proto.RegisterEnum("gitopia.gitopia.gitopia.v2.RepositoryCollaborator_Permission", RepositoryCollaborator_Permission_name, RepositoryCollaborator_Permission_value)
	proto.RegisterEnum("gitopia.gitopia.gitopia.v2.RepositoryBackup_Store", RepositoryBackup_Store_name, RepositoryBackup_Store_value)
	proto.RegisterType((*Repository)(nil), "gitopia.gitopia.gitopia.v2.Repository")
	proto.RegisterType((*RepositoryId)(nil), "gitopia.gitopia.gitopia.v2.RepositoryId")
	proto.RegisterType((*BaseRepositoryKey)(nil), "gitopia.gitopia.gitopia.v2.BaseRepositoryKey")
	proto.RegisterType((*RepositoryOwner)(nil), "gitopia.gitopia.gitopia.v2.RepositoryOwner")
	proto.RegisterType((*IssueIid)(nil), "gitopia.gitopia.gitopia.v2.IssueIid")
	proto.RegisterType((*PullRequestIid)(nil), "gitopia.gitopia.gitopia.v2.PullRequestIid")
	proto.RegisterType((*RepositoryCollaborator)(nil), "gitopia.gitopia.gitopia.v2.RepositoryCollaborator")
	proto.RegisterType((*RepositoryLabel)(nil), "gitopia.gitopia.gitopia.v2.RepositoryLabel")
	proto.RegisterType((*RepositoryRelease)(nil), "gitopia.gitopia.gitopia.v2.RepositoryRelease")
	proto.RegisterType((*RepositoryBackup)(nil), "gitopia.gitopia.gitopia.v2.RepositoryBackup")
}

func init() { proto.RegisterFile("gitopia/repository.proto", fileDescriptor_771033d6361900fa) }

var fileDescriptor_771033d6361900fa = []byte{
	// 893 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0x8f, 0xf3, 0xbf, 0xaf, 0x6d, 0xd6, 0x9d, 0x96, 0x32, 0x44, 0x28, 0x8a, 0x2c, 0x90, 0x22,
	0xb1, 0x24, 0x28, 0x9c, 0x10, 0x5a, 0x24, 0xb7, 0x9b, 0x82, 0x05, 0x5b, 0xca, 0x6c, 0xc5, 0xae,
	0x10, 0x1c, 0x26, 0xf1, 0x34, 0x19, 0xd5, 0xc9, 0x98, 0x19, 0xbb, 0xa5, 0x7c, 0x8a, 0xfd, 0x58,
	0xdc, 0xd8, 0x23, 0x47, 0xd4, 0x9e, 0xf9, 0x0e, 0x68, 0x66, 0x9c, 0xc4, 0x4d, 0x02, 0xca, 0x5e,
	0x92, 0xf7, 0x67, 0x7e, 0xef, 0xff, 0x7b, 0x06, 0x3c, 0xe6, 0x89, 0x88, 0x39, 0xed, 0x49, 0x16,
	0x0b, 0xc5, 0x13, 0x21, 0xef, 0xba, 0xb1, 0x14, 0x89, 0x40, 0xcd, 0x4c, 0xd3, 0x5d, 0xfd, 0xbf,
	0xe9, 0x37, 0x8f, 0xc6, 0x62, 0x2c, 0xcc, 0xb3, 0x9e, 0xa6, 0x2c, 0xa2, 0x79, 0x38, 0xb7, 0x75,
	0x3b, 0x11, 0x5c, 0x59, 0xa1, 0xf7, 0x4f, 0x0d, 0x80, 0x2c, 0x6c, 0x23, 0x0c, 0xb5, 0x91, 0x64,
	0x34, 0x11, 0x12, 0x3b, 0x6d, 0xa7, 0xb3, 0x43, 0xe6, 0x2c, 0x6a, 0x40, 0x91, 0x87, 0xb8, 0xd8,
	0x76, 0x3a, 0x65, 0x52, 0xe4, 0x21, 0x42, 0x50, 0x9e, 0xd1, 0x29, 0xc3, 0x25, 0xf3, 0xcc, 0xd0,
	0xc8, 0x87, 0x8a, 0xb8, 0x9d, 0x31, 0x89, 0xcb, 0x6d, 0xa7, 0xb3, 0xdb, 0xff, 0xa4, 0xfb, 0xdf,
	0x31, 0x76, 0x97, 0x4e, 0xbf, 0xd7, 0x10, 0x62, 0x91, 0xa8, 0x0d, 0xbb, 0x21, 0x53, 0x23, 0xc9,
	0xe3, 0x84, 0x8b, 0x19, 0xae, 0x18, 0xeb, 0x79, 0x11, 0x3a, 0x82, 0xca, 0x95, 0x90, 0xd7, 0x0a,
	0x57, 0xdb, 0xa5, 0x4e, 0x99, 0x58, 0x46, 0xe3, 0x54, 0x3a, 0xd4, 0xaf, 0x86, 0x4c, 0x2a, 0x5c,
	0xb3, 0xb8, 0x9c, 0xc8, 0xa4, 0x26, 0xa6, 0x53, 0x9e, 0x28, 0x5c, 0xcf, 0x52, 0xb3, 0xac, 0xc6,
	0x72, 0xa5, 0x52, 0xa6, 0x4e, 0x45, 0x3a, 0x4b, 0xf0, 0x8e, 0xc9, 0x31, 0x2f, 0x42, 0x2d, 0x80,
	0x38, 0x8d, 0xa2, 0xec, 0x01, 0x98, 0x07, 0x39, 0x09, 0x3a, 0x85, 0x6a, 0x44, 0x87, 0x2c, 0x52,
	0x78, 0xb7, 0x5d, 0xda, 0x3e, 0xf3, 0xef, 0x34, 0x86, 0x64, 0x50, 0x1d, 0x86, 0xa5, 0xac, 0x97,
	0x3d, 0x1b, 0x46, 0x4e, 0x84, 0x02, 0xa8, 0x4b, 0x16, 0x31, 0xaa, 0x98, 0xc2, 0xfb, 0xc6, 0xd1,
	0xa7, 0xdb, 0x39, 0x22, 0x16, 0x45, 0x16, 0x70, 0xf4, 0x21, 0xec, 0x98, 0xce, 0xb2, 0xd0, 0x4f,
	0x70, 0xa3, 0xed, 0x74, 0x4a, 0x64, 0x29, 0xd0, 0xda, 0x34, 0x0e, 0x33, 0xed, 0x13, 0xab, 0x5d,
	0x08, 0x50, 0x13, 0xea, 0x71, 0xaa, 0x26, 0x46, 0xe9, 0x1a, 0xe5, 0x82, 0xd7, 0x95, 0x52, 0x09,
	0x95, 0x63, 0xfa, 0xbb, 0x6e, 0xc3, 0x81, 0x69, 0x51, 0x4e, 0xa2, 0xb1, 0x54, 0x8e, 0x26, 0xfc,
	0x86, 0x85, 0x18, 0xb5, 0x9d, 0x4e, 0x9d, 0x2c, 0x78, 0xdd, 0xa1, 0x88, 0x8f, 0xd8, 0x4c, 0x31,
	0x7c, 0x68, 0x3b, 0x94, 0xb1, 0xe8, 0x23, 0xd8, 0x0f, 0xd9, 0x15, 0x4d, 0xa3, 0xe4, 0x44, 0xd2,
	0xd9, 0x68, 0x82, 0x8f, 0x8c, 0xfe, 0xb1, 0x10, 0x1d, 0x43, 0x35, 0xa6, 0x92, 0xcd, 0x12, 0xfc,
	0x9e, 0xa9, 0x5d, 0xc6, 0xe9, 0x51, 0xd5, 0x43, 0x82, 0x8f, 0x8d, 0x3f, 0x43, 0xa3, 0xd7, 0xb0,
	0x3f, 0x12, 0x51, 0x44, 0x87, 0x42, 0xea, 0xf1, 0x56, 0xf8, 0x7d, 0x53, 0xcf, 0xfe, 0x76, 0xf5,
	0x3c, 0xcd, 0x41, 0xc9, 0x63, 0x43, 0xc8, 0x83, 0x3d, 0x1a, 0x45, 0xe2, 0xf6, 0x4c, 0xc8, 0x6b,
	0x3e, 0x1b, 0x63, 0x6c, 0xbc, 0x3e, 0x92, 0xa1, 0x33, 0xa8, 0x0d, 0xe9, 0xe8, 0x3a, 0x8d, 0x15,
	0xfe, 0xc0, 0xf8, 0x7d, 0xba, 0x9d, 0xdf, 0x13, 0x03, 0x22, 0x73, 0x30, 0xfa, 0x0c, 0x0e, 0xd9,
	0x8c, 0x0e, 0x23, 0xe6, 0xcb, 0x5b, 0x46, 0x6f, 0x98, 0xd5, 0xe3, 0xa6, 0x71, 0xb9, 0x49, 0xe5,
	0xf5, 0x61, 0x6f, 0x69, 0x2e, 0x08, 0xb3, 0xb5, 0xb6, 0xbb, 0x9e, 0x5f, 0xeb, 0xe2, 0x72, 0xad,
	0xbd, 0x1f, 0xe0, 0xe0, 0x44, 0x4f, 0xcf, 0x02, 0xf7, 0x2d, 0xbb, 0xcb, 0x01, 0xed, 0x3d, 0xc0,
	0x50, 0xa3, 0x61, 0x28, 0x99, 0x52, 0x19, 0x76, 0xce, 0x6e, 0xba, 0x14, 0xde, 0xcf, 0xf0, 0x64,
	0xe5, 0x00, 0xac, 0x45, 0xf2, 0x05, 0x94, 0x93, 0xbb, 0xd8, 0x46, 0xd2, 0xe8, 0x7f, 0xfc, 0x7f,
	0x05, 0x32, 0x06, 0x2e, 0xef, 0x62, 0x46, 0x0c, 0xc4, 0x7b, 0x0a, 0xf5, 0x40, 0x6f, 0x6f, 0xc0,
	0x43, 0xe4, 0x42, 0x89, 0x2f, 0x02, 0xd5, 0xe4, 0xea, 0x25, 0xf3, 0xfa, 0xd0, 0xb8, 0x48, 0xa3,
	0x88, 0xb0, 0x5f, 0x53, 0xa6, 0x92, 0xed, 0x30, 0x7f, 0x3a, 0x70, 0xbc, 0x79, 0x1c, 0xd6, 0xf2,
	0xf8, 0x05, 0x20, 0x66, 0x72, 0xca, 0x95, 0xd2, 0x07, 0xcd, 0x66, 0xf3, 0xec, 0xdd, 0xc7, 0xac,
	0x7b, 0xb1, 0x30, 0x42, 0x72, 0x06, 0xbd, 0x33, 0x80, 0xa5, 0x06, 0xd5, 0xa1, 0x4c, 0x06, 0xfe,
	0x73, 0xb7, 0x80, 0x00, 0xaa, 0x97, 0x24, 0xf0, 0xbf, 0x1e, 0xb8, 0x0e, 0xda, 0x81, 0xca, 0x2b,
	0x12, 0x5c, 0x0e, 0xdc, 0x22, 0xda, 0x83, 0xfa, 0x0b, 0x3f, 0x38, 0xbf, 0xf4, 0x83, 0x73, 0xb7,
	0xa4, 0x15, 0xfe, 0xf3, 0x17, 0xc1, 0xb9, 0x5b, 0xf6, 0xa6, 0xf9, 0x8e, 0x98, 0xc3, 0xb4, 0xd6,
	0xe2, 0x0d, 0xb3, 0xa1, 0xaf, 0xf1, 0x48, 0x44, 0x42, 0x66, 0xdd, 0xb5, 0xcc, 0xea, 0x15, 0x2f,
	0xaf, 0x5d, 0x71, 0xef, 0x19, 0x1c, 0xac, 0x9d, 0xa7, 0x4d, 0x33, 0x95, 0xd0, 0xf1, 0xf9, 0xd2,
	0xe7, 0x9c, 0xf5, 0xde, 0x38, 0xe0, 0xae, 0xae, 0x05, 0xfa, 0x06, 0x2a, 0x2a, 0x11, 0x92, 0x19,
	0x0b, 0x8d, 0x6d, 0x77, 0xd9, 0x82, 0xbb, 0x2f, 0x35, 0x92, 0x58, 0x03, 0x3a, 0x53, 0xc9, 0xae,
	0xf4, 0x24, 0x97, 0x74, 0xa6, 0x9a, 0xf6, 0x5a, 0x50, 0x31, 0x6f, 0x74, 0x8d, 0x83, 0x8b, 0xb3,
	0x97, 0x6e, 0x01, 0xed, 0x42, 0xcd, 0x27, 0xaf, 0x06, 0xfe, 0x8f, 0x03, 0xd7, 0x39, 0x79, 0xfd,
	0xc7, 0x7d, 0xcb, 0x79, 0x7b, 0xdf, 0x72, 0xfe, 0xbe, 0x6f, 0x39, 0x6f, 0x1e, 0x5a, 0x85, 0xb7,
	0x0f, 0xad, 0xc2, 0x5f, 0x0f, 0xad, 0xc2, 0x4f, 0x5f, 0x8d, 0x79, 0x32, 0x49, 0x87, 0xdd, 0x91,
	0x98, 0xf6, 0xe6, 0xdf, 0xe0, 0xf9, 0xff, 0x6f, 0x0b, 0x6a, 0xca, 0xc7, 0x92, 0xea, 0xda, 0xa8,
	0xde, 0x4d, 0xbf, 0xa7, 0xe7, 0x58, 0x7d, 0x69, 0x7e, 0x87, 0x55, 0xf3, 0xa9, 0xfe, 0xfc, 0xdf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xbe, 0xfb, 0x3a, 0xb0, 0x0d, 0x08, 0x00, 0x00,
}

func (m *Repository) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Repository) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Repository) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnableArweaveBackup {
		i--
		if m.EnableArweaveBackup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if len(m.Backups) > 0 {
		for iNdEx := len(m.Backups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Backups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRepository(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
	}
	if m.AllowForking {
		i--
		if m.AllowForking {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if len(m.Collaborators) > 0 {
		for iNdEx := len(m.Collaborators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Collaborators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRepository(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	if m.Fork {
		i--
		if m.Fork {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.Parent != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.Parent))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if len(m.DefaultBranch) > 0 {
		i -= len(m.DefaultBranch)
		copy(dAtA[i:], m.DefaultBranch)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.DefaultBranch)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.License) > 0 {
		i -= len(m.License)
		copy(dAtA[i:], m.License)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.License)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.Archived {
		i--
		if m.Archived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.Stargazers) > 0 {
		dAtA2 := make([]byte, len(m.Stargazers)*10)
		var j1 int
		for _, num := range m.Stargazers {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintRepository(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.PushedAt != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.PushedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x78
	}
	if m.CreatedAt != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x70
	}
	if len(m.Releases) > 0 {
		for iNdEx := len(m.Releases) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Releases[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRepository(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.LabelsCount != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.LabelsCount))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Labels) > 0 {
		for iNdEx := len(m.Labels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Labels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRepository(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.PullsCount != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.PullsCount))
		i--
		dAtA[i] = 0x50
	}
	if m.IssuesCount != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.IssuesCount))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Commits) > 0 {
		i -= len(m.Commits)
		copy(dAtA[i:], m.Commits)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Commits)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Subscribers) > 0 {
		i -= len(m.Subscribers)
		copy(dAtA[i:], m.Subscribers)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Subscribers)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Forks) > 0 {
		dAtA4 := make([]byte, len(m.Forks)*10)
		var j3 int
		for _, num := range m.Forks {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintRepository(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRepository(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RepositoryId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepositoryId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RepositoryId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BaseRepositoryKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseRepositoryKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseRepositoryKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RepositoryOwner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepositoryOwner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RepositoryOwner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IssueIid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IssueIid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IssueIid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Iid != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.Iid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PullRequestIid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullRequestIid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PullRequestIid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Iid != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.Iid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RepositoryCollaborator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepositoryCollaborator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RepositoryCollaborator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Permission != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.Permission))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RepositoryLabel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepositoryLabel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RepositoryLabel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RepositoryRelease) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepositoryRelease) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RepositoryRelease) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TagName) > 0 {
		i -= len(m.TagName)
		copy(dAtA[i:], m.TagName)
		i = encodeVarintRepository(dAtA, i, uint64(len(m.TagName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RepositoryBackup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepositoryBackup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RepositoryBackup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Refs) > 0 {
		for iNdEx := len(m.Refs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Refs[iNdEx])
			copy(dAtA[i:], m.Refs[iNdEx])
			i = encodeVarintRepository(dAtA, i, uint64(len(m.Refs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Store != 0 {
		i = encodeVarintRepository(dAtA, i, uint64(m.Store))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRepository(dAtA []byte, offset int, v uint64) int {
	offset -= sovRepository(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Repository) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovRepository(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	if len(m.Forks) > 0 {
		l = 0
		for _, e := range m.Forks {
			l += sovRepository(uint64(e))
		}
		n += 1 + sovRepository(uint64(l)) + l
	}
	l = len(m.Subscribers)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Commits)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	if m.IssuesCount != 0 {
		n += 1 + sovRepository(uint64(m.IssuesCount))
	}
	if m.PullsCount != 0 {
		n += 1 + sovRepository(uint64(m.PullsCount))
	}
	if len(m.Labels) > 0 {
		for _, e := range m.Labels {
			l = e.Size()
			n += 1 + l + sovRepository(uint64(l))
		}
	}
	if m.LabelsCount != 0 {
		n += 1 + sovRepository(uint64(m.LabelsCount))
	}
	if len(m.Releases) > 0 {
		for _, e := range m.Releases {
			l = e.Size()
			n += 1 + l + sovRepository(uint64(l))
		}
	}
	if m.CreatedAt != 0 {
		n += 1 + sovRepository(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovRepository(uint64(m.UpdatedAt))
	}
	if m.PushedAt != 0 {
		n += 2 + sovRepository(uint64(m.PushedAt))
	}
	if len(m.Stargazers) > 0 {
		l = 0
		for _, e := range m.Stargazers {
			l += sovRepository(uint64(e))
		}
		n += 2 + sovRepository(uint64(l)) + l
	}
	if m.Archived {
		n += 3
	}
	l = len(m.License)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	l = len(m.DefaultBranch)
	if l > 0 {
		n += 2 + l + sovRepository(uint64(l))
	}
	if m.Parent != 0 {
		n += 2 + sovRepository(uint64(m.Parent))
	}
	if m.Fork {
		n += 3
	}
	if len(m.Collaborators) > 0 {
		for _, e := range m.Collaborators {
			l = e.Size()
			n += 2 + l + sovRepository(uint64(l))
		}
	}
	if m.AllowForking {
		n += 3
	}
	if len(m.Backups) > 0 {
		for _, e := range m.Backups {
			l = e.Size()
			n += 2 + l + sovRepository(uint64(l))
		}
	}
	if m.EnableArweaveBackup {
		n += 3
	}
	return n
}

func (m *RepositoryId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	return n
}

func (m *BaseRepositoryKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRepository(uint64(m.Id))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	return n
}

func (m *RepositoryOwner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovRepository(uint64(m.Type))
	}
	return n
}

func (m *IssueIid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Iid != 0 {
		n += 1 + sovRepository(uint64(m.Iid))
	}
	if m.Id != 0 {
		n += 1 + sovRepository(uint64(m.Id))
	}
	return n
}

func (m *PullRequestIid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Iid != 0 {
		n += 1 + sovRepository(uint64(m.Iid))
	}
	if m.Id != 0 {
		n += 1 + sovRepository(uint64(m.Id))
	}
	return n
}

func (m *RepositoryCollaborator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	if m.Permission != 0 {
		n += 1 + sovRepository(uint64(m.Permission))
	}
	return n
}

func (m *RepositoryLabel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRepository(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	return n
}

func (m *RepositoryRelease) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRepository(uint64(m.Id))
	}
	l = len(m.TagName)
	if l > 0 {
		n += 1 + l + sovRepository(uint64(l))
	}
	return n
}

func (m *RepositoryBackup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Store != 0 {
		n += 1 + sovRepository(uint64(m.Store))
	}
	if len(m.Refs) > 0 {
		for _, s := range m.Refs {
			l = len(s)
			n += 1 + l + sovRepository(uint64(l))
		}
	}
	return n
}

func sovRepository(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRepository(x uint64) (n int) {
	return sovRepository(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Repository) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Repository: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Repository: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &RepositoryOwner{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Forks = append(m.Forks, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRepository
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRepository
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Forks) == 0 {
					m.Forks = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Forks = append(m.Forks, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Forks", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscribers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscribers = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commits = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuesCount", wireType)
			}
			m.IssuesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IssuesCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PullsCount", wireType)
			}
			m.PullsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PullsCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = append(m.Labels, &RepositoryLabel{})
			if err := m.Labels[len(m.Labels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelsCount", wireType)
			}
			m.LabelsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LabelsCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Releases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Releases = append(m.Releases, &RepositoryRelease{})
			if err := m.Releases[len(m.Releases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushedAt", wireType)
			}
			m.PushedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PushedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Stargazers = append(m.Stargazers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRepository
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRepository
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRepository
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Stargazers) == 0 {
					m.Stargazers = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRepository
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Stargazers = append(m.Stargazers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Stargazers", wireType)
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Archived = bool(v != 0)
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field License", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.License = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBranch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultBranch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			m.Parent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Parent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fork", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Fork = bool(v != 0)
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collaborators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collaborators = append(m.Collaborators, &RepositoryCollaborator{})
			if err := m.Collaborators[len(m.Collaborators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowForking", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowForking = bool(v != 0)
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Backups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Backups = append(m.Backups, &RepositoryBackup{})
			if err := m.Backups[len(m.Backups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableArweaveBackup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableArweaveBackup = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepositoryId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepositoryId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepositoryId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseRepositoryKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseRepositoryKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseRepositoryKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepositoryOwner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepositoryOwner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepositoryOwner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= OwnerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IssueIid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IssueIid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IssueIid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iid", wireType)
			}
			m.Iid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Iid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullRequestIid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullRequestIid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullRequestIid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iid", wireType)
			}
			m.Iid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Iid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepositoryCollaborator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepositoryCollaborator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepositoryCollaborator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			m.Permission = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permission |= RepositoryCollaborator_Permission(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepositoryLabel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepositoryLabel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepositoryLabel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepositoryRelease) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepositoryRelease: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepositoryRelease: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepositoryBackup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepositoryBackup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepositoryBackup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= RepositoryBackup_Store(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepository
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRepository
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Refs = append(m.Refs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepository(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRepository
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRepository(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRepository
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRepository
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRepository
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRepository
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRepository
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRepository        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRepository          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRepository = fmt.Errorf("proto: unexpected end of group")
)
