// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitopia/task.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TaskType int32

const (
	TypeForkRepository      TaskType = 0
	TypeSetPullRequestState TaskType = 1
)

var TaskType_name = map[int32]string{
	0: "TASK_TYPE_FORK_REPOSITORY",
	1: "TASK_TYPE_SET_PULL_REQUEST_STATE",
}

var TaskType_value = map[string]int32{
	"TASK_TYPE_FORK_REPOSITORY":        0,
	"TASK_TYPE_SET_PULL_REQUEST_STATE": 1,
}

func (x TaskType) String() string {
	return proto.EnumName(TaskType_name, int32(x))
}

func (TaskType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a6920678987ef43f, []int{0}
}

type TaskState int32

const (
	StatePending TaskState = 0
	StateSuccess TaskState = 1
	StateFailure TaskState = 2
)

var TaskState_name = map[int32]string{
	0: "TASK_STATE_PENDING",
	1: "TASK_STATE_SUCCESS",
	2: "TASK_STATE_FAILURE",
}

var TaskState_value = map[string]int32{
	"TASK_STATE_PENDING": 0,
	"TASK_STATE_SUCCESS": 1,
	"TASK_STATE_FAILURE": 2,
}

func (x TaskState) String() string {
	return proto.EnumName(TaskState_name, int32(x))
}

func (TaskState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a6920678987ef43f, []int{1}
}

type Task struct {
	Id       uint64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type     TaskType  `protobuf:"varint,2,opt,name=type,proto3,enum=gitopia.gitopia.gitopia.v2.TaskType" json:"type,omitempty"`
	State    TaskState `protobuf:"varint,3,opt,name=state,proto3,enum=gitopia.gitopia.gitopia.v2.TaskState" json:"state,omitempty"`
	Message  string    `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Creator  string    `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
	Provider string    `protobuf:"bytes,6,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6920678987ef43f, []int{0}
}
func (m *Task) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return m.Size()
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Task) GetType() TaskType {
	if m != nil {
		return m.Type
	}
	return TypeForkRepository
}

func (m *Task) GetState() TaskState {
	if m != nil {
		return m.State
	}
	return StatePending
}

func (m *Task) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Task) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Task) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func init() {
	proto.RegisterEnum("gitopia.gitopia.gitopia.v2.TaskType", TaskType_name, TaskType_value)
	proto.RegisterEnum("gitopia.gitopia.gitopia.v2.TaskState", TaskState_name, TaskState_value)
	proto.RegisterType((*Task)(nil), "gitopia.gitopia.gitopia.v2.Task")
}

func init() { proto.RegisterFile("gitopia/task.proto", fileDescriptor_a6920678987ef43f) }

var fileDescriptor_a6920678987ef43f = []byte{
	// 456 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x4f, 0x8b, 0xd3, 0x40,
	0x14, 0xc0, 0x33, 0x35, 0xbb, 0xee, 0x0e, 0xb2, 0x84, 0x41, 0x34, 0x46, 0x08, 0x41, 0x14, 0xca,
	0x1e, 0x12, 0xa8, 0x08, 0xc2, 0x82, 0x50, 0xd7, 0x54, 0xca, 0x96, 0x6d, 0x9c, 0x99, 0x82, 0xeb,
	0x25, 0x64, 0xdb, 0x21, 0x0e, 0xfd, 0x33, 0x71, 0x66, 0x52, 0xec, 0x37, 0x90, 0x5e, 0xf4, 0x0b,
	0xf4, 0xe4, 0x97, 0xf1, 0xb8, 0x47, 0x2f, 0x82, 0xb4, 0x5f, 0x44, 0x32, 0xfd, 0xe3, 0x52, 0x10,
	0x2f, 0x99, 0x79, 0x79, 0xbf, 0xdf, 0xe3, 0x3d, 0xe6, 0x41, 0x94, 0x73, 0x2d, 0x0a, 0x9e, 0x45,
	0x3a, 0x53, 0xc3, 0xb0, 0x90, 0x42, 0x0b, 0xe4, 0x6d, 0xfe, 0x85, 0xfb, 0xe7, 0xb4, 0xe1, 0xdd,
	0xcf, 0x45, 0x2e, 0x0c, 0x16, 0x55, 0xb7, 0xb5, 0xf1, 0xe4, 0x17, 0x80, 0x36, 0xcd, 0xd4, 0x10,
	0x9d, 0xc0, 0x1a, 0x1f, 0xb8, 0x20, 0x00, 0x75, 0x1b, 0xd7, 0xf8, 0x00, 0xbd, 0x84, 0xb6, 0x9e,
	0x15, 0xcc, 0xad, 0x05, 0xa0, 0x7e, 0xd2, 0x78, 0x1a, 0xfe, 0xbb, 0x72, 0x58, 0xf9, 0x74, 0x56,
	0x30, 0x6c, 0x0c, 0x74, 0x06, 0x0f, 0x94, 0xce, 0x34, 0x73, 0xef, 0x18, 0xf5, 0xd9, 0xff, 0x54,
	0x52, 0xc1, 0x78, 0xed, 0x20, 0x17, 0xde, 0x1d, 0x33, 0xa5, 0xb2, 0x9c, 0xb9, 0x76, 0x00, 0xea,
	0xc7, 0x78, 0x1b, 0x56, 0x99, 0xbe, 0x64, 0x99, 0x16, 0xd2, 0x3d, 0x58, 0x67, 0x36, 0x21, 0xf2,
	0xe0, 0x51, 0x21, 0xc5, 0x94, 0x0f, 0x98, 0x74, 0x0f, 0x4d, 0x6a, 0x17, 0x9f, 0xce, 0x01, 0x3c,
	0xda, 0xf6, 0x87, 0x5e, 0xc0, 0x47, 0xb4, 0x49, 0x2e, 0x52, 0x7a, 0x95, 0xc4, 0x69, 0xab, 0x8b,
	0x2f, 0x52, 0x1c, 0x27, 0x5d, 0xd2, 0xa6, 0x5d, 0x7c, 0xe5, 0x58, 0xde, 0x83, 0xf9, 0x22, 0x40,
	0x15, 0xd8, 0x12, 0x72, 0x88, 0x59, 0x21, 0x14, 0xd7, 0x42, 0xce, 0x50, 0x13, 0x06, 0x7f, 0x35,
	0x12, 0xd3, 0x34, 0xe9, 0x75, 0x3a, 0x29, 0x8e, 0xdf, 0xf5, 0x62, 0x42, 0x53, 0x42, 0x9b, 0x34,
	0x76, 0x80, 0xf7, 0x78, 0xbe, 0x08, 0x1e, 0x56, 0x36, 0x61, 0x3a, 0x29, 0x47, 0x23, 0xcc, 0x3e,
	0x95, 0x4c, 0x69, 0x33, 0x9d, 0x67, 0x7f, 0xf9, 0xee, 0x5b, 0xa7, 0x5f, 0x01, 0x3c, 0xde, 0x4d,
	0x8c, 0xea, 0x10, 0x99, 0xb2, 0xa6, 0x40, 0x9a, 0xc4, 0x97, 0x6f, 0xda, 0x97, 0x6f, 0x1d, 0xcb,
	0x73, 0xe6, 0x8b, 0xe0, 0x9e, 0x41, 0x12, 0x36, 0x19, 0xf0, 0x49, 0xbe, 0x47, 0x92, 0xde, 0xf9,
	0x79, 0x4c, 0x88, 0x03, 0x6e, 0x91, 0xa4, 0xec, 0xf7, 0x99, 0x52, 0x7b, 0x64, 0xab, 0xd9, 0xee,
	0xf4, 0x70, 0xec, 0xd4, 0x6e, 0x91, 0xad, 0x8c, 0x8f, 0x4a, 0xb9, 0xe9, 0xe8, 0xf5, 0xfb, 0x1f,
	0x4b, 0x1f, 0xdc, 0x2c, 0x7d, 0xf0, 0x7b, 0xe9, 0x83, 0x6f, 0x2b, 0xdf, 0xba, 0x59, 0xf9, 0xd6,
	0xcf, 0x95, 0x6f, 0x7d, 0x78, 0x95, 0x73, 0xfd, 0xb1, 0xbc, 0x0e, 0xfb, 0x62, 0x1c, 0x6d, 0x37,
	0x6d, 0x7b, 0x7e, 0xde, 0xdd, 0xc6, 0x3c, 0x97, 0x99, 0xe6, 0x62, 0xa2, 0xa2, 0x69, 0x23, 0xaa,
	0x9e, 0x5f, 0x9d, 0x99, 0xef, 0xf5, 0xa1, 0xd9, 0xaf, 0xe7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x99, 0xae, 0xd4, 0xaf, 0xa7, 0x02, 0x00, 0x00,
}

func (m *Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintTask(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTask(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintTask(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if m.State != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTask(dAtA []byte, offset int, v uint64) int {
	offset -= sovTask(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Task) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTask(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovTask(uint64(m.Type))
	}
	if m.State != 0 {
		n += 1 + sovTask(uint64(m.State))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	return n
}

func sovTask(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTask(x uint64) (n int) {
	return sovTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= TaskType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= TaskState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTask
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTask
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTask
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTask        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTask          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTask = fmt.Errorf("proto: unexpected end of group")
)
