// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitopia/gitopia/gitopia/pullRequest.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PullRequest_State int32

const (
	PullRequest_OPEN   PullRequest_State = 0
	PullRequest_CLOSED PullRequest_State = 1
	PullRequest_MERGED PullRequest_State = 2
)

var PullRequest_State_name = map[int32]string{
	0: "OPEN",
	1: "CLOSED",
	2: "MERGED",
}

var PullRequest_State_value = map[string]int32{
	"OPEN":   0,
	"CLOSED": 1,
	"MERGED": 2,
}

func (x PullRequest_State) String() string {
	return proto.EnumName(PullRequest_State_name, int32(x))
}

func (PullRequest_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_32b32a6c9329b65f, []int{0, 0}
}

type PullRequest struct {
	Creator             string            `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id                  uint64            `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Iid                 uint64            `protobuf:"varint,3,opt,name=iid,proto3" json:"iid,omitempty"`
	Title               string            `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	State               PullRequest_State `protobuf:"varint,5,opt,name=state,proto3,enum=gitopia.gitopia.gitopia.PullRequest_State" json:"state,omitempty"`
	Description         string            `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Locked              bool              `protobuf:"varint,7,opt,name=locked,proto3" json:"locked,omitempty"`
	CommentsCount       uint64            `protobuf:"varint,8,opt,name=commentsCount,proto3" json:"commentsCount,omitempty"`
	Issues              []*IssueIid       `protobuf:"bytes,9,rep,name=issues,proto3" json:"issues,omitempty"`
	Labels              []uint64          `protobuf:"varint,10,rep,packed,name=labels,proto3" json:"labels,omitempty"`
	Assignees           []string          `protobuf:"bytes,11,rep,name=assignees,proto3" json:"assignees,omitempty"`
	Reviewers           []string          `protobuf:"bytes,12,rep,name=reviewers,proto3" json:"reviewers,omitempty"`
	Draft               bool              `protobuf:"varint,13,opt,name=draft,proto3" json:"draft,omitempty"`
	CreatedAt           int64             `protobuf:"varint,14,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt           int64             `protobuf:"varint,15,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	ClosedAt            int64             `protobuf:"varint,16,opt,name=closedAt,proto3" json:"closedAt,omitempty"`
	ClosedBy            string            `protobuf:"bytes,17,opt,name=closedBy,proto3" json:"closedBy,omitempty"`
	MergedAt            int64             `protobuf:"varint,18,opt,name=mergedAt,proto3" json:"mergedAt,omitempty"`
	MergedBy            string            `protobuf:"bytes,19,opt,name=mergedBy,proto3" json:"mergedBy,omitempty"`
	MergeCommitSha      string            `protobuf:"bytes,20,opt,name=mergeCommitSha,proto3" json:"mergeCommitSha,omitempty"`
	MaintainerCanModify bool              `protobuf:"varint,21,opt,name=maintainerCanModify,proto3" json:"maintainerCanModify,omitempty"`
	Head                *PullRequestHead  `protobuf:"bytes,22,opt,name=head,proto3" json:"head,omitempty"`
	Base                *PullRequestBase  `protobuf:"bytes,23,opt,name=base,proto3" json:"base,omitempty"`
}

func (m *PullRequest) Reset()         { *m = PullRequest{} }
func (m *PullRequest) String() string { return proto.CompactTextString(m) }
func (*PullRequest) ProtoMessage()    {}
func (*PullRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_32b32a6c9329b65f, []int{0}
}
func (m *PullRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PullRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PullRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PullRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullRequest.Merge(m, src)
}
func (m *PullRequest) XXX_Size() int {
	return m.Size()
}
func (m *PullRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PullRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PullRequest proto.InternalMessageInfo

func (m *PullRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *PullRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PullRequest) GetIid() uint64 {
	if m != nil {
		return m.Iid
	}
	return 0
}

func (m *PullRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PullRequest) GetState() PullRequest_State {
	if m != nil {
		return m.State
	}
	return PullRequest_OPEN
}

func (m *PullRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PullRequest) GetLocked() bool {
	if m != nil {
		return m.Locked
	}
	return false
}

func (m *PullRequest) GetCommentsCount() uint64 {
	if m != nil {
		return m.CommentsCount
	}
	return 0
}

func (m *PullRequest) GetIssues() []*IssueIid {
	if m != nil {
		return m.Issues
	}
	return nil
}

func (m *PullRequest) GetLabels() []uint64 {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *PullRequest) GetAssignees() []string {
	if m != nil {
		return m.Assignees
	}
	return nil
}

func (m *PullRequest) GetReviewers() []string {
	if m != nil {
		return m.Reviewers
	}
	return nil
}

func (m *PullRequest) GetDraft() bool {
	if m != nil {
		return m.Draft
	}
	return false
}

func (m *PullRequest) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *PullRequest) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *PullRequest) GetClosedAt() int64 {
	if m != nil {
		return m.ClosedAt
	}
	return 0
}

func (m *PullRequest) GetClosedBy() string {
	if m != nil {
		return m.ClosedBy
	}
	return ""
}

func (m *PullRequest) GetMergedAt() int64 {
	if m != nil {
		return m.MergedAt
	}
	return 0
}

func (m *PullRequest) GetMergedBy() string {
	if m != nil {
		return m.MergedBy
	}
	return ""
}

func (m *PullRequest) GetMergeCommitSha() string {
	if m != nil {
		return m.MergeCommitSha
	}
	return ""
}

func (m *PullRequest) GetMaintainerCanModify() bool {
	if m != nil {
		return m.MaintainerCanModify
	}
	return false
}

func (m *PullRequest) GetHead() *PullRequestHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *PullRequest) GetBase() *PullRequestBase {
	if m != nil {
		return m.Base
	}
	return nil
}

type PullRequestHead struct {
	RepositoryId uint64 `protobuf:"varint,1,opt,name=repositoryId,proto3" json:"repositoryId,omitempty"`
	Branch       string `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	CommitSha    string `protobuf:"bytes,3,opt,name=commitSha,proto3" json:"commitSha,omitempty"`
}

func (m *PullRequestHead) Reset()         { *m = PullRequestHead{} }
func (m *PullRequestHead) String() string { return proto.CompactTextString(m) }
func (*PullRequestHead) ProtoMessage()    {}
func (*PullRequestHead) Descriptor() ([]byte, []int) {
	return fileDescriptor_32b32a6c9329b65f, []int{1}
}
func (m *PullRequestHead) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PullRequestHead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PullRequestHead.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PullRequestHead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullRequestHead.Merge(m, src)
}
func (m *PullRequestHead) XXX_Size() int {
	return m.Size()
}
func (m *PullRequestHead) XXX_DiscardUnknown() {
	xxx_messageInfo_PullRequestHead.DiscardUnknown(m)
}

var xxx_messageInfo_PullRequestHead proto.InternalMessageInfo

func (m *PullRequestHead) GetRepositoryId() uint64 {
	if m != nil {
		return m.RepositoryId
	}
	return 0
}

func (m *PullRequestHead) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *PullRequestHead) GetCommitSha() string {
	if m != nil {
		return m.CommitSha
	}
	return ""
}

type PullRequestBase struct {
	RepositoryId uint64 `protobuf:"varint,1,opt,name=repositoryId,proto3" json:"repositoryId,omitempty"`
	Branch       string `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	CommitSha    string `protobuf:"bytes,3,opt,name=commitSha,proto3" json:"commitSha,omitempty"`
}

func (m *PullRequestBase) Reset()         { *m = PullRequestBase{} }
func (m *PullRequestBase) String() string { return proto.CompactTextString(m) }
func (*PullRequestBase) ProtoMessage()    {}
func (*PullRequestBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_32b32a6c9329b65f, []int{2}
}
func (m *PullRequestBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PullRequestBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PullRequestBase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PullRequestBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullRequestBase.Merge(m, src)
}
func (m *PullRequestBase) XXX_Size() int {
	return m.Size()
}
func (m *PullRequestBase) XXX_DiscardUnknown() {
	xxx_messageInfo_PullRequestBase.DiscardUnknown(m)
}

var xxx_messageInfo_PullRequestBase proto.InternalMessageInfo

func (m *PullRequestBase) GetRepositoryId() uint64 {
	if m != nil {
		return m.RepositoryId
	}
	return 0
}

func (m *PullRequestBase) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *PullRequestBase) GetCommitSha() string {
	if m != nil {
		return m.CommitSha
	}
	return ""
}

func init() {
	proto.RegisterEnum("gitopia.gitopia.gitopia.PullRequest_State", PullRequest_State_name, PullRequest_State_value)
	proto.RegisterType((*PullRequest)(nil), "gitopia.gitopia.gitopia.PullRequest")
	proto.RegisterType((*PullRequestHead)(nil), "gitopia.gitopia.gitopia.PullRequestHead")
	proto.RegisterType((*PullRequestBase)(nil), "gitopia.gitopia.gitopia.PullRequestBase")
}

func init() {
	proto.RegisterFile("gitopia/gitopia/gitopia/pullRequest.proto", fileDescriptor_32b32a6c9329b65f)
}

var fileDescriptor_32b32a6c9329b65f = []byte{
	// 612 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcd, 0x6e, 0x13, 0x3d,
	0x14, 0xcd, 0x64, 0x92, 0x34, 0x71, 0xda, 0x34, 0x9f, 0xdb, 0xaf, 0xb5, 0x2a, 0x14, 0x0d, 0x11,
	0x42, 0x53, 0x24, 0x52, 0x54, 0xc4, 0x02, 0x89, 0x05, 0x24, 0x8d, 0x4a, 0x25, 0x4a, 0x2b, 0x77,
	0xc7, 0xce, 0x19, 0xdf, 0x26, 0x56, 0x33, 0xe3, 0xc1, 0x76, 0x0a, 0x79, 0x0b, 0x1e, 0x8b, 0x65,
	0x25, 0x36, 0x2c, 0x51, 0xfb, 0x22, 0xc8, 0x9e, 0x34, 0xd3, 0x06, 0x22, 0x75, 0xc3, 0xca, 0xf7,
	0x9c, 0x73, 0x8f, 0xef, 0xf5, 0x2f, 0xda, 0x1d, 0x0a, 0x23, 0x53, 0xc1, 0xf6, 0x16, 0xc7, 0x74,
	0x32, 0x1e, 0x53, 0xf8, 0x3c, 0x01, 0x6d, 0x3a, 0xa9, 0x92, 0x46, 0xe2, 0xed, 0x99, 0xd4, 0x59,
	0x18, 0x77, 0x36, 0x87, 0x72, 0x28, 0x5d, 0xce, 0x9e, 0x8d, 0xb2, 0xf4, 0x9d, 0x70, 0xd9, 0xcc,
	0x0a, 0x52, 0xa9, 0x85, 0x91, 0x6a, 0x9a, 0x65, 0xb6, 0x7f, 0x54, 0x50, 0xfd, 0x34, 0x2f, 0x87,
	0x09, 0x5a, 0x89, 0x14, 0x30, 0x23, 0x15, 0xf1, 0x02, 0x2f, 0xac, 0xd1, 0x5b, 0x88, 0x1b, 0xa8,
	0x28, 0x38, 0x29, 0x06, 0x5e, 0x58, 0xa2, 0x45, 0xc1, 0x71, 0x13, 0xf9, 0x42, 0x70, 0xe2, 0x3b,
	0xc2, 0x86, 0x78, 0x13, 0x95, 0x8d, 0x30, 0x63, 0x20, 0x25, 0xe7, 0xcc, 0x00, 0x7e, 0x8b, 0xca,
	0xda, 0x30, 0x03, 0xa4, 0x1c, 0x78, 0x61, 0x63, 0xff, 0x59, 0x67, 0xc9, 0x52, 0x3a, 0x77, 0xda,
	0xe8, 0x9c, 0x59, 0x07, 0xcd, 0x8c, 0x38, 0x40, 0x75, 0x0e, 0x3a, 0x52, 0x22, 0x35, 0x42, 0x26,
	0xa4, 0xe2, 0x66, 0xbf, 0x4b, 0xe1, 0x2d, 0x54, 0x19, 0xcb, 0xe8, 0x02, 0x38, 0x59, 0x09, 0xbc,
	0xb0, 0x4a, 0x67, 0x08, 0x3f, 0x41, 0x6b, 0x91, 0x8c, 0x63, 0x48, 0x8c, 0xee, 0xc9, 0x49, 0x62,
	0x48, 0xd5, 0x75, 0x7b, 0x9f, 0xc4, 0xaf, 0x51, 0x45, 0x68, 0x3d, 0x01, 0x4d, 0x6a, 0x81, 0x1f,
	0xd6, 0xf7, 0x1f, 0x2f, 0x6d, 0xf1, 0xc8, 0xa6, 0x1d, 0x09, 0x4e, 0x67, 0x06, 0x57, 0x98, 0x0d,
	0x60, 0xac, 0x09, 0x0a, 0xfc, 0xb0, 0x44, 0x67, 0x08, 0x3f, 0x42, 0x35, 0xa6, 0xb5, 0x18, 0x26,
	0x00, 0x9a, 0xd4, 0x03, 0x3f, 0xac, 0xd1, 0x9c, 0xb0, 0xaa, 0x82, 0x4b, 0x01, 0x5f, 0x40, 0x69,
	0xb2, 0x9a, 0xa9, 0x73, 0xc2, 0x6e, 0x23, 0x57, 0xec, 0xdc, 0x90, 0x35, 0xb7, 0x96, 0x0c, 0x58,
	0x8f, 0x3b, 0x09, 0xe0, 0xef, 0x0c, 0x69, 0x04, 0x5e, 0xe8, 0xd3, 0x9c, 0xb0, 0xea, 0x24, 0xe5,
	0x33, 0x75, 0x3d, 0x53, 0xe7, 0x04, 0xde, 0x41, 0xd5, 0x68, 0x2c, 0xb5, 0x13, 0x9b, 0x4e, 0x9c,
	0xe3, 0x5c, 0xeb, 0x4e, 0xc9, 0x7f, 0x6e, 0x67, 0xe7, 0xd8, 0x6a, 0x31, 0xa8, 0xa1, 0xf3, 0xe1,
	0xcc, 0x77, 0x8b, 0x73, 0xad, 0x3b, 0x25, 0x1b, 0x99, 0xef, 0x16, 0xe3, 0xa7, 0xa8, 0xe1, 0xe2,
	0x9e, 0x8c, 0x63, 0x61, 0xce, 0x46, 0x8c, 0x6c, 0xba, 0x8c, 0x05, 0x16, 0xbf, 0x40, 0x1b, 0x31,
	0x13, 0x89, 0x61, 0x22, 0x01, 0xd5, 0x63, 0xc9, 0xb1, 0xe4, 0xe2, 0x7c, 0x4a, 0xfe, 0x77, 0xeb,
	0xfe, 0x9b, 0x84, 0xdf, 0xa0, 0xd2, 0x08, 0x18, 0x27, 0x5b, 0x81, 0x17, 0xd6, 0xf7, 0xc3, 0x87,
	0xdc, 0xa5, 0xf7, 0xc0, 0x38, 0x75, 0x2e, 0xeb, 0x1e, 0x30, 0x0d, 0x64, 0xfb, 0xe1, 0xee, 0x2e,
	0xd3, 0x40, 0x9d, 0xab, 0xbd, 0x8b, 0xca, 0xee, 0x5a, 0xe2, 0x2a, 0x2a, 0x9d, 0x9c, 0xf6, 0x3f,
	0x36, 0x0b, 0x18, 0xa1, 0x4a, 0xef, 0xc3, 0xc9, 0x59, 0xff, 0xa0, 0xe9, 0xd9, 0xf8, 0xb8, 0x4f,
	0x0f, 0xfb, 0x07, 0xcd, 0x62, 0xfb, 0x02, 0xad, 0x2f, 0x74, 0x80, 0xdb, 0x68, 0x35, 0x7f, 0x7c,
	0x47, 0xdc, 0xbd, 0xae, 0x12, 0xbd, 0xc7, 0xd9, 0xdb, 0x34, 0x50, 0x2c, 0x89, 0x46, 0xee, 0x99,
	0xd5, 0xe8, 0x0c, 0xb9, 0xb3, 0x9f, 0x6f, 0xa5, 0xef, 0xa4, 0x9c, 0x58, 0x28, 0x66, 0x1b, 0xfe,
	0x77, 0xc5, 0xba, 0x87, 0xdf, 0xaf, 0x5b, 0xde, 0xd5, 0x75, 0xcb, 0xfb, 0x75, 0xdd, 0xf2, 0xbe,
	0xdd, 0xb4, 0x0a, 0x57, 0x37, 0xad, 0xc2, 0xcf, 0x9b, 0x56, 0xe1, 0xd3, 0xf3, 0xa1, 0x30, 0xa3,
	0xc9, 0xa0, 0x13, 0xc9, 0xf8, 0x8f, 0x6f, 0xe7, 0xf2, 0xd5, 0xde, 0xd7, 0x39, 0x30, 0xd3, 0x14,
	0xf4, 0xa0, 0xe2, 0xfe, 0x9f, 0x97, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xd9, 0xdf, 0xbd, 0xdf,
	0x05, 0x05, 0x00, 0x00,
}

func (m *PullRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PullRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPullRequest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPullRequest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.MaintainerCanModify {
		i--
		if m.MaintainerCanModify {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if len(m.MergeCommitSha) > 0 {
		i -= len(m.MergeCommitSha)
		copy(dAtA[i:], m.MergeCommitSha)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.MergeCommitSha)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.MergedBy) > 0 {
		i -= len(m.MergedBy)
		copy(dAtA[i:], m.MergedBy)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.MergedBy)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.MergedAt != 0 {
		i = encodeVarintPullRequest(dAtA, i, uint64(m.MergedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.ClosedBy) > 0 {
		i -= len(m.ClosedBy)
		copy(dAtA[i:], m.ClosedBy)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.ClosedBy)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.ClosedAt != 0 {
		i = encodeVarintPullRequest(dAtA, i, uint64(m.ClosedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintPullRequest(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x78
	}
	if m.CreatedAt != 0 {
		i = encodeVarintPullRequest(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x70
	}
	if m.Draft {
		i--
		if m.Draft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if len(m.Reviewers) > 0 {
		for iNdEx := len(m.Reviewers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Reviewers[iNdEx])
			copy(dAtA[i:], m.Reviewers[iNdEx])
			i = encodeVarintPullRequest(dAtA, i, uint64(len(m.Reviewers[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Assignees) > 0 {
		for iNdEx := len(m.Assignees) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Assignees[iNdEx])
			copy(dAtA[i:], m.Assignees[iNdEx])
			i = encodeVarintPullRequest(dAtA, i, uint64(len(m.Assignees[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.Labels) > 0 {
		dAtA4 := make([]byte, len(m.Labels)*10)
		var j3 int
		for _, num := range m.Labels {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintPullRequest(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Issues) > 0 {
		for iNdEx := len(m.Issues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Issues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPullRequest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.CommentsCount != 0 {
		i = encodeVarintPullRequest(dAtA, i, uint64(m.CommentsCount))
		i--
		dAtA[i] = 0x40
	}
	if m.Locked {
		i--
		if m.Locked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x32
	}
	if m.State != 0 {
		i = encodeVarintPullRequest(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if m.Iid != 0 {
		i = encodeVarintPullRequest(dAtA, i, uint64(m.Iid))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintPullRequest(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PullRequestHead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullRequestHead) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PullRequestHead) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommitSha) > 0 {
		i -= len(m.CommitSha)
		copy(dAtA[i:], m.CommitSha)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.CommitSha)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Branch) > 0 {
		i -= len(m.Branch)
		copy(dAtA[i:], m.Branch)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.Branch)))
		i--
		dAtA[i] = 0x12
	}
	if m.RepositoryId != 0 {
		i = encodeVarintPullRequest(dAtA, i, uint64(m.RepositoryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PullRequestBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullRequestBase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PullRequestBase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommitSha) > 0 {
		i -= len(m.CommitSha)
		copy(dAtA[i:], m.CommitSha)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.CommitSha)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Branch) > 0 {
		i -= len(m.Branch)
		copy(dAtA[i:], m.Branch)
		i = encodeVarintPullRequest(dAtA, i, uint64(len(m.Branch)))
		i--
		dAtA[i] = 0x12
	}
	if m.RepositoryId != 0 {
		i = encodeVarintPullRequest(dAtA, i, uint64(m.RepositoryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPullRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovPullRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PullRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovPullRequest(uint64(m.Id))
	}
	if m.Iid != 0 {
		n += 1 + sovPullRequest(uint64(m.Iid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovPullRequest(uint64(m.State))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	if m.Locked {
		n += 2
	}
	if m.CommentsCount != 0 {
		n += 1 + sovPullRequest(uint64(m.CommentsCount))
	}
	if len(m.Issues) > 0 {
		for _, e := range m.Issues {
			l = e.Size()
			n += 1 + l + sovPullRequest(uint64(l))
		}
	}
	if len(m.Labels) > 0 {
		l = 0
		for _, e := range m.Labels {
			l += sovPullRequest(uint64(e))
		}
		n += 1 + sovPullRequest(uint64(l)) + l
	}
	if len(m.Assignees) > 0 {
		for _, s := range m.Assignees {
			l = len(s)
			n += 1 + l + sovPullRequest(uint64(l))
		}
	}
	if len(m.Reviewers) > 0 {
		for _, s := range m.Reviewers {
			l = len(s)
			n += 1 + l + sovPullRequest(uint64(l))
		}
	}
	if m.Draft {
		n += 2
	}
	if m.CreatedAt != 0 {
		n += 1 + sovPullRequest(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovPullRequest(uint64(m.UpdatedAt))
	}
	if m.ClosedAt != 0 {
		n += 2 + sovPullRequest(uint64(m.ClosedAt))
	}
	l = len(m.ClosedBy)
	if l > 0 {
		n += 2 + l + sovPullRequest(uint64(l))
	}
	if m.MergedAt != 0 {
		n += 2 + sovPullRequest(uint64(m.MergedAt))
	}
	l = len(m.MergedBy)
	if l > 0 {
		n += 2 + l + sovPullRequest(uint64(l))
	}
	l = len(m.MergeCommitSha)
	if l > 0 {
		n += 2 + l + sovPullRequest(uint64(l))
	}
	if m.MaintainerCanModify {
		n += 3
	}
	if m.Head != nil {
		l = m.Head.Size()
		n += 2 + l + sovPullRequest(uint64(l))
	}
	if m.Base != nil {
		l = m.Base.Size()
		n += 2 + l + sovPullRequest(uint64(l))
	}
	return n
}

func (m *PullRequestHead) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RepositoryId != 0 {
		n += 1 + sovPullRequest(uint64(m.RepositoryId))
	}
	l = len(m.Branch)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	l = len(m.CommitSha)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	return n
}

func (m *PullRequestBase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RepositoryId != 0 {
		n += 1 + sovPullRequest(uint64(m.RepositoryId))
	}
	l = len(m.Branch)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	l = len(m.CommitSha)
	if l > 0 {
		n += 1 + l + sovPullRequest(uint64(l))
	}
	return n
}

func sovPullRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPullRequest(x uint64) (n int) {
	return sovPullRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PullRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPullRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iid", wireType)
			}
			m.Iid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Iid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= PullRequest_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Locked = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentsCount", wireType)
			}
			m.CommentsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentsCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issues = append(m.Issues, &IssueIid{})
			if err := m.Issues[len(m.Issues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPullRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Labels = append(m.Labels, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPullRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPullRequest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPullRequest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Labels) == 0 {
					m.Labels = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPullRequest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Labels = append(m.Labels, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assignees", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assignees = append(m.Assignees, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reviewers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reviewers = append(m.Reviewers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Draft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Draft = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedAt", wireType)
			}
			m.ClosedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClosedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClosedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MergedAt", wireType)
			}
			m.MergedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MergedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MergedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MergedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MergeCommitSha", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MergeCommitSha = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaintainerCanModify", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaintainerCanModify = bool(v != 0)
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &PullRequestHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &PullRequestBase{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPullRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPullRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullRequestHead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPullRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullRequestHead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullRequestHead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryId", wireType)
			}
			m.RepositoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepositoryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Branch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Branch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitSha", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitSha = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPullRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPullRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullRequestBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPullRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullRequestBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullRequestBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryId", wireType)
			}
			m.RepositoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepositoryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Branch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Branch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitSha", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitSha = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPullRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPullRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPullRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPullRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPullRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPullRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPullRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPullRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPullRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPullRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPullRequest = fmt.Errorf("proto: unexpected end of group")
)
