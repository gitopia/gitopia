// Code generated by mockery v2.53.4. DO NOT EDIT.

package types

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockMsgClient is an autogenerated mock type for the MsgClient type
type MockMsgClient struct {
	mock.Mock
}

// AddIssueAssignees provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) AddIssueAssignees(ctx context.Context, in *MsgAddIssueAssignees, opts ...grpc.CallOption) (*MsgAddIssueAssigneesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddIssueAssignees")
	}

	var r0 *MsgAddIssueAssigneesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgAddIssueAssignees, ...grpc.CallOption) (*MsgAddIssueAssigneesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgAddIssueAssignees, ...grpc.CallOption) *MsgAddIssueAssigneesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgAddIssueAssigneesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgAddIssueAssignees, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddIssueLabels provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) AddIssueLabels(ctx context.Context, in *MsgAddIssueLabels, opts ...grpc.CallOption) (*MsgAddIssueLabelsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddIssueLabels")
	}

	var r0 *MsgAddIssueLabelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgAddIssueLabels, ...grpc.CallOption) (*MsgAddIssueLabelsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgAddIssueLabels, ...grpc.CallOption) *MsgAddIssueLabelsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgAddIssueLabelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgAddIssueLabels, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddPullRequestAssignees provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) AddPullRequestAssignees(ctx context.Context, in *MsgAddPullRequestAssignees, opts ...grpc.CallOption) (*MsgAddPullRequestAssigneesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddPullRequestAssignees")
	}

	var r0 *MsgAddPullRequestAssigneesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgAddPullRequestAssignees, ...grpc.CallOption) (*MsgAddPullRequestAssigneesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgAddPullRequestAssignees, ...grpc.CallOption) *MsgAddPullRequestAssigneesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgAddPullRequestAssigneesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgAddPullRequestAssignees, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddPullRequestLabels provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) AddPullRequestLabels(ctx context.Context, in *MsgAddPullRequestLabels, opts ...grpc.CallOption) (*MsgAddPullRequestLabelsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddPullRequestLabels")
	}

	var r0 *MsgAddPullRequestLabelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgAddPullRequestLabels, ...grpc.CallOption) (*MsgAddPullRequestLabelsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgAddPullRequestLabels, ...grpc.CallOption) *MsgAddPullRequestLabelsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgAddPullRequestLabelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgAddPullRequestLabels, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddPullRequestReviewers provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) AddPullRequestReviewers(ctx context.Context, in *MsgAddPullRequestReviewers, opts ...grpc.CallOption) (*MsgAddPullRequestReviewersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddPullRequestReviewers")
	}

	var r0 *MsgAddPullRequestReviewersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgAddPullRequestReviewers, ...grpc.CallOption) (*MsgAddPullRequestReviewersResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgAddPullRequestReviewers, ...grpc.CallOption) *MsgAddPullRequestReviewersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgAddPullRequestReviewersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgAddPullRequestReviewers, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddRepositoryBackupRef provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) AddRepositoryBackupRef(ctx context.Context, in *MsgAddRepositoryBackupRef, opts ...grpc.CallOption) (*MsgAddRepositoryBackupRefResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddRepositoryBackupRef")
	}

	var r0 *MsgAddRepositoryBackupRefResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgAddRepositoryBackupRef, ...grpc.CallOption) (*MsgAddRepositoryBackupRefResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgAddRepositoryBackupRef, ...grpc.CallOption) *MsgAddRepositoryBackupRefResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgAddRepositoryBackupRefResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgAddRepositoryBackupRef, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeOwner provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) ChangeOwner(ctx context.Context, in *MsgChangeOwner, opts ...grpc.CallOption) (*MsgChangeOwnerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ChangeOwner")
	}

	var r0 *MsgChangeOwnerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgChangeOwner, ...grpc.CallOption) (*MsgChangeOwnerResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgChangeOwner, ...grpc.CallOption) *MsgChangeOwnerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgChangeOwnerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgChangeOwner, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloseBounty provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) CloseBounty(ctx context.Context, in *MsgCloseBounty, opts ...grpc.CallOption) (*MsgCloseBountyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CloseBounty")
	}

	var r0 *MsgCloseBountyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCloseBounty, ...grpc.CallOption) (*MsgCloseBountyResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCloseBounty, ...grpc.CallOption) *MsgCloseBountyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgCloseBountyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgCloseBounty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBounty provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) CreateBounty(ctx context.Context, in *MsgCreateBounty, opts ...grpc.CallOption) (*MsgCreateBountyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBounty")
	}

	var r0 *MsgCreateBountyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCreateBounty, ...grpc.CallOption) (*MsgCreateBountyResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCreateBounty, ...grpc.CallOption) *MsgCreateBountyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgCreateBountyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgCreateBounty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateComment provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) CreateComment(ctx context.Context, in *MsgCreateComment, opts ...grpc.CallOption) (*MsgCreateCommentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 *MsgCreateCommentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCreateComment, ...grpc.CallOption) (*MsgCreateCommentResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCreateComment, ...grpc.CallOption) *MsgCreateCommentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgCreateCommentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgCreateComment, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDao provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) CreateDao(ctx context.Context, in *MsgCreateDao, opts ...grpc.CallOption) (*MsgCreateDaoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDao")
	}

	var r0 *MsgCreateDaoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCreateDao, ...grpc.CallOption) (*MsgCreateDaoResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCreateDao, ...grpc.CallOption) *MsgCreateDaoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgCreateDaoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgCreateDao, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIssue provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) CreateIssue(ctx context.Context, in *MsgCreateIssue, opts ...grpc.CallOption) (*MsgCreateIssueResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateIssue")
	}

	var r0 *MsgCreateIssueResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCreateIssue, ...grpc.CallOption) (*MsgCreateIssueResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCreateIssue, ...grpc.CallOption) *MsgCreateIssueResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgCreateIssueResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgCreateIssue, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePullRequest provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) CreatePullRequest(ctx context.Context, in *MsgCreatePullRequest, opts ...grpc.CallOption) (*MsgCreatePullRequestResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePullRequest")
	}

	var r0 *MsgCreatePullRequestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCreatePullRequest, ...grpc.CallOption) (*MsgCreatePullRequestResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCreatePullRequest, ...grpc.CallOption) *MsgCreatePullRequestResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgCreatePullRequestResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgCreatePullRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRelease provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) CreateRelease(ctx context.Context, in *MsgCreateRelease, opts ...grpc.CallOption) (*MsgCreateReleaseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRelease")
	}

	var r0 *MsgCreateReleaseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCreateRelease, ...grpc.CallOption) (*MsgCreateReleaseResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCreateRelease, ...grpc.CallOption) *MsgCreateReleaseResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgCreateReleaseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgCreateRelease, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRepository provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) CreateRepository(ctx context.Context, in *MsgCreateRepository, opts ...grpc.CallOption) (*MsgCreateRepositoryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRepository")
	}

	var r0 *MsgCreateRepositoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCreateRepository, ...grpc.CallOption) (*MsgCreateRepositoryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCreateRepository, ...grpc.CallOption) *MsgCreateRepositoryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgCreateRepositoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgCreateRepository, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRepositoryLabel provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) CreateRepositoryLabel(ctx context.Context, in *MsgCreateRepositoryLabel, opts ...grpc.CallOption) (*MsgCreateRepositoryLabelResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRepositoryLabel")
	}

	var r0 *MsgCreateRepositoryLabelResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCreateRepositoryLabel, ...grpc.CallOption) (*MsgCreateRepositoryLabelResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCreateRepositoryLabel, ...grpc.CallOption) *MsgCreateRepositoryLabelResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgCreateRepositoryLabelResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgCreateRepositoryLabel, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTask provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) CreateTask(ctx context.Context, in *MsgCreateTask, opts ...grpc.CallOption) (*MsgCreateTaskResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 *MsgCreateTaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCreateTask, ...grpc.CallOption) (*MsgCreateTaskResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCreateTask, ...grpc.CallOption) *MsgCreateTaskResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgCreateTaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgCreateTask, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) CreateUser(ctx context.Context, in *MsgCreateUser, opts ...grpc.CallOption) (*MsgCreateUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *MsgCreateUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCreateUser, ...grpc.CallOption) (*MsgCreateUserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgCreateUser, ...grpc.CallOption) *MsgCreateUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgCreateUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgCreateUser, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DaoCreateRelease provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) DaoCreateRelease(ctx context.Context, in *MsgDaoCreateRelease, opts ...grpc.CallOption) (*MsgDaoCreateReleaseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DaoCreateRelease")
	}

	var r0 *MsgDaoCreateReleaseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDaoCreateRelease, ...grpc.CallOption) (*MsgDaoCreateReleaseResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDaoCreateRelease, ...grpc.CallOption) *MsgDaoCreateReleaseResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgDaoCreateReleaseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgDaoCreateRelease, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DaoTreasurySpend provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) DaoTreasurySpend(ctx context.Context, in *MsgDaoTreasurySpend, opts ...grpc.CallOption) (*MsgDaoTreasurySpendResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DaoTreasurySpend")
	}

	var r0 *MsgDaoTreasurySpendResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDaoTreasurySpend, ...grpc.CallOption) (*MsgDaoTreasurySpendResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDaoTreasurySpend, ...grpc.CallOption) *MsgDaoTreasurySpendResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgDaoTreasurySpendResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgDaoTreasurySpend, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBounty provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) DeleteBounty(ctx context.Context, in *MsgDeleteBounty, opts ...grpc.CallOption) (*MsgDeleteBountyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBounty")
	}

	var r0 *MsgDeleteBountyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDeleteBounty, ...grpc.CallOption) (*MsgDeleteBountyResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDeleteBounty, ...grpc.CallOption) *MsgDeleteBountyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgDeleteBountyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgDeleteBounty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBranch provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) DeleteBranch(ctx context.Context, in *MsgDeleteBranch, opts ...grpc.CallOption) (*MsgDeleteBranchResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBranch")
	}

	var r0 *MsgDeleteBranchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDeleteBranch, ...grpc.CallOption) (*MsgDeleteBranchResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDeleteBranch, ...grpc.CallOption) *MsgDeleteBranchResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgDeleteBranchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgDeleteBranch, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteComment provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) DeleteComment(ctx context.Context, in *MsgDeleteComment, opts ...grpc.CallOption) (*MsgDeleteCommentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 *MsgDeleteCommentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDeleteComment, ...grpc.CallOption) (*MsgDeleteCommentResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDeleteComment, ...grpc.CallOption) *MsgDeleteCommentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgDeleteCommentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgDeleteComment, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDao provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) DeleteDao(ctx context.Context, in *MsgDeleteDao, opts ...grpc.CallOption) (*MsgDeleteDaoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDao")
	}

	var r0 *MsgDeleteDaoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDeleteDao, ...grpc.CallOption) (*MsgDeleteDaoResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDeleteDao, ...grpc.CallOption) *MsgDeleteDaoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgDeleteDaoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgDeleteDao, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIssue provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) DeleteIssue(ctx context.Context, in *MsgDeleteIssue, opts ...grpc.CallOption) (*MsgDeleteIssueResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIssue")
	}

	var r0 *MsgDeleteIssueResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDeleteIssue, ...grpc.CallOption) (*MsgDeleteIssueResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDeleteIssue, ...grpc.CallOption) *MsgDeleteIssueResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgDeleteIssueResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgDeleteIssue, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePullRequest provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) DeletePullRequest(ctx context.Context, in *MsgDeletePullRequest, opts ...grpc.CallOption) (*MsgDeletePullRequestResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePullRequest")
	}

	var r0 *MsgDeletePullRequestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDeletePullRequest, ...grpc.CallOption) (*MsgDeletePullRequestResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDeletePullRequest, ...grpc.CallOption) *MsgDeletePullRequestResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgDeletePullRequestResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgDeletePullRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRelease provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) DeleteRelease(ctx context.Context, in *MsgDeleteRelease, opts ...grpc.CallOption) (*MsgDeleteReleaseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRelease")
	}

	var r0 *MsgDeleteReleaseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDeleteRelease, ...grpc.CallOption) (*MsgDeleteReleaseResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDeleteRelease, ...grpc.CallOption) *MsgDeleteReleaseResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgDeleteReleaseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgDeleteRelease, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRepository provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) DeleteRepository(ctx context.Context, in *MsgDeleteRepository, opts ...grpc.CallOption) (*MsgDeleteRepositoryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRepository")
	}

	var r0 *MsgDeleteRepositoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDeleteRepository, ...grpc.CallOption) (*MsgDeleteRepositoryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDeleteRepository, ...grpc.CallOption) *MsgDeleteRepositoryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgDeleteRepositoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgDeleteRepository, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRepositoryLabel provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) DeleteRepositoryLabel(ctx context.Context, in *MsgDeleteRepositoryLabel, opts ...grpc.CallOption) (*MsgDeleteRepositoryLabelResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRepositoryLabel")
	}

	var r0 *MsgDeleteRepositoryLabelResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDeleteRepositoryLabel, ...grpc.CallOption) (*MsgDeleteRepositoryLabelResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDeleteRepositoryLabel, ...grpc.CallOption) *MsgDeleteRepositoryLabelResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgDeleteRepositoryLabelResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgDeleteRepositoryLabel, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTag provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) DeleteTag(ctx context.Context, in *MsgDeleteTag, opts ...grpc.CallOption) (*MsgDeleteTagResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTag")
	}

	var r0 *MsgDeleteTagResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDeleteTag, ...grpc.CallOption) (*MsgDeleteTagResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDeleteTag, ...grpc.CallOption) *MsgDeleteTagResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgDeleteTagResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgDeleteTag, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTask provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) DeleteTask(ctx context.Context, in *MsgDeleteTask, opts ...grpc.CallOption) (*MsgDeleteTaskResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 *MsgDeleteTaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDeleteTask, ...grpc.CallOption) (*MsgDeleteTaskResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDeleteTask, ...grpc.CallOption) *MsgDeleteTaskResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgDeleteTaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgDeleteTask, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) DeleteUser(ctx context.Context, in *MsgDeleteUser, opts ...grpc.CallOption) (*MsgDeleteUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 *MsgDeleteUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDeleteUser, ...grpc.CallOption) (*MsgDeleteUserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDeleteUser, ...grpc.CallOption) *MsgDeleteUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgDeleteUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgDeleteUser, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DistributePlatformIncentives provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) DistributePlatformIncentives(ctx context.Context, in *MsgDistributePlatformIncentives, opts ...grpc.CallOption) (*MsgDistributePlatformIncentivesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DistributePlatformIncentives")
	}

	var r0 *MsgDistributePlatformIncentivesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDistributePlatformIncentives, ...grpc.CallOption) (*MsgDistributePlatformIncentivesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgDistributePlatformIncentives, ...grpc.CallOption) *MsgDistributePlatformIncentivesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgDistributePlatformIncentivesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgDistributePlatformIncentives, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Exercise provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) Exercise(ctx context.Context, in *MsgExercise, opts ...grpc.CallOption) (*MsgExerciseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Exercise")
	}

	var r0 *MsgExerciseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgExercise, ...grpc.CallOption) (*MsgExerciseResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgExercise, ...grpc.CallOption) *MsgExerciseResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgExerciseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgExercise, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ForkRepository provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) ForkRepository(ctx context.Context, in *MsgForkRepository, opts ...grpc.CallOption) (*MsgForkRepositoryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ForkRepository")
	}

	var r0 *MsgForkRepositoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgForkRepository, ...grpc.CallOption) (*MsgForkRepositoryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgForkRepository, ...grpc.CallOption) *MsgForkRepositoryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgForkRepositoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgForkRepository, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvokeDaoMergePullRequest provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) InvokeDaoMergePullRequest(ctx context.Context, in *MsgInvokeDaoMergePullRequest, opts ...grpc.CallOption) (*MsgInvokeDaoMergePullRequestResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InvokeDaoMergePullRequest")
	}

	var r0 *MsgInvokeDaoMergePullRequestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgInvokeDaoMergePullRequest, ...grpc.CallOption) (*MsgInvokeDaoMergePullRequestResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgInvokeDaoMergePullRequest, ...grpc.CallOption) *MsgInvokeDaoMergePullRequestResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgInvokeDaoMergePullRequestResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgInvokeDaoMergePullRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvokeMergePullRequest provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) InvokeMergePullRequest(ctx context.Context, in *MsgInvokeMergePullRequest, opts ...grpc.CallOption) (*MsgInvokeMergePullRequestResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InvokeMergePullRequest")
	}

	var r0 *MsgInvokeMergePullRequestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgInvokeMergePullRequest, ...grpc.CallOption) (*MsgInvokeMergePullRequestResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgInvokeMergePullRequest, ...grpc.CallOption) *MsgInvokeMergePullRequestResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgInvokeMergePullRequestResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgInvokeMergePullRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LinkPullRequestIssueByIid provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) LinkPullRequestIssueByIid(ctx context.Context, in *MsgLinkPullRequestIssueByIid, opts ...grpc.CallOption) (*MsgLinkPullRequestIssueByIidResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LinkPullRequestIssueByIid")
	}

	var r0 *MsgLinkPullRequestIssueByIidResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgLinkPullRequestIssueByIid, ...grpc.CallOption) (*MsgLinkPullRequestIssueByIidResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgLinkPullRequestIssueByIid, ...grpc.CallOption) *MsgLinkPullRequestIssueByIidResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgLinkPullRequestIssueByIidResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgLinkPullRequestIssueByIid, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MultiDeleteBranch provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) MultiDeleteBranch(ctx context.Context, in *MsgMultiDeleteBranch, opts ...grpc.CallOption) (*MsgMultiDeleteBranchResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MultiDeleteBranch")
	}

	var r0 *MsgMultiDeleteBranchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgMultiDeleteBranch, ...grpc.CallOption) (*MsgMultiDeleteBranchResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgMultiDeleteBranch, ...grpc.CallOption) *MsgMultiDeleteBranchResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgMultiDeleteBranchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgMultiDeleteBranch, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MultiDeleteTag provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) MultiDeleteTag(ctx context.Context, in *MsgMultiDeleteTag, opts ...grpc.CallOption) (*MsgMultiDeleteTagResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MultiDeleteTag")
	}

	var r0 *MsgMultiDeleteTagResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgMultiDeleteTag, ...grpc.CallOption) (*MsgMultiDeleteTagResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgMultiDeleteTag, ...grpc.CallOption) *MsgMultiDeleteTagResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgMultiDeleteTagResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgMultiDeleteTag, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MultiSetBranch provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) MultiSetBranch(ctx context.Context, in *MsgMultiSetBranch, opts ...grpc.CallOption) (*MsgMultiSetBranchResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MultiSetBranch")
	}

	var r0 *MsgMultiSetBranchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgMultiSetBranch, ...grpc.CallOption) (*MsgMultiSetBranchResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgMultiSetBranch, ...grpc.CallOption) *MsgMultiSetBranchResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgMultiSetBranchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgMultiSetBranch, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MultiSetTag provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) MultiSetTag(ctx context.Context, in *MsgMultiSetTag, opts ...grpc.CallOption) (*MsgMultiSetTagResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MultiSetTag")
	}

	var r0 *MsgMultiSetTagResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgMultiSetTag, ...grpc.CallOption) (*MsgMultiSetTagResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgMultiSetTag, ...grpc.CallOption) *MsgMultiSetTagResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgMultiSetTagResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgMultiSetTag, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveDaoRepositoryCollaborator provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) RemoveDaoRepositoryCollaborator(ctx context.Context, in *MsgRemoveDaoRepositoryCollaborator, opts ...grpc.CallOption) (*MsgRemoveDaoRepositoryCollaboratorResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveDaoRepositoryCollaborator")
	}

	var r0 *MsgRemoveDaoRepositoryCollaboratorResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRemoveDaoRepositoryCollaborator, ...grpc.CallOption) (*MsgRemoveDaoRepositoryCollaboratorResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRemoveDaoRepositoryCollaborator, ...grpc.CallOption) *MsgRemoveDaoRepositoryCollaboratorResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgRemoveDaoRepositoryCollaboratorResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgRemoveDaoRepositoryCollaborator, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveIssueAssignees provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) RemoveIssueAssignees(ctx context.Context, in *MsgRemoveIssueAssignees, opts ...grpc.CallOption) (*MsgRemoveIssueAssigneesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveIssueAssignees")
	}

	var r0 *MsgRemoveIssueAssigneesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRemoveIssueAssignees, ...grpc.CallOption) (*MsgRemoveIssueAssigneesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRemoveIssueAssignees, ...grpc.CallOption) *MsgRemoveIssueAssigneesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgRemoveIssueAssigneesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgRemoveIssueAssignees, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveIssueLabels provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) RemoveIssueLabels(ctx context.Context, in *MsgRemoveIssueLabels, opts ...grpc.CallOption) (*MsgRemoveIssueLabelsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveIssueLabels")
	}

	var r0 *MsgRemoveIssueLabelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRemoveIssueLabels, ...grpc.CallOption) (*MsgRemoveIssueLabelsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRemoveIssueLabels, ...grpc.CallOption) *MsgRemoveIssueLabelsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgRemoveIssueLabelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgRemoveIssueLabels, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePullRequestAssignees provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) RemovePullRequestAssignees(ctx context.Context, in *MsgRemovePullRequestAssignees, opts ...grpc.CallOption) (*MsgRemovePullRequestAssigneesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemovePullRequestAssignees")
	}

	var r0 *MsgRemovePullRequestAssigneesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRemovePullRequestAssignees, ...grpc.CallOption) (*MsgRemovePullRequestAssigneesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRemovePullRequestAssignees, ...grpc.CallOption) *MsgRemovePullRequestAssigneesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgRemovePullRequestAssigneesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgRemovePullRequestAssignees, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePullRequestLabels provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) RemovePullRequestLabels(ctx context.Context, in *MsgRemovePullRequestLabels, opts ...grpc.CallOption) (*MsgRemovePullRequestLabelsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemovePullRequestLabels")
	}

	var r0 *MsgRemovePullRequestLabelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRemovePullRequestLabels, ...grpc.CallOption) (*MsgRemovePullRequestLabelsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRemovePullRequestLabels, ...grpc.CallOption) *MsgRemovePullRequestLabelsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgRemovePullRequestLabelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgRemovePullRequestLabels, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePullRequestReviewers provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) RemovePullRequestReviewers(ctx context.Context, in *MsgRemovePullRequestReviewers, opts ...grpc.CallOption) (*MsgRemovePullRequestReviewersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemovePullRequestReviewers")
	}

	var r0 *MsgRemovePullRequestReviewersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRemovePullRequestReviewers, ...grpc.CallOption) (*MsgRemovePullRequestReviewersResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRemovePullRequestReviewers, ...grpc.CallOption) *MsgRemovePullRequestReviewersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgRemovePullRequestReviewersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgRemovePullRequestReviewers, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveRepositoryCollaborator provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) RemoveRepositoryCollaborator(ctx context.Context, in *MsgRemoveRepositoryCollaborator, opts ...grpc.CallOption) (*MsgRemoveRepositoryCollaboratorResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRepositoryCollaborator")
	}

	var r0 *MsgRemoveRepositoryCollaboratorResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRemoveRepositoryCollaborator, ...grpc.CallOption) (*MsgRemoveRepositoryCollaboratorResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRemoveRepositoryCollaborator, ...grpc.CallOption) *MsgRemoveRepositoryCollaboratorResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgRemoveRepositoryCollaboratorResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgRemoveRepositoryCollaborator, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenameDao provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) RenameDao(ctx context.Context, in *MsgRenameDao, opts ...grpc.CallOption) (*MsgRenameDaoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RenameDao")
	}

	var r0 *MsgRenameDaoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRenameDao, ...grpc.CallOption) (*MsgRenameDaoResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRenameDao, ...grpc.CallOption) *MsgRenameDaoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgRenameDaoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgRenameDao, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenameRepository provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) RenameRepository(ctx context.Context, in *MsgRenameRepository, opts ...grpc.CallOption) (*MsgRenameRepositoryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RenameRepository")
	}

	var r0 *MsgRenameRepositoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRenameRepository, ...grpc.CallOption) (*MsgRenameRepositoryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgRenameRepository, ...grpc.CallOption) *MsgRenameRepositoryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgRenameRepositoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgRenameRepository, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetBranch provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) SetBranch(ctx context.Context, in *MsgSetBranch, opts ...grpc.CallOption) (*MsgSetBranchResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetBranch")
	}

	var r0 *MsgSetBranchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgSetBranch, ...grpc.CallOption) (*MsgSetBranchResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgSetBranch, ...grpc.CallOption) *MsgSetBranchResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgSetBranchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgSetBranch, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDefaultBranch provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) SetDefaultBranch(ctx context.Context, in *MsgSetDefaultBranch, opts ...grpc.CallOption) (*MsgSetDefaultBranchResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetDefaultBranch")
	}

	var r0 *MsgSetDefaultBranchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgSetDefaultBranch, ...grpc.CallOption) (*MsgSetDefaultBranchResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgSetDefaultBranch, ...grpc.CallOption) *MsgSetDefaultBranchResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgSetDefaultBranchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgSetDefaultBranch, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPullRequestState provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) SetPullRequestState(ctx context.Context, in *MsgSetPullRequestState, opts ...grpc.CallOption) (*MsgSetPullRequestStateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetPullRequestState")
	}

	var r0 *MsgSetPullRequestStateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgSetPullRequestState, ...grpc.CallOption) (*MsgSetPullRequestStateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgSetPullRequestState, ...grpc.CallOption) *MsgSetPullRequestStateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgSetPullRequestStateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgSetPullRequestState, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTag provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) SetTag(ctx context.Context, in *MsgSetTag, opts ...grpc.CallOption) (*MsgSetTagResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetTag")
	}

	var r0 *MsgSetTagResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgSetTag, ...grpc.CallOption) (*MsgSetTagResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgSetTag, ...grpc.CallOption) *MsgSetTagResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgSetTagResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgSetTag, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToggleArweaveBackup provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) ToggleArweaveBackup(ctx context.Context, in *MsgToggleArweaveBackup, opts ...grpc.CallOption) (*MsgToggleArweaveBackupResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ToggleArweaveBackup")
	}

	var r0 *MsgToggleArweaveBackupResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgToggleArweaveBackup, ...grpc.CallOption) (*MsgToggleArweaveBackupResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgToggleArweaveBackup, ...grpc.CallOption) *MsgToggleArweaveBackupResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgToggleArweaveBackupResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgToggleArweaveBackup, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToggleCommentResolved provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) ToggleCommentResolved(ctx context.Context, in *MsgToggleCommentResolved, opts ...grpc.CallOption) (*MsgToggleCommentResolvedResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ToggleCommentResolved")
	}

	var r0 *MsgToggleCommentResolvedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgToggleCommentResolved, ...grpc.CallOption) (*MsgToggleCommentResolvedResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgToggleCommentResolved, ...grpc.CallOption) *MsgToggleCommentResolvedResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgToggleCommentResolvedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgToggleCommentResolved, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToggleForcePush provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) ToggleForcePush(ctx context.Context, in *MsgToggleForcePush, opts ...grpc.CallOption) (*MsgToggleForcePushResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ToggleForcePush")
	}

	var r0 *MsgToggleForcePushResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgToggleForcePush, ...grpc.CallOption) (*MsgToggleForcePushResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgToggleForcePush, ...grpc.CallOption) *MsgToggleForcePushResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgToggleForcePushResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgToggleForcePush, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToggleIssueState provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) ToggleIssueState(ctx context.Context, in *MsgToggleIssueState, opts ...grpc.CallOption) (*MsgToggleIssueStateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ToggleIssueState")
	}

	var r0 *MsgToggleIssueStateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgToggleIssueState, ...grpc.CallOption) (*MsgToggleIssueStateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgToggleIssueState, ...grpc.CallOption) *MsgToggleIssueStateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgToggleIssueStateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgToggleIssueState, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToggleRepositoryArchived provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) ToggleRepositoryArchived(ctx context.Context, in *MsgToggleRepositoryArchived, opts ...grpc.CallOption) (*MsgToggleRepositoryArchivedResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ToggleRepositoryArchived")
	}

	var r0 *MsgToggleRepositoryArchivedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgToggleRepositoryArchived, ...grpc.CallOption) (*MsgToggleRepositoryArchivedResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgToggleRepositoryArchived, ...grpc.CallOption) *MsgToggleRepositoryArchivedResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgToggleRepositoryArchivedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgToggleRepositoryArchived, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToggleRepositoryForking provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) ToggleRepositoryForking(ctx context.Context, in *MsgToggleRepositoryForking, opts ...grpc.CallOption) (*MsgToggleRepositoryForkingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ToggleRepositoryForking")
	}

	var r0 *MsgToggleRepositoryForkingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgToggleRepositoryForking, ...grpc.CallOption) (*MsgToggleRepositoryForkingResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgToggleRepositoryForking, ...grpc.CallOption) *MsgToggleRepositoryForkingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgToggleRepositoryForkingResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgToggleRepositoryForking, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnlinkPullRequestIssueByIid provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) UnlinkPullRequestIssueByIid(ctx context.Context, in *MsgUnlinkPullRequestIssueByIid, opts ...grpc.CallOption) (*MsgUnlinkPullRequestIssueByIidResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnlinkPullRequestIssueByIid")
	}

	var r0 *MsgUnlinkPullRequestIssueByIidResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUnlinkPullRequestIssueByIid, ...grpc.CallOption) (*MsgUnlinkPullRequestIssueByIidResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUnlinkPullRequestIssueByIid, ...grpc.CallOption) *MsgUnlinkPullRequestIssueByIidResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgUnlinkPullRequestIssueByIidResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgUnlinkPullRequestIssueByIid, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBountyExpiry provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) UpdateBountyExpiry(ctx context.Context, in *MsgUpdateBountyExpiry, opts ...grpc.CallOption) (*MsgUpdateBountyExpiryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBountyExpiry")
	}

	var r0 *MsgUpdateBountyExpiryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateBountyExpiry, ...grpc.CallOption) (*MsgUpdateBountyExpiryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateBountyExpiry, ...grpc.CallOption) *MsgUpdateBountyExpiryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgUpdateBountyExpiryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgUpdateBountyExpiry, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateComment provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) UpdateComment(ctx context.Context, in *MsgUpdateComment, opts ...grpc.CallOption) (*MsgUpdateCommentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComment")
	}

	var r0 *MsgUpdateCommentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateComment, ...grpc.CallOption) (*MsgUpdateCommentResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateComment, ...grpc.CallOption) *MsgUpdateCommentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgUpdateCommentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgUpdateComment, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDaoAvatar provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) UpdateDaoAvatar(ctx context.Context, in *MsgUpdateDaoAvatar, opts ...grpc.CallOption) (*MsgUpdateDaoAvatarResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDaoAvatar")
	}

	var r0 *MsgUpdateDaoAvatarResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateDaoAvatar, ...grpc.CallOption) (*MsgUpdateDaoAvatarResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateDaoAvatar, ...grpc.CallOption) *MsgUpdateDaoAvatarResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgUpdateDaoAvatarResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgUpdateDaoAvatar, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDaoConfig provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) UpdateDaoConfig(ctx context.Context, in *MsgUpdateDaoConfig, opts ...grpc.CallOption) (*MsgUpdateDaoConfigResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDaoConfig")
	}

	var r0 *MsgUpdateDaoConfigResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateDaoConfig, ...grpc.CallOption) (*MsgUpdateDaoConfigResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateDaoConfig, ...grpc.CallOption) *MsgUpdateDaoConfigResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgUpdateDaoConfigResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgUpdateDaoConfig, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDaoDescription provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) UpdateDaoDescription(ctx context.Context, in *MsgUpdateDaoDescription, opts ...grpc.CallOption) (*MsgUpdateDaoDescriptionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDaoDescription")
	}

	var r0 *MsgUpdateDaoDescriptionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateDaoDescription, ...grpc.CallOption) (*MsgUpdateDaoDescriptionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateDaoDescription, ...grpc.CallOption) *MsgUpdateDaoDescriptionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgUpdateDaoDescriptionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgUpdateDaoDescription, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDaoLocation provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) UpdateDaoLocation(ctx context.Context, in *MsgUpdateDaoLocation, opts ...grpc.CallOption) (*MsgUpdateDaoLocationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDaoLocation")
	}

	var r0 *MsgUpdateDaoLocationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateDaoLocation, ...grpc.CallOption) (*MsgUpdateDaoLocationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateDaoLocation, ...grpc.CallOption) *MsgUpdateDaoLocationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgUpdateDaoLocationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgUpdateDaoLocation, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDaoMetadata provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) UpdateDaoMetadata(ctx context.Context, in *MsgUpdateDaoMetadata, opts ...grpc.CallOption) (*MsgUpdateDaoMetadataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDaoMetadata")
	}

	var r0 *MsgUpdateDaoMetadataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateDaoMetadata, ...grpc.CallOption) (*MsgUpdateDaoMetadataResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateDaoMetadata, ...grpc.CallOption) *MsgUpdateDaoMetadataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgUpdateDaoMetadataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgUpdateDaoMetadata, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDaoPinnedRepositories provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) UpdateDaoPinnedRepositories(ctx context.Context, in *MsgUpdateDaoPinnedRepositories, opts ...grpc.CallOption) (*MsgUpdateDaoPinnedRepositoriesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDaoPinnedRepositories")
	}

	var r0 *MsgUpdateDaoPinnedRepositoriesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateDaoPinnedRepositories, ...grpc.CallOption) (*MsgUpdateDaoPinnedRepositoriesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateDaoPinnedRepositories, ...grpc.CallOption) *MsgUpdateDaoPinnedRepositoriesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgUpdateDaoPinnedRepositoriesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgUpdateDaoPinnedRepositories, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDaoRepositoryCollaborator provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) UpdateDaoRepositoryCollaborator(ctx context.Context, in *MsgUpdateDaoRepositoryCollaborator, opts ...grpc.CallOption) (*MsgUpdateDaoRepositoryCollaboratorResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDaoRepositoryCollaborator")
	}

	var r0 *MsgUpdateDaoRepositoryCollaboratorResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateDaoRepositoryCollaborator, ...grpc.CallOption) (*MsgUpdateDaoRepositoryCollaboratorResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateDaoRepositoryCollaborator, ...grpc.CallOption) *MsgUpdateDaoRepositoryCollaboratorResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgUpdateDaoRepositoryCollaboratorResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgUpdateDaoRepositoryCollaborator, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDaoWebsite provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) UpdateDaoWebsite(ctx context.Context, in *MsgUpdateDaoWebsite, opts ...grpc.CallOption) (*MsgUpdateDaoWebsiteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDaoWebsite")
	}

	var r0 *MsgUpdateDaoWebsiteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateDaoWebsite, ...grpc.CallOption) (*MsgUpdateDaoWebsiteResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateDaoWebsite, ...grpc.CallOption) *MsgUpdateDaoWebsiteResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgUpdateDaoWebsiteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgUpdateDaoWebsite, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIssueDescription provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) UpdateIssueDescription(ctx context.Context, in *MsgUpdateIssueDescription, opts ...grpc.CallOption) (*MsgUpdateIssueDescriptionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIssueDescription")
	}

	var r0 *MsgUpdateIssueDescriptionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateIssueDescription, ...grpc.CallOption) (*MsgUpdateIssueDescriptionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateIssueDescription, ...grpc.CallOption) *MsgUpdateIssueDescriptionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgUpdateIssueDescriptionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgUpdateIssueDescription, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIssueTitle provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) UpdateIssueTitle(ctx context.Context, in *MsgUpdateIssueTitle, opts ...grpc.CallOption) (*MsgUpdateIssueTitleResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIssueTitle")
	}

	var r0 *MsgUpdateIssueTitleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateIssueTitle, ...grpc.CallOption) (*MsgUpdateIssueTitleResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateIssueTitle, ...grpc.CallOption) *MsgUpdateIssueTitleResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgUpdateIssueTitleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgUpdateIssueTitle, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateParams provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateParams")
	}

	var r0 *MsgUpdateParamsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateParams, ...grpc.CallOption) (*MsgUpdateParamsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateParams, ...grpc.CallOption) *MsgUpdateParamsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgUpdateParamsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgUpdateParams, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePullRequestDescription provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) UpdatePullRequestDescription(ctx context.Context, in *MsgUpdatePullRequestDescription, opts ...grpc.CallOption) (*MsgUpdatePullRequestDescriptionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePullRequestDescription")
	}

	var r0 *MsgUpdatePullRequestDescriptionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdatePullRequestDescription, ...grpc.CallOption) (*MsgUpdatePullRequestDescriptionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdatePullRequestDescription, ...grpc.CallOption) *MsgUpdatePullRequestDescriptionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgUpdatePullRequestDescriptionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgUpdatePullRequestDescription, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePullRequestTitle provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) UpdatePullRequestTitle(ctx context.Context, in *MsgUpdatePullRequestTitle, opts ...grpc.CallOption) (*MsgUpdatePullRequestTitleResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePullRequestTitle")
	}

	var r0 *MsgUpdatePullRequestTitleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdatePullRequestTitle, ...grpc.CallOption) (*MsgUpdatePullRequestTitleResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdatePullRequestTitle, ...grpc.CallOption) *MsgUpdatePullRequestTitleResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgUpdatePullRequestTitleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgUpdatePullRequestTitle, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRelease provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) UpdateRelease(ctx context.Context, in *MsgUpdateRelease, opts ...grpc.CallOption) (*MsgUpdateReleaseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRelease")
	}

	var r0 *MsgUpdateReleaseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateRelease, ...grpc.CallOption) (*MsgUpdateReleaseResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateRelease, ...grpc.CallOption) *MsgUpdateReleaseResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgUpdateReleaseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgUpdateRelease, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRepositoryBackupRef provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) UpdateRepositoryBackupRef(ctx context.Context, in *MsgUpdateRepositoryBackupRef, opts ...grpc.CallOption) (*MsgUpdateRepositoryBackupRefResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRepositoryBackupRef")
	}

	var r0 *MsgUpdateRepositoryBackupRefResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateRepositoryBackupRef, ...grpc.CallOption) (*MsgUpdateRepositoryBackupRefResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateRepositoryBackupRef, ...grpc.CallOption) *MsgUpdateRepositoryBackupRefResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgUpdateRepositoryBackupRefResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgUpdateRepositoryBackupRef, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRepositoryCollaborator provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) UpdateRepositoryCollaborator(ctx context.Context, in *MsgUpdateRepositoryCollaborator, opts ...grpc.CallOption) (*MsgUpdateRepositoryCollaboratorResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRepositoryCollaborator")
	}

	var r0 *MsgUpdateRepositoryCollaboratorResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateRepositoryCollaborator, ...grpc.CallOption) (*MsgUpdateRepositoryCollaboratorResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateRepositoryCollaborator, ...grpc.CallOption) *MsgUpdateRepositoryCollaboratorResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgUpdateRepositoryCollaboratorResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgUpdateRepositoryCollaborator, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRepositoryDescription provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) UpdateRepositoryDescription(ctx context.Context, in *MsgUpdateRepositoryDescription, opts ...grpc.CallOption) (*MsgUpdateRepositoryDescriptionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRepositoryDescription")
	}

	var r0 *MsgUpdateRepositoryDescriptionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateRepositoryDescription, ...grpc.CallOption) (*MsgUpdateRepositoryDescriptionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateRepositoryDescription, ...grpc.CallOption) *MsgUpdateRepositoryDescriptionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgUpdateRepositoryDescriptionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgUpdateRepositoryDescription, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRepositoryLabel provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) UpdateRepositoryLabel(ctx context.Context, in *MsgUpdateRepositoryLabel, opts ...grpc.CallOption) (*MsgUpdateRepositoryLabelResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRepositoryLabel")
	}

	var r0 *MsgUpdateRepositoryLabelResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateRepositoryLabel, ...grpc.CallOption) (*MsgUpdateRepositoryLabelResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateRepositoryLabel, ...grpc.CallOption) *MsgUpdateRepositoryLabelResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgUpdateRepositoryLabelResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgUpdateRepositoryLabel, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTask provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) UpdateTask(ctx context.Context, in *MsgUpdateTask, opts ...grpc.CallOption) (*MsgUpdateTaskResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 *MsgUpdateTaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateTask, ...grpc.CallOption) (*MsgUpdateTaskResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateTask, ...grpc.CallOption) *MsgUpdateTaskResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgUpdateTaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgUpdateTask, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserAvatar provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) UpdateUserAvatar(ctx context.Context, in *MsgUpdateUserAvatar, opts ...grpc.CallOption) (*MsgUpdateUserAvatarResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserAvatar")
	}

	var r0 *MsgUpdateUserAvatarResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateUserAvatar, ...grpc.CallOption) (*MsgUpdateUserAvatarResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateUserAvatar, ...grpc.CallOption) *MsgUpdateUserAvatarResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgUpdateUserAvatarResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgUpdateUserAvatar, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserBio provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) UpdateUserBio(ctx context.Context, in *MsgUpdateUserBio, opts ...grpc.CallOption) (*MsgUpdateUserBioResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserBio")
	}

	var r0 *MsgUpdateUserBioResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateUserBio, ...grpc.CallOption) (*MsgUpdateUserBioResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateUserBio, ...grpc.CallOption) *MsgUpdateUserBioResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgUpdateUserBioResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgUpdateUserBio, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserName provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) UpdateUserName(ctx context.Context, in *MsgUpdateUserName, opts ...grpc.CallOption) (*MsgUpdateUserNameResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserName")
	}

	var r0 *MsgUpdateUserNameResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateUserName, ...grpc.CallOption) (*MsgUpdateUserNameResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateUserName, ...grpc.CallOption) *MsgUpdateUserNameResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgUpdateUserNameResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgUpdateUserName, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserPinnedRepositories provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) UpdateUserPinnedRepositories(ctx context.Context, in *MsgUpdateUserPinnedRepositories, opts ...grpc.CallOption) (*MsgUpdateUserPinnedRepositoriesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserPinnedRepositories")
	}

	var r0 *MsgUpdateUserPinnedRepositoriesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateUserPinnedRepositories, ...grpc.CallOption) (*MsgUpdateUserPinnedRepositoriesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateUserPinnedRepositories, ...grpc.CallOption) *MsgUpdateUserPinnedRepositoriesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgUpdateUserPinnedRepositoriesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgUpdateUserPinnedRepositories, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserUsername provides a mock function with given fields: ctx, in, opts
func (_m *MockMsgClient) UpdateUserUsername(ctx context.Context, in *MsgUpdateUserUsername, opts ...grpc.CallOption) (*MsgUpdateUserUsernameResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserUsername")
	}

	var r0 *MsgUpdateUserUsernameResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateUserUsername, ...grpc.CallOption) (*MsgUpdateUserUsernameResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MsgUpdateUserUsername, ...grpc.CallOption) *MsgUpdateUserUsernameResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MsgUpdateUserUsernameResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MsgUpdateUserUsername, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockMsgClient creates a new instance of MockMsgClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMsgClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMsgClient {
	mock := &MockMsgClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
