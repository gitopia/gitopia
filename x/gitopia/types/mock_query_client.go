// Code generated by mockery v2.53.4. DO NOT EDIT.

package types

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockQueryClient is an autogenerated mock type for the QueryClient type
type MockQueryClient struct {
	mock.Mock
}

// AnyRepository provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) AnyRepository(ctx context.Context, in *QueryGetAnyRepositoryRequest, opts ...grpc.CallOption) (*QueryGetAnyRepositoryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AnyRepository")
	}

	var r0 *QueryGetAnyRepositoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetAnyRepositoryRequest, ...grpc.CallOption) (*QueryGetAnyRepositoryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetAnyRepositoryRequest, ...grpc.CallOption) *QueryGetAnyRepositoryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryGetAnyRepositoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryGetAnyRepositoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AnyRepositoryAll provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) AnyRepositoryAll(ctx context.Context, in *QueryAllAnyRepositoryRequest, opts ...grpc.CallOption) (*QueryAllAnyRepositoryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AnyRepositoryAll")
	}

	var r0 *QueryAllAnyRepositoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllAnyRepositoryRequest, ...grpc.CallOption) (*QueryAllAnyRepositoryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllAnyRepositoryRequest, ...grpc.CallOption) *QueryAllAnyRepositoryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryAllAnyRepositoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryAllAnyRepositoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Bounty provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) Bounty(ctx context.Context, in *QueryGetBountyRequest, opts ...grpc.CallOption) (*QueryGetBountyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Bounty")
	}

	var r0 *QueryGetBountyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetBountyRequest, ...grpc.CallOption) (*QueryGetBountyResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetBountyRequest, ...grpc.CallOption) *QueryGetBountyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryGetBountyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryGetBountyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BountyAll provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) BountyAll(ctx context.Context, in *QueryAllBountyRequest, opts ...grpc.CallOption) (*QueryAllBountyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BountyAll")
	}

	var r0 *QueryAllBountyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllBountyRequest, ...grpc.CallOption) (*QueryAllBountyResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllBountyRequest, ...grpc.CallOption) *QueryAllBountyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryAllBountyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryAllBountyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BranchAll provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) BranchAll(ctx context.Context, in *QueryAllBranchRequest, opts ...grpc.CallOption) (*QueryAllBranchResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BranchAll")
	}

	var r0 *QueryAllBranchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllBranchRequest, ...grpc.CallOption) (*QueryAllBranchResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllBranchRequest, ...grpc.CallOption) *QueryAllBranchResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryAllBranchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryAllBranchRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckGitServerAuthorization provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) CheckGitServerAuthorization(ctx context.Context, in *QueryCheckGitServerAuthorizationRequest, opts ...grpc.CallOption) (*QueryCheckGitServerAuthorizationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CheckGitServerAuthorization")
	}

	var r0 *QueryCheckGitServerAuthorizationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryCheckGitServerAuthorizationRequest, ...grpc.CallOption) (*QueryCheckGitServerAuthorizationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryCheckGitServerAuthorizationRequest, ...grpc.CallOption) *QueryCheckGitServerAuthorizationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryCheckGitServerAuthorizationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryCheckGitServerAuthorizationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckStorageProviderAuthorization provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) CheckStorageProviderAuthorization(ctx context.Context, in *QueryCheckStorageProviderAuthorizationRequest, opts ...grpc.CallOption) (*QueryCheckStorageProviderAuthorizationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CheckStorageProviderAuthorization")
	}

	var r0 *QueryCheckStorageProviderAuthorizationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryCheckStorageProviderAuthorizationRequest, ...grpc.CallOption) (*QueryCheckStorageProviderAuthorizationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryCheckStorageProviderAuthorizationRequest, ...grpc.CallOption) *QueryCheckStorageProviderAuthorizationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryCheckStorageProviderAuthorizationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryCheckStorageProviderAuthorizationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentAll provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) CommentAll(ctx context.Context, in *QueryAllCommentRequest, opts ...grpc.CallOption) (*QueryAllCommentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CommentAll")
	}

	var r0 *QueryAllCommentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllCommentRequest, ...grpc.CallOption) (*QueryAllCommentResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllCommentRequest, ...grpc.CallOption) *QueryAllCommentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryAllCommentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryAllCommentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Dao provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) Dao(ctx context.Context, in *QueryGetDaoRequest, opts ...grpc.CallOption) (*QueryGetDaoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Dao")
	}

	var r0 *QueryGetDaoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetDaoRequest, ...grpc.CallOption) (*QueryGetDaoResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetDaoRequest, ...grpc.CallOption) *QueryGetDaoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryGetDaoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryGetDaoRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DaoAll provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) DaoAll(ctx context.Context, in *QueryAllDaoRequest, opts ...grpc.CallOption) (*QueryAllDaoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DaoAll")
	}

	var r0 *QueryAllDaoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllDaoRequest, ...grpc.CallOption) (*QueryAllDaoResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllDaoRequest, ...grpc.CallOption) *QueryAllDaoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryAllDaoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryAllDaoRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DaoMemberAll provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) DaoMemberAll(ctx context.Context, in *QueryAllDaoMemberRequest, opts ...grpc.CallOption) (*QueryAllDaoMemberResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DaoMemberAll")
	}

	var r0 *QueryAllDaoMemberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllDaoMemberRequest, ...grpc.CallOption) (*QueryAllDaoMemberResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllDaoMemberRequest, ...grpc.CallOption) *QueryAllDaoMemberResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryAllDaoMemberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryAllDaoMemberRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ForkAll provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) ForkAll(ctx context.Context, in *QueryGetAllForkRequest, opts ...grpc.CallOption) (*QueryGetAllForkResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ForkAll")
	}

	var r0 *QueryGetAllForkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetAllForkRequest, ...grpc.CallOption) (*QueryGetAllForkResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetAllForkRequest, ...grpc.CallOption) *QueryGetAllForkResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryGetAllForkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryGetAllForkRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IssueAll provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) IssueAll(ctx context.Context, in *QueryAllIssueRequest, opts ...grpc.CallOption) (*QueryAllIssueResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IssueAll")
	}

	var r0 *QueryAllIssueResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllIssueRequest, ...grpc.CallOption) (*QueryAllIssueResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllIssueRequest, ...grpc.CallOption) *QueryAllIssueResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryAllIssueResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryAllIssueRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IssueComment provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) IssueComment(ctx context.Context, in *QueryGetIssueCommentRequest, opts ...grpc.CallOption) (*QueryGetIssueCommentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IssueComment")
	}

	var r0 *QueryGetIssueCommentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetIssueCommentRequest, ...grpc.CallOption) (*QueryGetIssueCommentResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetIssueCommentRequest, ...grpc.CallOption) *QueryGetIssueCommentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryGetIssueCommentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryGetIssueCommentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IssueCommentAll provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) IssueCommentAll(ctx context.Context, in *QueryAllIssueCommentRequest, opts ...grpc.CallOption) (*QueryAllIssueCommentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IssueCommentAll")
	}

	var r0 *QueryAllIssueCommentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllIssueCommentRequest, ...grpc.CallOption) (*QueryAllIssueCommentResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllIssueCommentRequest, ...grpc.CallOption) *QueryAllIssueCommentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryAllIssueCommentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryAllIssueCommentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Params provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Params")
	}

	var r0 *QueryParamsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryParamsRequest, ...grpc.CallOption) (*QueryParamsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryParamsRequest, ...grpc.CallOption) *QueryParamsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryParamsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryParamsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PullRequestAll provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) PullRequestAll(ctx context.Context, in *QueryAllPullRequestRequest, opts ...grpc.CallOption) (*QueryAllPullRequestResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PullRequestAll")
	}

	var r0 *QueryAllPullRequestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllPullRequestRequest, ...grpc.CallOption) (*QueryAllPullRequestResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllPullRequestRequest, ...grpc.CallOption) *QueryAllPullRequestResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryAllPullRequestResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryAllPullRequestRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PullRequestComment provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) PullRequestComment(ctx context.Context, in *QueryGetPullRequestCommentRequest, opts ...grpc.CallOption) (*QueryGetPullRequestCommentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PullRequestComment")
	}

	var r0 *QueryGetPullRequestCommentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetPullRequestCommentRequest, ...grpc.CallOption) (*QueryGetPullRequestCommentResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetPullRequestCommentRequest, ...grpc.CallOption) *QueryGetPullRequestCommentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryGetPullRequestCommentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryGetPullRequestCommentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PullRequestCommentAll provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) PullRequestCommentAll(ctx context.Context, in *QueryAllPullRequestCommentRequest, opts ...grpc.CallOption) (*QueryAllPullRequestCommentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PullRequestCommentAll")
	}

	var r0 *QueryAllPullRequestCommentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllPullRequestCommentRequest, ...grpc.CallOption) (*QueryAllPullRequestCommentResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllPullRequestCommentRequest, ...grpc.CallOption) *QueryAllPullRequestCommentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryAllPullRequestCommentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryAllPullRequestCommentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PullRequestMergePermission provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) PullRequestMergePermission(ctx context.Context, in *QueryGetPullRequestMergePermissionRequest, opts ...grpc.CallOption) (*QueryGetPullRequestMergePermissionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PullRequestMergePermission")
	}

	var r0 *QueryGetPullRequestMergePermissionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetPullRequestMergePermissionRequest, ...grpc.CallOption) (*QueryGetPullRequestMergePermissionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetPullRequestMergePermissionRequest, ...grpc.CallOption) *QueryGetPullRequestMergePermissionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryGetPullRequestMergePermissionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryGetPullRequestMergePermissionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Release provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) Release(ctx context.Context, in *QueryGetReleaseRequest, opts ...grpc.CallOption) (*QueryGetReleaseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Release")
	}

	var r0 *QueryGetReleaseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetReleaseRequest, ...grpc.CallOption) (*QueryGetReleaseResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetReleaseRequest, ...grpc.CallOption) *QueryGetReleaseResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryGetReleaseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryGetReleaseRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseAll provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) ReleaseAll(ctx context.Context, in *QueryAllReleaseRequest, opts ...grpc.CallOption) (*QueryAllReleaseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseAll")
	}

	var r0 *QueryAllReleaseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllReleaseRequest, ...grpc.CallOption) (*QueryAllReleaseResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllReleaseRequest, ...grpc.CallOption) *QueryAllReleaseResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryAllReleaseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryAllReleaseRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) Repository(ctx context.Context, in *QueryGetRepositoryRequest, opts ...grpc.CallOption) (*QueryGetRepositoryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Repository")
	}

	var r0 *QueryGetRepositoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetRepositoryRequest, ...grpc.CallOption) (*QueryGetRepositoryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetRepositoryRequest, ...grpc.CallOption) *QueryGetRepositoryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryGetRepositoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryGetRepositoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryAll provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) RepositoryAll(ctx context.Context, in *QueryAllRepositoryRequest, opts ...grpc.CallOption) (*QueryAllRepositoryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RepositoryAll")
	}

	var r0 *QueryAllRepositoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllRepositoryRequest, ...grpc.CallOption) (*QueryAllRepositoryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllRepositoryRequest, ...grpc.CallOption) *QueryAllRepositoryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryAllRepositoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryAllRepositoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryBranch provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) RepositoryBranch(ctx context.Context, in *QueryGetRepositoryBranchRequest, opts ...grpc.CallOption) (*QueryGetRepositoryBranchResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RepositoryBranch")
	}

	var r0 *QueryGetRepositoryBranchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetRepositoryBranchRequest, ...grpc.CallOption) (*QueryGetRepositoryBranchResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetRepositoryBranchRequest, ...grpc.CallOption) *QueryGetRepositoryBranchResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryGetRepositoryBranchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryGetRepositoryBranchRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryBranchAll provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) RepositoryBranchAll(ctx context.Context, in *QueryAllRepositoryBranchRequest, opts ...grpc.CallOption) (*QueryAllRepositoryBranchResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RepositoryBranchAll")
	}

	var r0 *QueryAllRepositoryBranchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllRepositoryBranchRequest, ...grpc.CallOption) (*QueryAllRepositoryBranchResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllRepositoryBranchRequest, ...grpc.CallOption) *QueryAllRepositoryBranchResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryAllRepositoryBranchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryAllRepositoryBranchRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryBranchSha provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) RepositoryBranchSha(ctx context.Context, in *QueryGetRepositoryBranchShaRequest, opts ...grpc.CallOption) (*QueryGetRepositoryBranchShaResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RepositoryBranchSha")
	}

	var r0 *QueryGetRepositoryBranchShaResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetRepositoryBranchShaRequest, ...grpc.CallOption) (*QueryGetRepositoryBranchShaResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetRepositoryBranchShaRequest, ...grpc.CallOption) *QueryGetRepositoryBranchShaResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryGetRepositoryBranchShaResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryGetRepositoryBranchShaRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryIssue provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) RepositoryIssue(ctx context.Context, in *QueryGetRepositoryIssueRequest, opts ...grpc.CallOption) (*QueryGetRepositoryIssueResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RepositoryIssue")
	}

	var r0 *QueryGetRepositoryIssueResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetRepositoryIssueRequest, ...grpc.CallOption) (*QueryGetRepositoryIssueResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetRepositoryIssueRequest, ...grpc.CallOption) *QueryGetRepositoryIssueResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryGetRepositoryIssueResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryGetRepositoryIssueRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryIssueAll provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) RepositoryIssueAll(ctx context.Context, in *QueryAllRepositoryIssueRequest, opts ...grpc.CallOption) (*QueryAllRepositoryIssueResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RepositoryIssueAll")
	}

	var r0 *QueryAllRepositoryIssueResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllRepositoryIssueRequest, ...grpc.CallOption) (*QueryAllRepositoryIssueResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllRepositoryIssueRequest, ...grpc.CallOption) *QueryAllRepositoryIssueResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryAllRepositoryIssueResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryAllRepositoryIssueRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryPullRequest provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) RepositoryPullRequest(ctx context.Context, in *QueryGetRepositoryPullRequestRequest, opts ...grpc.CallOption) (*QueryGetRepositoryPullRequestResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RepositoryPullRequest")
	}

	var r0 *QueryGetRepositoryPullRequestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetRepositoryPullRequestRequest, ...grpc.CallOption) (*QueryGetRepositoryPullRequestResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetRepositoryPullRequestRequest, ...grpc.CallOption) *QueryGetRepositoryPullRequestResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryGetRepositoryPullRequestResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryGetRepositoryPullRequestRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryPullRequestAll provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) RepositoryPullRequestAll(ctx context.Context, in *QueryAllRepositoryPullRequestRequest, opts ...grpc.CallOption) (*QueryAllRepositoryPullRequestResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RepositoryPullRequestAll")
	}

	var r0 *QueryAllRepositoryPullRequestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllRepositoryPullRequestRequest, ...grpc.CallOption) (*QueryAllRepositoryPullRequestResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllRepositoryPullRequestRequest, ...grpc.CallOption) *QueryAllRepositoryPullRequestResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryAllRepositoryPullRequestResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryAllRepositoryPullRequestRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryRelease provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) RepositoryRelease(ctx context.Context, in *QueryGetRepositoryReleaseRequest, opts ...grpc.CallOption) (*QueryGetRepositoryReleaseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RepositoryRelease")
	}

	var r0 *QueryGetRepositoryReleaseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetRepositoryReleaseRequest, ...grpc.CallOption) (*QueryGetRepositoryReleaseResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetRepositoryReleaseRequest, ...grpc.CallOption) *QueryGetRepositoryReleaseResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryGetRepositoryReleaseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryGetRepositoryReleaseRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryReleaseAll provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) RepositoryReleaseAll(ctx context.Context, in *QueryAllRepositoryReleaseRequest, opts ...grpc.CallOption) (*QueryAllRepositoryReleaseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RepositoryReleaseAll")
	}

	var r0 *QueryAllRepositoryReleaseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllRepositoryReleaseRequest, ...grpc.CallOption) (*QueryAllRepositoryReleaseResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllRepositoryReleaseRequest, ...grpc.CallOption) *QueryAllRepositoryReleaseResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryAllRepositoryReleaseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryAllRepositoryReleaseRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryReleaseLatest provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) RepositoryReleaseLatest(ctx context.Context, in *QueryGetLatestRepositoryReleaseRequest, opts ...grpc.CallOption) (*QueryGetLatestRepositoryReleaseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RepositoryReleaseLatest")
	}

	var r0 *QueryGetLatestRepositoryReleaseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetLatestRepositoryReleaseRequest, ...grpc.CallOption) (*QueryGetLatestRepositoryReleaseResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetLatestRepositoryReleaseRequest, ...grpc.CallOption) *QueryGetLatestRepositoryReleaseResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryGetLatestRepositoryReleaseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryGetLatestRepositoryReleaseRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryTag provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) RepositoryTag(ctx context.Context, in *QueryGetRepositoryTagRequest, opts ...grpc.CallOption) (*QueryGetRepositoryTagResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RepositoryTag")
	}

	var r0 *QueryGetRepositoryTagResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetRepositoryTagRequest, ...grpc.CallOption) (*QueryGetRepositoryTagResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetRepositoryTagRequest, ...grpc.CallOption) *QueryGetRepositoryTagResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryGetRepositoryTagResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryGetRepositoryTagRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryTagAll provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) RepositoryTagAll(ctx context.Context, in *QueryAllRepositoryTagRequest, opts ...grpc.CallOption) (*QueryAllRepositoryTagResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RepositoryTagAll")
	}

	var r0 *QueryAllRepositoryTagResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllRepositoryTagRequest, ...grpc.CallOption) (*QueryAllRepositoryTagResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllRepositoryTagRequest, ...grpc.CallOption) *QueryAllRepositoryTagResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryAllRepositoryTagResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryAllRepositoryTagRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryTagSha provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) RepositoryTagSha(ctx context.Context, in *QueryGetRepositoryTagShaRequest, opts ...grpc.CallOption) (*QueryGetRepositoryTagShaResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RepositoryTagSha")
	}

	var r0 *QueryGetRepositoryTagShaResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetRepositoryTagShaRequest, ...grpc.CallOption) (*QueryGetRepositoryTagShaResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetRepositoryTagShaRequest, ...grpc.CallOption) *QueryGetRepositoryTagShaResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryGetRepositoryTagShaResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryGetRepositoryTagShaRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagAll provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) TagAll(ctx context.Context, in *QueryAllTagRequest, opts ...grpc.CallOption) (*QueryAllTagResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagAll")
	}

	var r0 *QueryAllTagResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllTagRequest, ...grpc.CallOption) (*QueryAllTagResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllTagRequest, ...grpc.CallOption) *QueryAllTagResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryAllTagResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryAllTagRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Task provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) Task(ctx context.Context, in *QueryGetTaskRequest, opts ...grpc.CallOption) (*QueryGetTaskResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Task")
	}

	var r0 *QueryGetTaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetTaskRequest, ...grpc.CallOption) (*QueryGetTaskResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetTaskRequest, ...grpc.CallOption) *QueryGetTaskResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryGetTaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryGetTaskRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskAll provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) TaskAll(ctx context.Context, in *QueryAllTaskRequest, opts ...grpc.CallOption) (*QueryAllTaskResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TaskAll")
	}

	var r0 *QueryAllTaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllTaskRequest, ...grpc.CallOption) (*QueryAllTaskResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllTaskRequest, ...grpc.CallOption) *QueryAllTaskResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryAllTaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryAllTaskRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) User(ctx context.Context, in *QueryGetUserRequest, opts ...grpc.CallOption) (*QueryGetUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for User")
	}

	var r0 *QueryGetUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetUserRequest, ...grpc.CallOption) (*QueryGetUserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetUserRequest, ...grpc.CallOption) *QueryGetUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryGetUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryGetUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserAll provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) UserAll(ctx context.Context, in *QueryAllUserRequest, opts ...grpc.CallOption) (*QueryAllUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UserAll")
	}

	var r0 *QueryAllUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllUserRequest, ...grpc.CallOption) (*QueryAllUserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllUserRequest, ...grpc.CallOption) *QueryAllUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryAllUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryAllUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserDaoAll provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) UserDaoAll(ctx context.Context, in *QueryAllUserDaoRequest, opts ...grpc.CallOption) (*QueryAllUserDaoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UserDaoAll")
	}

	var r0 *QueryAllUserDaoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllUserDaoRequest, ...grpc.CallOption) (*QueryAllUserDaoResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllUserDaoRequest, ...grpc.CallOption) *QueryAllUserDaoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryAllUserDaoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryAllUserDaoRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserQuota provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) UserQuota(ctx context.Context, in *QueryUserQuotaRequest, opts ...grpc.CallOption) (*QueryUserQuotaResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UserQuota")
	}

	var r0 *QueryUserQuotaResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryUserQuotaRequest, ...grpc.CallOption) (*QueryUserQuotaResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryUserQuotaRequest, ...grpc.CallOption) *QueryUserQuotaResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryUserQuotaResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryUserQuotaRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VestedAmount provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) VestedAmount(ctx context.Context, in *QueryVestedAmountRequest, opts ...grpc.CallOption) (*QueryVestedAmountResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for VestedAmount")
	}

	var r0 *QueryVestedAmountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryVestedAmountRequest, ...grpc.CallOption) (*QueryVestedAmountResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryVestedAmountRequest, ...grpc.CallOption) *QueryVestedAmountResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryVestedAmountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryVestedAmountRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Whois provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) Whois(ctx context.Context, in *QueryGetWhoisRequest, opts ...grpc.CallOption) (*QueryGetWhoisResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Whois")
	}

	var r0 *QueryGetWhoisResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetWhoisRequest, ...grpc.CallOption) (*QueryGetWhoisResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryGetWhoisRequest, ...grpc.CallOption) *QueryGetWhoisResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryGetWhoisResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryGetWhoisRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WhoisAll provides a mock function with given fields: ctx, in, opts
func (_m *MockQueryClient) WhoisAll(ctx context.Context, in *QueryAllWhoisRequest, opts ...grpc.CallOption) (*QueryAllWhoisResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WhoisAll")
	}

	var r0 *QueryAllWhoisResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllWhoisRequest, ...grpc.CallOption) (*QueryAllWhoisResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *QueryAllWhoisRequest, ...grpc.CallOption) *QueryAllWhoisResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*QueryAllWhoisResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *QueryAllWhoisRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockQueryClient creates a new instance of MockQueryClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueryClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueryClient {
	mock := &MockQueryClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
