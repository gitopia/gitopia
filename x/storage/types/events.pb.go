// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitopia/gitopia/storage/events.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventProviderRegistered is emitted when a provider is registered
type EventProviderRegistered struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PeerId  string `protobuf:"bytes,2,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (m *EventProviderRegistered) Reset()         { *m = EventProviderRegistered{} }
func (m *EventProviderRegistered) String() string { return proto.CompactTextString(m) }
func (*EventProviderRegistered) ProtoMessage()    {}
func (*EventProviderRegistered) Descriptor() ([]byte, []int) {
	return fileDescriptor_57683d92f491f563, []int{0}
}
func (m *EventProviderRegistered) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventProviderRegistered) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventProviderRegistered.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventProviderRegistered) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventProviderRegistered.Merge(m, src)
}
func (m *EventProviderRegistered) XXX_Size() int {
	return m.Size()
}
func (m *EventProviderRegistered) XXX_DiscardUnknown() {
	xxx_messageInfo_EventProviderRegistered.DiscardUnknown(m)
}

var xxx_messageInfo_EventProviderRegistered proto.InternalMessageInfo

func (m *EventProviderRegistered) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventProviderRegistered) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

// EventProviderStatusUpdated is emitted when provider status is updated
type EventProviderStatusUpdated struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Online  bool   `protobuf:"varint,2,opt,name=online,proto3" json:"online,omitempty"`
}

func (m *EventProviderStatusUpdated) Reset()         { *m = EventProviderStatusUpdated{} }
func (m *EventProviderStatusUpdated) String() string { return proto.CompactTextString(m) }
func (*EventProviderStatusUpdated) ProtoMessage()    {}
func (*EventProviderStatusUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_57683d92f491f563, []int{1}
}
func (m *EventProviderStatusUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventProviderStatusUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventProviderStatusUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventProviderStatusUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventProviderStatusUpdated.Merge(m, src)
}
func (m *EventProviderStatusUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventProviderStatusUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventProviderStatusUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventProviderStatusUpdated proto.InternalMessageInfo

func (m *EventProviderStatusUpdated) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventProviderStatusUpdated) GetOnline() bool {
	if m != nil {
		return m.Online
	}
	return false
}

// EventPackfileUpdated is emitted when a packfile is updated
type EventPackfileUpdated struct {
	RepositoryId uint64 `protobuf:"varint,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	NewCid       string `protobuf:"bytes,2,opt,name=new_cid,json=newCid,proto3" json:"new_cid,omitempty"`
	OldCid       string `protobuf:"bytes,3,opt,name=old_cid,json=oldCid,proto3" json:"old_cid,omitempty"`
	NewName      string `protobuf:"bytes,4,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
	OldName      string `protobuf:"bytes,5,opt,name=old_name,json=oldName,proto3" json:"old_name,omitempty"`
}

func (m *EventPackfileUpdated) Reset()         { *m = EventPackfileUpdated{} }
func (m *EventPackfileUpdated) String() string { return proto.CompactTextString(m) }
func (*EventPackfileUpdated) ProtoMessage()    {}
func (*EventPackfileUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_57683d92f491f563, []int{2}
}
func (m *EventPackfileUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPackfileUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPackfileUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPackfileUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPackfileUpdated.Merge(m, src)
}
func (m *EventPackfileUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventPackfileUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPackfileUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventPackfileUpdated proto.InternalMessageInfo

func (m *EventPackfileUpdated) GetRepositoryId() uint64 {
	if m != nil {
		return m.RepositoryId
	}
	return 0
}

func (m *EventPackfileUpdated) GetNewCid() string {
	if m != nil {
		return m.NewCid
	}
	return ""
}

func (m *EventPackfileUpdated) GetOldCid() string {
	if m != nil {
		return m.OldCid
	}
	return ""
}

func (m *EventPackfileUpdated) GetNewName() string {
	if m != nil {
		return m.NewName
	}
	return ""
}

func (m *EventPackfileUpdated) GetOldName() string {
	if m != nil {
		return m.OldName
	}
	return ""
}

// EventPackfileDeleted is emitted when a packfile is deleted
type EventPackfileDeleted struct {
	RepositoryId uint64 `protobuf:"varint,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Cid          string `protobuf:"bytes,3,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (m *EventPackfileDeleted) Reset()         { *m = EventPackfileDeleted{} }
func (m *EventPackfileDeleted) String() string { return proto.CompactTextString(m) }
func (*EventPackfileDeleted) ProtoMessage()    {}
func (*EventPackfileDeleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_57683d92f491f563, []int{3}
}
func (m *EventPackfileDeleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPackfileDeleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPackfileDeleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPackfileDeleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPackfileDeleted.Merge(m, src)
}
func (m *EventPackfileDeleted) XXX_Size() int {
	return m.Size()
}
func (m *EventPackfileDeleted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPackfileDeleted.DiscardUnknown(m)
}

var xxx_messageInfo_EventPackfileDeleted proto.InternalMessageInfo

func (m *EventPackfileDeleted) GetRepositoryId() uint64 {
	if m != nil {
		return m.RepositoryId
	}
	return 0
}

func (m *EventPackfileDeleted) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventPackfileDeleted) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

// EventReleaseAssetUpdated is emitted when a release asset is updated
type EventReleaseAssetUpdated struct {
	RepositoryId uint64 `protobuf:"varint,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Tag          string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Name         string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	NewCid       string `protobuf:"bytes,4,opt,name=new_cid,json=newCid,proto3" json:"new_cid,omitempty"`
	OldCid       string `protobuf:"bytes,5,opt,name=old_cid,json=oldCid,proto3" json:"old_cid,omitempty"`
	NewSha256    string `protobuf:"bytes,6,opt,name=new_sha256,json=newSha256,proto3" json:"new_sha256,omitempty"`
	OldSha256    string `protobuf:"bytes,7,opt,name=old_sha256,json=oldSha256,proto3" json:"old_sha256,omitempty"`
}

func (m *EventReleaseAssetUpdated) Reset()         { *m = EventReleaseAssetUpdated{} }
func (m *EventReleaseAssetUpdated) String() string { return proto.CompactTextString(m) }
func (*EventReleaseAssetUpdated) ProtoMessage()    {}
func (*EventReleaseAssetUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_57683d92f491f563, []int{4}
}
func (m *EventReleaseAssetUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventReleaseAssetUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventReleaseAssetUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventReleaseAssetUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventReleaseAssetUpdated.Merge(m, src)
}
func (m *EventReleaseAssetUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventReleaseAssetUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventReleaseAssetUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventReleaseAssetUpdated proto.InternalMessageInfo

func (m *EventReleaseAssetUpdated) GetRepositoryId() uint64 {
	if m != nil {
		return m.RepositoryId
	}
	return 0
}

func (m *EventReleaseAssetUpdated) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *EventReleaseAssetUpdated) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventReleaseAssetUpdated) GetNewCid() string {
	if m != nil {
		return m.NewCid
	}
	return ""
}

func (m *EventReleaseAssetUpdated) GetOldCid() string {
	if m != nil {
		return m.OldCid
	}
	return ""
}

func (m *EventReleaseAssetUpdated) GetNewSha256() string {
	if m != nil {
		return m.NewSha256
	}
	return ""
}

func (m *EventReleaseAssetUpdated) GetOldSha256() string {
	if m != nil {
		return m.OldSha256
	}
	return ""
}

// EventReleaseAssetDeleted is emitted when a release asset is deleted
type EventReleaseAssetDeleted struct {
	RepositoryId uint64 `protobuf:"varint,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Tag          string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Name         string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Cid          string `protobuf:"bytes,4,opt,name=cid,proto3" json:"cid,omitempty"`
	Sha256       string `protobuf:"bytes,5,opt,name=sha256,proto3" json:"sha256,omitempty"`
}

func (m *EventReleaseAssetDeleted) Reset()         { *m = EventReleaseAssetDeleted{} }
func (m *EventReleaseAssetDeleted) String() string { return proto.CompactTextString(m) }
func (*EventReleaseAssetDeleted) ProtoMessage()    {}
func (*EventReleaseAssetDeleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_57683d92f491f563, []int{5}
}
func (m *EventReleaseAssetDeleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventReleaseAssetDeleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventReleaseAssetDeleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventReleaseAssetDeleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventReleaseAssetDeleted.Merge(m, src)
}
func (m *EventReleaseAssetDeleted) XXX_Size() int {
	return m.Size()
}
func (m *EventReleaseAssetDeleted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventReleaseAssetDeleted.DiscardUnknown(m)
}

var xxx_messageInfo_EventReleaseAssetDeleted proto.InternalMessageInfo

func (m *EventReleaseAssetDeleted) GetRepositoryId() uint64 {
	if m != nil {
		return m.RepositoryId
	}
	return 0
}

func (m *EventReleaseAssetDeleted) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *EventReleaseAssetDeleted) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventReleaseAssetDeleted) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *EventReleaseAssetDeleted) GetSha256() string {
	if m != nil {
		return m.Sha256
	}
	return ""
}

// EventChallengeCreated is emitted when a new challenge is created
type EventChallengeCreated struct {
	ChallengeId uint64 `protobuf:"varint,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	Provider    string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (m *EventChallengeCreated) Reset()         { *m = EventChallengeCreated{} }
func (m *EventChallengeCreated) String() string { return proto.CompactTextString(m) }
func (*EventChallengeCreated) ProtoMessage()    {}
func (*EventChallengeCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_57683d92f491f563, []int{6}
}
func (m *EventChallengeCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventChallengeCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventChallengeCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventChallengeCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventChallengeCreated.Merge(m, src)
}
func (m *EventChallengeCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventChallengeCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventChallengeCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventChallengeCreated proto.InternalMessageInfo

func (m *EventChallengeCreated) GetChallengeId() uint64 {
	if m != nil {
		return m.ChallengeId
	}
	return 0
}

func (m *EventChallengeCreated) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

// EventChallengeCompleted is emitted when a challenge is completed
type EventChallengeCompleted struct {
	ChallengeId uint64 `protobuf:"varint,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	Provider    string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	Success     bool   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *EventChallengeCompleted) Reset()         { *m = EventChallengeCompleted{} }
func (m *EventChallengeCompleted) String() string { return proto.CompactTextString(m) }
func (*EventChallengeCompleted) ProtoMessage()    {}
func (*EventChallengeCompleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_57683d92f491f563, []int{7}
}
func (m *EventChallengeCompleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventChallengeCompleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventChallengeCompleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventChallengeCompleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventChallengeCompleted.Merge(m, src)
}
func (m *EventChallengeCompleted) XXX_Size() int {
	return m.Size()
}
func (m *EventChallengeCompleted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventChallengeCompleted.DiscardUnknown(m)
}

var xxx_messageInfo_EventChallengeCompleted proto.InternalMessageInfo

func (m *EventChallengeCompleted) GetChallengeId() uint64 {
	if m != nil {
		return m.ChallengeId
	}
	return 0
}

func (m *EventChallengeCompleted) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *EventChallengeCompleted) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// EventProviderUnregistered is emitted when a provider initiates unregistration
type EventProviderUnregistered struct {
	Address               string    `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	UnstakeCompletionTime time.Time `protobuf:"bytes,2,opt,name=unstake_completion_time,json=unstakeCompletionTime,proto3,stdtime" json:"unstake_completion_time"`
}

func (m *EventProviderUnregistered) Reset()         { *m = EventProviderUnregistered{} }
func (m *EventProviderUnregistered) String() string { return proto.CompactTextString(m) }
func (*EventProviderUnregistered) ProtoMessage()    {}
func (*EventProviderUnregistered) Descriptor() ([]byte, []int) {
	return fileDescriptor_57683d92f491f563, []int{8}
}
func (m *EventProviderUnregistered) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventProviderUnregistered) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventProviderUnregistered.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventProviderUnregistered) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventProviderUnregistered.Merge(m, src)
}
func (m *EventProviderUnregistered) XXX_Size() int {
	return m.Size()
}
func (m *EventProviderUnregistered) XXX_DiscardUnknown() {
	xxx_messageInfo_EventProviderUnregistered.DiscardUnknown(m)
}

var xxx_messageInfo_EventProviderUnregistered proto.InternalMessageInfo

func (m *EventProviderUnregistered) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventProviderUnregistered) GetUnstakeCompletionTime() time.Time {
	if m != nil {
		return m.UnstakeCompletionTime
	}
	return time.Time{}
}

// EventProviderUnstakeCompleted is emitted when a provider's unstaking is completed
type EventProviderUnstakeCompleted struct {
	Address string     `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Amount  types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *EventProviderUnstakeCompleted) Reset()         { *m = EventProviderUnstakeCompleted{} }
func (m *EventProviderUnstakeCompleted) String() string { return proto.CompactTextString(m) }
func (*EventProviderUnstakeCompleted) ProtoMessage()    {}
func (*EventProviderUnstakeCompleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_57683d92f491f563, []int{9}
}
func (m *EventProviderUnstakeCompleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventProviderUnstakeCompleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventProviderUnstakeCompleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventProviderUnstakeCompleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventProviderUnstakeCompleted.Merge(m, src)
}
func (m *EventProviderUnstakeCompleted) XXX_Size() int {
	return m.Size()
}
func (m *EventProviderUnstakeCompleted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventProviderUnstakeCompleted.DiscardUnknown(m)
}

var xxx_messageInfo_EventProviderUnstakeCompleted proto.InternalMessageInfo

func (m *EventProviderUnstakeCompleted) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventProviderUnstakeCompleted) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

// EventMergePullRequest is emitted when a pull request is merged
type EventMergePullRequest struct {
	Creator         string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PullRequestId   uint64 `protobuf:"varint,2,opt,name=pull_request_id,json=pullRequestId,proto3" json:"pull_request_id,omitempty"`
	PullRequestIid  uint64 `protobuf:"varint,3,opt,name=pull_request_iid,json=pullRequestIid,proto3" json:"pull_request_iid,omitempty"`
	State           string `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	MergeCommitSha  string `protobuf:"bytes,5,opt,name=merge_commit_sha,json=mergeCommitSha,proto3" json:"merge_commit_sha,omitempty"`
	TaskId          uint64 `protobuf:"varint,6,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskState       string `protobuf:"bytes,7,opt,name=task_state,json=taskState,proto3" json:"task_state,omitempty"`
	RepoName        string `protobuf:"bytes,8,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	RepoId          uint64 `protobuf:"varint,9,opt,name=repo_id,json=repoId,proto3" json:"repo_id,omitempty"`
	RepoOwnerId     string `protobuf:"bytes,10,opt,name=repo_owner_id,json=repoOwnerId,proto3" json:"repo_owner_id,omitempty"`
	RepoOwnerType   string `protobuf:"bytes,11,opt,name=repo_owner_type,json=repoOwnerType,proto3" json:"repo_owner_type,omitempty"`
	PullRequestHead string `protobuf:"bytes,14,opt,name=pull_request_head,json=pullRequestHead,proto3" json:"pull_request_head,omitempty"`
	RepoBranch      string `protobuf:"bytes,15,opt,name=repo_branch,json=repoBranch,proto3" json:"repo_branch,omitempty"`
	MergedBy        string `protobuf:"bytes,16,opt,name=merged_by,json=mergedBy,proto3" json:"merged_by,omitempty"`
	UpdatedAt       int64  `protobuf:"varint,17,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	MergedAt        int64  `protobuf:"varint,18,opt,name=merged_at,json=mergedAt,proto3" json:"merged_at,omitempty"`
}

func (m *EventMergePullRequest) Reset()         { *m = EventMergePullRequest{} }
func (m *EventMergePullRequest) String() string { return proto.CompactTextString(m) }
func (*EventMergePullRequest) ProtoMessage()    {}
func (*EventMergePullRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57683d92f491f563, []int{10}
}
func (m *EventMergePullRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMergePullRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMergePullRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMergePullRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMergePullRequest.Merge(m, src)
}
func (m *EventMergePullRequest) XXX_Size() int {
	return m.Size()
}
func (m *EventMergePullRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMergePullRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventMergePullRequest proto.InternalMessageInfo

func (m *EventMergePullRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *EventMergePullRequest) GetPullRequestId() uint64 {
	if m != nil {
		return m.PullRequestId
	}
	return 0
}

func (m *EventMergePullRequest) GetPullRequestIid() uint64 {
	if m != nil {
		return m.PullRequestIid
	}
	return 0
}

func (m *EventMergePullRequest) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *EventMergePullRequest) GetMergeCommitSha() string {
	if m != nil {
		return m.MergeCommitSha
	}
	return ""
}

func (m *EventMergePullRequest) GetTaskId() uint64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *EventMergePullRequest) GetTaskState() string {
	if m != nil {
		return m.TaskState
	}
	return ""
}

func (m *EventMergePullRequest) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *EventMergePullRequest) GetRepoId() uint64 {
	if m != nil {
		return m.RepoId
	}
	return 0
}

func (m *EventMergePullRequest) GetRepoOwnerId() string {
	if m != nil {
		return m.RepoOwnerId
	}
	return ""
}

func (m *EventMergePullRequest) GetRepoOwnerType() string {
	if m != nil {
		return m.RepoOwnerType
	}
	return ""
}

func (m *EventMergePullRequest) GetPullRequestHead() string {
	if m != nil {
		return m.PullRequestHead
	}
	return ""
}

func (m *EventMergePullRequest) GetRepoBranch() string {
	if m != nil {
		return m.RepoBranch
	}
	return ""
}

func (m *EventMergePullRequest) GetMergedBy() string {
	if m != nil {
		return m.MergedBy
	}
	return ""
}

func (m *EventMergePullRequest) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *EventMergePullRequest) GetMergedAt() int64 {
	if m != nil {
		return m.MergedAt
	}
	return 0
}

// EventLFSObjectUpdated is emitted when an LFS object is updated
type EventLFSObjectUpdated struct {
	LfsObjectId  uint64 `protobuf:"varint,1,opt,name=lfs_object_id,json=lfsObjectId,proto3" json:"lfs_object_id,omitempty"`
	RepositoryId uint64 `protobuf:"varint,2,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Oid          string `protobuf:"bytes,3,opt,name=oid,proto3" json:"oid,omitempty"`
	Cid          string `protobuf:"bytes,4,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (m *EventLFSObjectUpdated) Reset()         { *m = EventLFSObjectUpdated{} }
func (m *EventLFSObjectUpdated) String() string { return proto.CompactTextString(m) }
func (*EventLFSObjectUpdated) ProtoMessage()    {}
func (*EventLFSObjectUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_57683d92f491f563, []int{11}
}
func (m *EventLFSObjectUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventLFSObjectUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventLFSObjectUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventLFSObjectUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventLFSObjectUpdated.Merge(m, src)
}
func (m *EventLFSObjectUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventLFSObjectUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventLFSObjectUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventLFSObjectUpdated proto.InternalMessageInfo

func (m *EventLFSObjectUpdated) GetLfsObjectId() uint64 {
	if m != nil {
		return m.LfsObjectId
	}
	return 0
}

func (m *EventLFSObjectUpdated) GetRepositoryId() uint64 {
	if m != nil {
		return m.RepositoryId
	}
	return 0
}

func (m *EventLFSObjectUpdated) GetOid() string {
	if m != nil {
		return m.Oid
	}
	return ""
}

func (m *EventLFSObjectUpdated) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

// EventLFSObjectDeleted is emitted when an LFS object is deleted
type EventLFSObjectDeleted struct {
	LfsObjectId  uint64 `protobuf:"varint,1,opt,name=lfs_object_id,json=lfsObjectId,proto3" json:"lfs_object_id,omitempty"`
	RepositoryId uint64 `protobuf:"varint,2,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Oid          string `protobuf:"bytes,3,opt,name=oid,proto3" json:"oid,omitempty"`
	Cid          string `protobuf:"bytes,4,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (m *EventLFSObjectDeleted) Reset()         { *m = EventLFSObjectDeleted{} }
func (m *EventLFSObjectDeleted) String() string { return proto.CompactTextString(m) }
func (*EventLFSObjectDeleted) ProtoMessage()    {}
func (*EventLFSObjectDeleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_57683d92f491f563, []int{12}
}
func (m *EventLFSObjectDeleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventLFSObjectDeleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventLFSObjectDeleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventLFSObjectDeleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventLFSObjectDeleted.Merge(m, src)
}
func (m *EventLFSObjectDeleted) XXX_Size() int {
	return m.Size()
}
func (m *EventLFSObjectDeleted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventLFSObjectDeleted.DiscardUnknown(m)
}

var xxx_messageInfo_EventLFSObjectDeleted proto.InternalMessageInfo

func (m *EventLFSObjectDeleted) GetLfsObjectId() uint64 {
	if m != nil {
		return m.LfsObjectId
	}
	return 0
}

func (m *EventLFSObjectDeleted) GetRepositoryId() uint64 {
	if m != nil {
		return m.RepositoryId
	}
	return 0
}

func (m *EventLFSObjectDeleted) GetOid() string {
	if m != nil {
		return m.Oid
	}
	return ""
}

func (m *EventLFSObjectDeleted) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func init() {
	proto.RegisterType((*EventProviderRegistered)(nil), "gitopia.gitopia.storage.EventProviderRegistered")
	proto.RegisterType((*EventProviderStatusUpdated)(nil), "gitopia.gitopia.storage.EventProviderStatusUpdated")
	proto.RegisterType((*EventPackfileUpdated)(nil), "gitopia.gitopia.storage.EventPackfileUpdated")
	proto.RegisterType((*EventPackfileDeleted)(nil), "gitopia.gitopia.storage.EventPackfileDeleted")
	proto.RegisterType((*EventReleaseAssetUpdated)(nil), "gitopia.gitopia.storage.EventReleaseAssetUpdated")
	proto.RegisterType((*EventReleaseAssetDeleted)(nil), "gitopia.gitopia.storage.EventReleaseAssetDeleted")
	proto.RegisterType((*EventChallengeCreated)(nil), "gitopia.gitopia.storage.EventChallengeCreated")
	proto.RegisterType((*EventChallengeCompleted)(nil), "gitopia.gitopia.storage.EventChallengeCompleted")
	proto.RegisterType((*EventProviderUnregistered)(nil), "gitopia.gitopia.storage.EventProviderUnregistered")
	proto.RegisterType((*EventProviderUnstakeCompleted)(nil), "gitopia.gitopia.storage.EventProviderUnstakeCompleted")
	proto.RegisterType((*EventMergePullRequest)(nil), "gitopia.gitopia.storage.EventMergePullRequest")
	proto.RegisterType((*EventLFSObjectUpdated)(nil), "gitopia.gitopia.storage.EventLFSObjectUpdated")
	proto.RegisterType((*EventLFSObjectDeleted)(nil), "gitopia.gitopia.storage.EventLFSObjectDeleted")
}

func init() {
	proto.RegisterFile("gitopia/gitopia/storage/events.proto", fileDescriptor_57683d92f491f563)
}

var fileDescriptor_57683d92f491f563 = []byte{
	// 965 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x4b, 0x6f, 0xdb, 0x46,
	0x10, 0x36, 0x23, 0x59, 0x96, 0xd6, 0xf1, 0x23, 0x84, 0x53, 0xd3, 0x2a, 0x22, 0xa7, 0x6c, 0x51,
	0x18, 0x05, 0x4a, 0x22, 0x29, 0x9a, 0x9e, 0x2d, 0xf5, 0x25, 0x20, 0x75, 0x02, 0x2a, 0xe9, 0xa1,
	0x28, 0x40, 0xac, 0xb8, 0x63, 0x8a, 0x35, 0xc9, 0x65, 0xb9, 0x4b, 0xab, 0xba, 0xf7, 0xde, 0x00,
	0xfd, 0x09, 0xf9, 0x33, 0x39, 0xe6, 0x52, 0xa0, 0xa7, 0xb6, 0xb0, 0xff, 0x48, 0x31, 0xbb, 0x4b,
	0x3d, 0x5c, 0x37, 0x70, 0x50, 0xa0, 0x27, 0xed, 0xcc, 0x37, 0x8f, 0x6f, 0x47, 0x3b, 0x1f, 0x48,
	0x3e, 0x88, 0x13, 0xc9, 0x8b, 0x84, 0xfa, 0xf5, 0xaf, 0x90, 0xbc, 0xa4, 0x31, 0xf8, 0x70, 0x0e,
	0xb9, 0x14, 0x5e, 0x51, 0x72, 0xc9, 0xed, 0x7d, 0x83, 0x7a, 0xf5, 0xaf, 0x89, 0xea, 0x1e, 0xc6,
	0x9c, 0xc7, 0x29, 0xf8, 0x2a, 0x6c, 0x5c, 0x9d, 0xfa, 0x32, 0xc9, 0x40, 0x48, 0x9a, 0x15, 0x3a,
	0xb3, 0xbb, 0x17, 0xf3, 0x98, 0xab, 0xa3, 0x8f, 0x27, 0xe3, 0xed, 0x45, 0x5c, 0x64, 0x5c, 0xf8,
	0x63, 0x2a, 0xc0, 0x3f, 0x7f, 0x30, 0x06, 0x49, 0x1f, 0xf8, 0x11, 0x4f, 0x72, 0x8d, 0xbb, 0x8f,
	0xc9, 0xfe, 0x17, 0xd8, 0xff, 0x69, 0xc9, 0xcf, 0x13, 0x06, 0x65, 0x00, 0x71, 0x22, 0x24, 0x94,
	0xc0, 0x6c, 0x87, 0x6c, 0x50, 0xc6, 0x4a, 0x10, 0xc2, 0xb1, 0xee, 0x5b, 0x47, 0x9d, 0xa0, 0x36,
	0xed, 0x7d, 0xb2, 0x51, 0x00, 0x94, 0x61, 0xc2, 0x9c, 0x5b, 0x0a, 0x69, 0xa1, 0x39, 0x64, 0xee,
	0x09, 0xe9, 0xae, 0x54, 0x1b, 0x49, 0x2a, 0x2b, 0xf1, 0xbc, 0x60, 0x54, 0xbe, 0xb1, 0xe0, 0x3b,
	0xa4, 0xc5, 0xf3, 0x34, 0xc9, 0x41, 0xd5, 0x6b, 0x07, 0xc6, 0x72, 0x5f, 0x5a, 0x64, 0x4f, 0x17,
	0xa4, 0xd1, 0xd9, 0x69, 0x92, 0x42, 0x5d, 0xea, 0x7d, 0xb2, 0x55, 0x42, 0xc1, 0x45, 0x22, 0x79,
	0x39, 0x43, 0x1e, 0x58, 0xb0, 0x19, 0xdc, 0x5e, 0x38, 0x87, 0x0c, 0x69, 0xe6, 0x30, 0x0d, 0xa3,
	0x05, 0xcd, 0x1c, 0xa6, 0x83, 0x44, 0x01, 0x3c, 0x65, 0x0a, 0x68, 0x68, 0x80, 0xa7, 0x0c, 0x81,
	0x03, 0xd2, 0xc6, 0x8c, 0x9c, 0x66, 0xe0, 0x34, 0x35, 0xc5, 0x1c, 0xa6, 0x27, 0x34, 0x03, 0x84,
	0x30, 0x47, 0x41, 0xeb, 0x1a, 0xe2, 0x29, 0x43, 0xc8, 0xa5, 0x57, 0x48, 0x7e, 0x0e, 0x29, 0xdc,
	0x98, 0xa4, 0x4d, 0x9a, 0xaa, 0xa6, 0x66, 0xa8, 0xce, 0xf6, 0x2e, 0x69, 0x2c, 0xb8, 0xe1, 0xd1,
	0xfd, 0xcd, 0x22, 0x8e, 0xea, 0x11, 0x40, 0x0a, 0x54, 0xc0, 0xb1, 0x10, 0x20, 0xdf, 0x6a, 0x18,
	0xbb, 0xa4, 0x21, 0x69, 0x6c, 0xda, 0xe0, 0x71, 0xde, 0xb9, 0xb1, 0xd4, 0x79, 0x69, 0x64, 0xcd,
	0x7f, 0x1b, 0xd9, 0xfa, 0xca, 0xc8, 0xee, 0x11, 0x82, 0x19, 0x62, 0x42, 0x1f, 0x7e, 0xfa, 0xc8,
	0x69, 0x29, 0xac, 0x93, 0xc3, 0x74, 0xa4, 0x1c, 0x08, 0x63, 0x9e, 0x81, 0x37, 0x34, 0xcc, 0x53,
	0xa6, 0x61, 0xf7, 0x97, 0xeb, 0xee, 0xf5, 0x56, 0xf3, 0xbb, 0xd9, 0xbd, 0xcc, 0x44, 0x9b, 0xf3,
	0x89, 0xe2, 0x93, 0x33, 0xa4, 0xcc, 0x7d, 0xb4, 0xe5, 0x7e, 0x4b, 0xee, 0x2a, 0x42, 0x83, 0x09,
	0x4d, 0x53, 0xc8, 0x63, 0x18, 0x94, 0xa0, 0xa6, 0xfc, 0x1e, 0xb9, 0x1d, 0xd5, 0xbe, 0x05, 0x99,
	0xcd, 0xb9, 0x6f, 0xc8, 0xec, 0x2e, 0x69, 0x17, 0xe6, 0xe5, 0x1b, 0x42, 0x73, 0xdb, 0x2d, 0xcd,
	0xa2, 0x2d, 0xea, 0xf2, 0xac, 0xd0, 0xf7, 0xfc, 0x6f, 0x95, 0x71, 0xad, 0x44, 0x15, 0x45, 0xb8,
	0x56, 0x0d, 0xb5, 0x3d, 0xb5, 0xe9, 0xfe, 0x6a, 0x91, 0x83, 0x95, 0x7d, 0x7c, 0x9e, 0x97, 0x37,
	0xd9, 0xef, 0xef, 0xc9, 0x7e, 0x95, 0x0b, 0x49, 0xcf, 0x20, 0x8c, 0x34, 0xcb, 0x84, 0xe7, 0x21,
	0x0a, 0x8e, 0x6a, 0xbe, 0xf9, 0xb0, 0xeb, 0x69, 0x35, 0xf2, 0x6a, 0x35, 0xf2, 0x9e, 0xd5, 0x6a,
	0xd4, 0x6f, 0xbf, 0xfa, 0xe3, 0x70, 0xed, 0xc5, 0x9f, 0x87, 0x56, 0x70, 0xd7, 0x14, 0x19, 0xcc,
	0x6b, 0x60, 0x94, 0x5b, 0x92, 0x7b, 0x57, 0x48, 0x2d, 0x47, 0xbd, 0x91, 0xd8, 0x67, 0xa4, 0x45,
	0x33, 0x5e, 0xe5, 0xd2, 0xf0, 0x38, 0xf0, 0xb4, 0xbc, 0x79, 0x28, 0x6f, 0x9e, 0x91, 0x37, 0x6f,
	0xc0, 0x93, 0xbc, 0xdf, 0x44, 0x1a, 0x81, 0x09, 0x77, 0x5f, 0x36, 0xcd, 0xdf, 0xfa, 0x0d, 0x94,
	0x31, 0x3c, 0xad, 0xd2, 0x34, 0x80, 0x1f, 0x2b, 0x10, 0x12, 0x9b, 0x45, 0xf8, 0x0f, 0xf3, 0xb2,
	0x6e, 0x66, 0x4c, 0xfb, 0x43, 0xb2, 0x53, 0x54, 0x69, 0x1a, 0x96, 0x3a, 0xb2, 0x56, 0xbb, 0x66,
	0xb0, 0x55, 0x2c, 0xf2, 0x87, 0xcc, 0x3e, 0x22, 0xbb, 0xab, 0x71, 0x66, 0x75, 0x9b, 0xc1, 0xf6,
	0x72, 0x60, 0xc2, 0xec, 0x3d, 0xb2, 0x2e, 0x24, 0x95, 0xb5, 0xb6, 0x68, 0x03, 0xf3, 0x33, 0x64,
	0x85, 0xb3, 0xce, 0x12, 0x89, 0xbb, 0x62, 0xde, 0xe4, 0xb6, 0xf2, 0x0f, 0x94, 0x7b, 0x34, 0xa1,
	0xb8, 0x84, 0x92, 0x8a, 0x33, 0x64, 0xd2, 0x52, 0x0d, 0x5a, 0x68, 0x0e, 0xd5, 0x12, 0x2a, 0x40,
	0x57, 0x37, 0x5b, 0x86, 0x9e, 0x91, 0xea, 0xf0, 0x2e, 0xe9, 0xe0, 0xce, 0x68, 0xf1, 0x6a, 0xeb,
	0xe7, 0x83, 0x8e, 0x13, 0xb3, 0xf2, 0x0a, 0x4c, 0x98, 0xd3, 0xd1, 0x45, 0xd1, 0x1c, 0x32, 0xdb,
	0xd5, 0xeb, 0x17, 0xf2, 0x69, 0xae, 0xb5, 0x9e, 0xa8, 0xcc, 0x4d, 0x74, 0x3e, 0x41, 0xdf, 0x90,
	0xe1, 0x8c, 0x96, 0x62, 0xe4, 0xac, 0x00, 0x67, 0x53, 0x45, 0x6d, 0xcd, 0xa3, 0x9e, 0xcd, 0x0a,
	0xb0, 0x3f, 0x22, 0x77, 0x56, 0x66, 0x34, 0x01, 0xca, 0x9c, 0x6d, 0x15, 0xb9, 0xb3, 0x34, 0xa4,
	0xaf, 0x81, 0x32, 0xfb, 0x90, 0xa8, 0x16, 0xe1, 0xb8, 0xa4, 0x79, 0x34, 0x71, 0x76, 0x54, 0x14,
	0x41, 0x57, 0x5f, 0x79, 0xf0, 0x3a, 0x6a, 0x30, 0x2c, 0x1c, 0xcf, 0x9c, 0x5d, 0x7d, 0x1d, 0xed,
	0xe8, 0xcf, 0x70, 0x14, 0x95, 0xd6, 0xc5, 0x90, 0x4a, 0xe7, 0xce, 0x7d, 0xeb, 0xa8, 0x11, 0x74,
	0x8c, 0xe7, 0x58, 0x2e, 0xe5, 0x52, 0xe9, 0xd8, 0x0a, 0x35, 0xb9, 0xc7, 0xd2, 0xfd, 0xd9, 0x32,
	0xaf, 0xe4, 0xf1, 0x97, 0xa3, 0x27, 0xe3, 0x1f, 0x20, 0x9a, 0x4b, 0xac, 0x4b, 0xb6, 0xd2, 0x53,
	0x11, 0x72, 0xe5, 0x5c, 0xda, 0xd1, 0xf4, 0x54, 0xe8, 0xc0, 0xe1, 0x35, 0x72, 0x75, 0xeb, 0x7a,
	0xb9, 0xe2, 0x0b, 0x69, 0xe7, 0x09, 0xfb, 0xa7, 0x34, 0x5d, 0x43, 0xa3, 0x56, 0xc4, 0xff, 0x93,
	0x46, 0xff, 0xab, 0x57, 0x17, 0x3d, 0xeb, 0xf5, 0x45, 0xcf, 0xfa, 0xeb, 0xa2, 0x67, 0xbd, 0xb8,
	0xec, 0xad, 0xbd, 0xbe, 0xec, 0xad, 0xfd, 0x7e, 0xd9, 0x5b, 0xfb, 0xee, 0xe3, 0x38, 0x91, 0x93,
	0x6a, 0xec, 0x45, 0x3c, 0xf3, 0xaf, 0x7e, 0xd5, 0x9c, 0x3f, 0xf2, 0x7f, 0x9a, 0x7f, 0xda, 0xe0,
	0x83, 0x10, 0xe3, 0x96, 0x52, 0x89, 0x4f, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xa6, 0x4d, 0x5f,
	0x08, 0x02, 0x09, 0x00, 0x00,
}

func (m *EventProviderRegistered) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventProviderRegistered) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventProviderRegistered) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PeerId) > 0 {
		i -= len(m.PeerId)
		copy(dAtA[i:], m.PeerId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PeerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventProviderStatusUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventProviderStatusUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventProviderStatusUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Online {
		i--
		if m.Online {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPackfileUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPackfileUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPackfileUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OldName) > 0 {
		i -= len(m.OldName)
		copy(dAtA[i:], m.OldName)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OldName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NewName) > 0 {
		i -= len(m.NewName)
		copy(dAtA[i:], m.NewName)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OldCid) > 0 {
		i -= len(m.OldCid)
		copy(dAtA[i:], m.OldCid)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OldCid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NewCid) > 0 {
		i -= len(m.NewCid)
		copy(dAtA[i:], m.NewCid)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewCid)))
		i--
		dAtA[i] = 0x12
	}
	if m.RepositoryId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RepositoryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventPackfileDeleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPackfileDeleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPackfileDeleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.RepositoryId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RepositoryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventReleaseAssetUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventReleaseAssetUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventReleaseAssetUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OldSha256) > 0 {
		i -= len(m.OldSha256)
		copy(dAtA[i:], m.OldSha256)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OldSha256)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NewSha256) > 0 {
		i -= len(m.NewSha256)
		copy(dAtA[i:], m.NewSha256)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewSha256)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OldCid) > 0 {
		i -= len(m.OldCid)
		copy(dAtA[i:], m.OldCid)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OldCid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NewCid) > 0 {
		i -= len(m.NewCid)
		copy(dAtA[i:], m.NewCid)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewCid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x12
	}
	if m.RepositoryId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RepositoryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventReleaseAssetDeleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventReleaseAssetDeleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventReleaseAssetDeleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sha256) > 0 {
		i -= len(m.Sha256)
		copy(dAtA[i:], m.Sha256)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sha256)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x12
	}
	if m.RepositoryId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RepositoryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventChallengeCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventChallengeCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventChallengeCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChallengeId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ChallengeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventChallengeCompleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventChallengeCompleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventChallengeCompleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChallengeId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ChallengeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventProviderUnregistered) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventProviderUnregistered) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventProviderUnregistered) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.UnstakeCompletionTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UnstakeCompletionTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintEvents(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventProviderUnstakeCompleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventProviderUnstakeCompleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventProviderUnstakeCompleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventMergePullRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMergePullRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMergePullRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MergedAt != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.MergedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.MergedBy) > 0 {
		i -= len(m.MergedBy)
		copy(dAtA[i:], m.MergedBy)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MergedBy)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.RepoBranch) > 0 {
		i -= len(m.RepoBranch)
		copy(dAtA[i:], m.RepoBranch)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RepoBranch)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.PullRequestHead) > 0 {
		i -= len(m.PullRequestHead)
		copy(dAtA[i:], m.PullRequestHead)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PullRequestHead)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.RepoOwnerType) > 0 {
		i -= len(m.RepoOwnerType)
		copy(dAtA[i:], m.RepoOwnerType)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RepoOwnerType)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.RepoOwnerId) > 0 {
		i -= len(m.RepoOwnerId)
		copy(dAtA[i:], m.RepoOwnerId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RepoOwnerId)))
		i--
		dAtA[i] = 0x52
	}
	if m.RepoId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RepoId))
		i--
		dAtA[i] = 0x48
	}
	if len(m.RepoName) > 0 {
		i -= len(m.RepoName)
		copy(dAtA[i:], m.RepoName)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RepoName)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TaskState) > 0 {
		i -= len(m.TaskState)
		copy(dAtA[i:], m.TaskState)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.TaskState)))
		i--
		dAtA[i] = 0x3a
	}
	if m.TaskId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.MergeCommitSha) > 0 {
		i -= len(m.MergeCommitSha)
		copy(dAtA[i:], m.MergeCommitSha)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MergeCommitSha)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x22
	}
	if m.PullRequestIid != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PullRequestIid))
		i--
		dAtA[i] = 0x18
	}
	if m.PullRequestId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PullRequestId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventLFSObjectUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventLFSObjectUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventLFSObjectUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Oid) > 0 {
		i -= len(m.Oid)
		copy(dAtA[i:], m.Oid)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Oid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RepositoryId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RepositoryId))
		i--
		dAtA[i] = 0x10
	}
	if m.LfsObjectId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.LfsObjectId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventLFSObjectDeleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventLFSObjectDeleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventLFSObjectDeleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Oid) > 0 {
		i -= len(m.Oid)
		copy(dAtA[i:], m.Oid)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Oid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RepositoryId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RepositoryId))
		i--
		dAtA[i] = 0x10
	}
	if m.LfsObjectId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.LfsObjectId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventProviderRegistered) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.PeerId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventProviderStatusUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Online {
		n += 2
	}
	return n
}

func (m *EventPackfileUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RepositoryId != 0 {
		n += 1 + sovEvents(uint64(m.RepositoryId))
	}
	l = len(m.NewCid)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OldCid)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewName)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OldName)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventPackfileDeleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RepositoryId != 0 {
		n += 1 + sovEvents(uint64(m.RepositoryId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventReleaseAssetUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RepositoryId != 0 {
		n += 1 + sovEvents(uint64(m.RepositoryId))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewCid)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OldCid)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewSha256)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OldSha256)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventReleaseAssetDeleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RepositoryId != 0 {
		n += 1 + sovEvents(uint64(m.RepositoryId))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Sha256)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventChallengeCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeId != 0 {
		n += 1 + sovEvents(uint64(m.ChallengeId))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventChallengeCompleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeId != 0 {
		n += 1 + sovEvents(uint64(m.ChallengeId))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Success {
		n += 2
	}
	return n
}

func (m *EventProviderUnregistered) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UnstakeCompletionTime)
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventProviderUnstakeCompleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventMergePullRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.PullRequestId != 0 {
		n += 1 + sovEvents(uint64(m.PullRequestId))
	}
	if m.PullRequestIid != 0 {
		n += 1 + sovEvents(uint64(m.PullRequestIid))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.MergeCommitSha)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.TaskId != 0 {
		n += 1 + sovEvents(uint64(m.TaskId))
	}
	l = len(m.TaskState)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.RepoName)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.RepoId != 0 {
		n += 1 + sovEvents(uint64(m.RepoId))
	}
	l = len(m.RepoOwnerId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.RepoOwnerType)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.PullRequestHead)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.RepoBranch)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.MergedBy)
	if l > 0 {
		n += 2 + l + sovEvents(uint64(l))
	}
	if m.UpdatedAt != 0 {
		n += 2 + sovEvents(uint64(m.UpdatedAt))
	}
	if m.MergedAt != 0 {
		n += 2 + sovEvents(uint64(m.MergedAt))
	}
	return n
}

func (m *EventLFSObjectUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LfsObjectId != 0 {
		n += 1 + sovEvents(uint64(m.LfsObjectId))
	}
	if m.RepositoryId != 0 {
		n += 1 + sovEvents(uint64(m.RepositoryId))
	}
	l = len(m.Oid)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventLFSObjectDeleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LfsObjectId != 0 {
		n += 1 + sovEvents(uint64(m.LfsObjectId))
	}
	if m.RepositoryId != 0 {
		n += 1 + sovEvents(uint64(m.RepositoryId))
	}
	l = len(m.Oid)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventProviderRegistered) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventProviderRegistered: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventProviderRegistered: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventProviderStatusUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventProviderStatusUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventProviderStatusUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Online = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPackfileUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPackfileUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPackfileUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryId", wireType)
			}
			m.RepositoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepositoryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewCid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldCid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldCid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPackfileDeleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPackfileDeleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPackfileDeleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryId", wireType)
			}
			m.RepositoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepositoryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventReleaseAssetUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventReleaseAssetUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventReleaseAssetUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryId", wireType)
			}
			m.RepositoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepositoryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewCid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldCid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldCid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSha256", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewSha256 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldSha256", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldSha256 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventReleaseAssetDeleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventReleaseAssetDeleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventReleaseAssetDeleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryId", wireType)
			}
			m.RepositoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepositoryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha256", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha256 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventChallengeCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventChallengeCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventChallengeCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			m.ChallengeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventChallengeCompleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventChallengeCompleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventChallengeCompleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			m.ChallengeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventProviderUnregistered) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventProviderUnregistered: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventProviderUnregistered: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakeCompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.UnstakeCompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventProviderUnstakeCompleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventProviderUnstakeCompleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventProviderUnstakeCompleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMergePullRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMergePullRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMergePullRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PullRequestId", wireType)
			}
			m.PullRequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PullRequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PullRequestIid", wireType)
			}
			m.PullRequestIid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PullRequestIid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MergeCommitSha", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MergeCommitSha = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepoName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepoName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepoId", wireType)
			}
			m.RepoId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepoId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepoOwnerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepoOwnerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepoOwnerType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepoOwnerType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PullRequestHead", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PullRequestHead = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepoBranch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepoBranch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MergedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MergedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MergedAt", wireType)
			}
			m.MergedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MergedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventLFSObjectUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventLFSObjectUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventLFSObjectUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LfsObjectId", wireType)
			}
			m.LfsObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LfsObjectId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryId", wireType)
			}
			m.RepositoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepositoryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventLFSObjectDeleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventLFSObjectDeleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventLFSObjectDeleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LfsObjectId", wireType)
			}
			m.LfsObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LfsObjectId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryId", wireType)
			}
			m.RepositoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepositoryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
