// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitopia/gitopia/storage/types.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ProviderStatus represents the status of a storage provider
type ProviderStatus int32

const (
	ProviderStatus_PROVIDER_STATUS_UNSPECIFIED   ProviderStatus = 0
	ProviderStatus_PROVIDER_STATUS_ACTIVE        ProviderStatus = 1
	ProviderStatus_PROVIDER_STATUS_INACTIVE      ProviderStatus = 2
	ProviderStatus_PROVIDER_STATUS_SUSPENDED     ProviderStatus = 3
	ProviderStatus_PROVIDER_STATUS_UNREGISTERING ProviderStatus = 4
)

var ProviderStatus_name = map[int32]string{
	0: "PROVIDER_STATUS_UNSPECIFIED",
	1: "PROVIDER_STATUS_ACTIVE",
	2: "PROVIDER_STATUS_INACTIVE",
	3: "PROVIDER_STATUS_SUSPENDED",
	4: "PROVIDER_STATUS_UNREGISTERING",
}

var ProviderStatus_value = map[string]int32{
	"PROVIDER_STATUS_UNSPECIFIED":   0,
	"PROVIDER_STATUS_ACTIVE":        1,
	"PROVIDER_STATUS_INACTIVE":      2,
	"PROVIDER_STATUS_SUSPENDED":     3,
	"PROVIDER_STATUS_UNREGISTERING": 4,
}

func (x ProviderStatus) String() string {
	return proto.EnumName(ProviderStatus_name, int32(x))
}

func (ProviderStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b9cfcdd7c462dde8, []int{0}
}

// ChallengeType represents the type of storage challenge
type ChallengeType int32

const (
	ChallengeType_CHALLENGE_TYPE_UNSPECIFIED   ChallengeType = 0
	ChallengeType_CHALLENGE_TYPE_PACKFILE      ChallengeType = 1
	ChallengeType_CHALLENGE_TYPE_RELEASE_ASSET ChallengeType = 2
	ChallengeType_CHALLENGE_TYPE_LFS_OBJECT    ChallengeType = 3
)

var ChallengeType_name = map[int32]string{
	0: "CHALLENGE_TYPE_UNSPECIFIED",
	1: "CHALLENGE_TYPE_PACKFILE",
	2: "CHALLENGE_TYPE_RELEASE_ASSET",
	3: "CHALLENGE_TYPE_LFS_OBJECT",
}

var ChallengeType_value = map[string]int32{
	"CHALLENGE_TYPE_UNSPECIFIED":   0,
	"CHALLENGE_TYPE_PACKFILE":      1,
	"CHALLENGE_TYPE_RELEASE_ASSET": 2,
	"CHALLENGE_TYPE_LFS_OBJECT":    3,
}

func (x ChallengeType) String() string {
	return proto.EnumName(ChallengeType_name, int32(x))
}

func (ChallengeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b9cfcdd7c462dde8, []int{1}
}

// ChallengeStatus represents the status of a challenge
type ChallengeStatus int32

const (
	ChallengeStatus_CHALLENGE_STATUS_UNSPECIFIED ChallengeStatus = 0
	ChallengeStatus_CHALLENGE_STATUS_PENDING     ChallengeStatus = 1
	ChallengeStatus_CHALLENGE_STATUS_COMPLETED   ChallengeStatus = 2
	ChallengeStatus_CHALLENGE_STATUS_FAILED      ChallengeStatus = 3
	ChallengeStatus_CHALLENGE_STATUS_TIMEOUT     ChallengeStatus = 4
)

var ChallengeStatus_name = map[int32]string{
	0: "CHALLENGE_STATUS_UNSPECIFIED",
	1: "CHALLENGE_STATUS_PENDING",
	2: "CHALLENGE_STATUS_COMPLETED",
	3: "CHALLENGE_STATUS_FAILED",
	4: "CHALLENGE_STATUS_TIMEOUT",
}

var ChallengeStatus_value = map[string]int32{
	"CHALLENGE_STATUS_UNSPECIFIED": 0,
	"CHALLENGE_STATUS_PENDING":     1,
	"CHALLENGE_STATUS_COMPLETED":   2,
	"CHALLENGE_STATUS_FAILED":      3,
	"CHALLENGE_STATUS_TIMEOUT":     4,
}

func (x ChallengeStatus) String() string {
	return proto.EnumName(ChallengeStatus_name, int32(x))
}

func (ChallengeStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b9cfcdd7c462dde8, []int{2}
}

// Provider represents a storage provider in the network
type Provider struct {
	Creator               string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id                    uint64     `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	ApiUrl                string     `protobuf:"bytes,3,opt,name=api_url,json=apiUrl,proto3" json:"api_url,omitempty"`
	TotalChallenges       uint64     `protobuf:"varint,4,opt,name=total_challenges,json=totalChallenges,proto3" json:"total_challenges,omitempty"`
	SuccessfulChallenges  uint64     `protobuf:"varint,5,opt,name=successful_challenges,json=successfulChallenges,proto3" json:"successful_challenges,omitempty"`
	ConsecutiveFailures   uint64     `protobuf:"varint,6,opt,name=consecutive_failures,json=consecutiveFailures,proto3" json:"consecutive_failures,omitempty"`
	JoinTime              time.Time  `protobuf:"bytes,7,opt,name=join_time,json=joinTime,proto3,stdtime" json:"join_time"`
	UnstakeCompletionTime *time.Time `protobuf:"bytes,8,opt,name=unstake_completion_time,json=unstakeCompletionTime,proto3,stdtime" json:"unstake_completion_time,omitempty"`
	Moniker               string     `protobuf:"bytes,9,opt,name=moniker,proto3" json:"moniker,omitempty"`
	// status defines the current status of the provider (active/inactive/suspended)
	Status ProviderStatus `protobuf:"varint,10,opt,name=status,proto3,enum=gitopia.gitopia.storage.ProviderStatus" json:"status,omitempty"`
	// ipfs_cluster_peer_multiaddr defines the multiaddr of the IPFS cluster peer
	IpfsClusterPeerMultiaddr string `protobuf:"bytes,11,opt,name=ipfs_cluster_peer_multiaddr,json=ipfsClusterPeerMultiaddr,proto3" json:"ipfs_cluster_peer_multiaddr,omitempty"`
	// pending_decrease_amount defines the amount to be decreased after cooldown
	PendingDecreaseAmount *types.Coin `protobuf:"bytes,12,opt,name=pending_decrease_amount,json=pendingDecreaseAmount,proto3" json:"pending_decrease_amount,omitempty"`
	// decrease_completion_time defines when the stake decrease can be completed
	DecreaseCompletionTime *time.Time `protobuf:"bytes,13,opt,name=decrease_completion_time,json=decreaseCompletionTime,proto3,stdtime" json:"decrease_completion_time,omitempty"`
	// Liveness and jail tracking fields
	Jailed                    bool       `protobuf:"varint,14,opt,name=jailed,proto3" json:"jailed,omitempty"`
	JailUntil                 *time.Time `protobuf:"bytes,15,opt,name=jail_until,json=jailUntil,proto3,stdtime" json:"jail_until,omitempty"`
	ConsecutiveLivenessFaults uint64     `protobuf:"varint,16,opt,name=consecutive_liveness_faults,json=consecutiveLivenessFaults,proto3" json:"consecutive_liveness_faults,omitempty"`
	ConsecutiveProofFaults    uint64     `protobuf:"varint,17,opt,name=consecutive_proof_faults,json=consecutiveProofFaults,proto3" json:"consecutive_proof_faults,omitempty"`
	LastLivenessCheck         *time.Time `protobuf:"bytes,18,opt,name=last_liveness_check,json=lastLivenessCheck,proto3,stdtime" json:"last_liveness_check,omitempty"`
}

func (m *Provider) Reset()         { *m = Provider{} }
func (m *Provider) String() string { return proto.CompactTextString(m) }
func (*Provider) ProtoMessage()    {}
func (*Provider) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9cfcdd7c462dde8, []int{0}
}
func (m *Provider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Provider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Provider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Provider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Provider.Merge(m, src)
}
func (m *Provider) XXX_Size() int {
	return m.Size()
}
func (m *Provider) XXX_DiscardUnknown() {
	xxx_messageInfo_Provider.DiscardUnknown(m)
}

var xxx_messageInfo_Provider proto.InternalMessageInfo

func (m *Provider) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Provider) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Provider) GetApiUrl() string {
	if m != nil {
		return m.ApiUrl
	}
	return ""
}

func (m *Provider) GetTotalChallenges() uint64 {
	if m != nil {
		return m.TotalChallenges
	}
	return 0
}

func (m *Provider) GetSuccessfulChallenges() uint64 {
	if m != nil {
		return m.SuccessfulChallenges
	}
	return 0
}

func (m *Provider) GetConsecutiveFailures() uint64 {
	if m != nil {
		return m.ConsecutiveFailures
	}
	return 0
}

func (m *Provider) GetJoinTime() time.Time {
	if m != nil {
		return m.JoinTime
	}
	return time.Time{}
}

func (m *Provider) GetUnstakeCompletionTime() *time.Time {
	if m != nil {
		return m.UnstakeCompletionTime
	}
	return nil
}

func (m *Provider) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *Provider) GetStatus() ProviderStatus {
	if m != nil {
		return m.Status
	}
	return ProviderStatus_PROVIDER_STATUS_UNSPECIFIED
}

func (m *Provider) GetIpfsClusterPeerMultiaddr() string {
	if m != nil {
		return m.IpfsClusterPeerMultiaddr
	}
	return ""
}

func (m *Provider) GetPendingDecreaseAmount() *types.Coin {
	if m != nil {
		return m.PendingDecreaseAmount
	}
	return nil
}

func (m *Provider) GetDecreaseCompletionTime() *time.Time {
	if m != nil {
		return m.DecreaseCompletionTime
	}
	return nil
}

func (m *Provider) GetJailed() bool {
	if m != nil {
		return m.Jailed
	}
	return false
}

func (m *Provider) GetJailUntil() *time.Time {
	if m != nil {
		return m.JailUntil
	}
	return nil
}

func (m *Provider) GetConsecutiveLivenessFaults() uint64 {
	if m != nil {
		return m.ConsecutiveLivenessFaults
	}
	return 0
}

func (m *Provider) GetConsecutiveProofFaults() uint64 {
	if m != nil {
		return m.ConsecutiveProofFaults
	}
	return 0
}

func (m *Provider) GetLastLivenessCheck() *time.Time {
	if m != nil {
		return m.LastLivenessCheck
	}
	return nil
}

// Packfile represents a Git packfile stored in IPFS
type Packfile struct {
	Creator      string    `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id           uint64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	RepositoryId uint64    `protobuf:"varint,3,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Name         string    `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Size_        uint64    `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	Cid          string    `protobuf:"bytes,6,opt,name=cid,proto3" json:"cid,omitempty"`
	RootHash     []byte    `protobuf:"bytes,7,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
	CreatedAt    time.Time `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	UpdatedAt    time.Time `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at"`
	OldCid       string    `protobuf:"bytes,10,opt,name=old_cid,json=oldCid,proto3" json:"old_cid,omitempty"`
}

func (m *Packfile) Reset()         { *m = Packfile{} }
func (m *Packfile) String() string { return proto.CompactTextString(m) }
func (*Packfile) ProtoMessage()    {}
func (*Packfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9cfcdd7c462dde8, []int{1}
}
func (m *Packfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Packfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Packfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Packfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Packfile.Merge(m, src)
}
func (m *Packfile) XXX_Size() int {
	return m.Size()
}
func (m *Packfile) XXX_DiscardUnknown() {
	xxx_messageInfo_Packfile.DiscardUnknown(m)
}

var xxx_messageInfo_Packfile proto.InternalMessageInfo

func (m *Packfile) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Packfile) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Packfile) GetRepositoryId() uint64 {
	if m != nil {
		return m.RepositoryId
	}
	return 0
}

func (m *Packfile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Packfile) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *Packfile) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *Packfile) GetRootHash() []byte {
	if m != nil {
		return m.RootHash
	}
	return nil
}

func (m *Packfile) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Packfile) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

func (m *Packfile) GetOldCid() string {
	if m != nil {
		return m.OldCid
	}
	return ""
}

// Release asset
type ReleaseAsset struct {
	Creator      string    `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id           uint64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	RepositoryId uint64    `protobuf:"varint,3,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Tag          string    `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`
	Name         string    `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Size_        uint64    `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	Cid          string    `protobuf:"bytes,7,opt,name=cid,proto3" json:"cid,omitempty"`
	RootHash     []byte    `protobuf:"bytes,8,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
	Sha256       string    `protobuf:"bytes,9,opt,name=sha256,proto3" json:"sha256,omitempty"`
	CreatedAt    time.Time `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	UpdatedAt    time.Time `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at"`
}

func (m *ReleaseAsset) Reset()         { *m = ReleaseAsset{} }
func (m *ReleaseAsset) String() string { return proto.CompactTextString(m) }
func (*ReleaseAsset) ProtoMessage()    {}
func (*ReleaseAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9cfcdd7c462dde8, []int{2}
}
func (m *ReleaseAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReleaseAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReleaseAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReleaseAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseAsset.Merge(m, src)
}
func (m *ReleaseAsset) XXX_Size() int {
	return m.Size()
}
func (m *ReleaseAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseAsset.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseAsset proto.InternalMessageInfo

func (m *ReleaseAsset) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ReleaseAsset) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReleaseAsset) GetRepositoryId() uint64 {
	if m != nil {
		return m.RepositoryId
	}
	return 0
}

func (m *ReleaseAsset) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *ReleaseAsset) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReleaseAsset) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *ReleaseAsset) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *ReleaseAsset) GetRootHash() []byte {
	if m != nil {
		return m.RootHash
	}
	return nil
}

func (m *ReleaseAsset) GetSha256() string {
	if m != nil {
		return m.Sha256
	}
	return ""
}

func (m *ReleaseAsset) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *ReleaseAsset) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

// Mapping between packfile id and repository id
type PackfileRepositoryMapping struct {
	PackfileId   uint64 `protobuf:"varint,1,opt,name=packfile_id,json=packfileId,proto3" json:"packfile_id,omitempty"`
	RepositoryId uint64 `protobuf:"varint,2,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
}

func (m *PackfileRepositoryMapping) Reset()         { *m = PackfileRepositoryMapping{} }
func (m *PackfileRepositoryMapping) String() string { return proto.CompactTextString(m) }
func (*PackfileRepositoryMapping) ProtoMessage()    {}
func (*PackfileRepositoryMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9cfcdd7c462dde8, []int{3}
}
func (m *PackfileRepositoryMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PackfileRepositoryMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PackfileRepositoryMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PackfileRepositoryMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackfileRepositoryMapping.Merge(m, src)
}
func (m *PackfileRepositoryMapping) XXX_Size() int {
	return m.Size()
}
func (m *PackfileRepositoryMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_PackfileRepositoryMapping.DiscardUnknown(m)
}

var xxx_messageInfo_PackfileRepositoryMapping proto.InternalMessageInfo

func (m *PackfileRepositoryMapping) GetPackfileId() uint64 {
	if m != nil {
		return m.PackfileId
	}
	return 0
}

func (m *PackfileRepositoryMapping) GetRepositoryId() uint64 {
	if m != nil {
		return m.RepositoryId
	}
	return 0
}

// Mapping between release asset id and repository id, tag and name
type ReleaseAssetRepositoryMapping struct {
	ReleaseAssetId uint64 `protobuf:"varint,1,opt,name=release_asset_id,json=releaseAssetId,proto3" json:"release_asset_id,omitempty"`
	RepositoryId   uint64 `protobuf:"varint,2,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Tag            string `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	Name           string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ReleaseAssetRepositoryMapping) Reset()         { *m = ReleaseAssetRepositoryMapping{} }
func (m *ReleaseAssetRepositoryMapping) String() string { return proto.CompactTextString(m) }
func (*ReleaseAssetRepositoryMapping) ProtoMessage()    {}
func (*ReleaseAssetRepositoryMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9cfcdd7c462dde8, []int{4}
}
func (m *ReleaseAssetRepositoryMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReleaseAssetRepositoryMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReleaseAssetRepositoryMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReleaseAssetRepositoryMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseAssetRepositoryMapping.Merge(m, src)
}
func (m *ReleaseAssetRepositoryMapping) XXX_Size() int {
	return m.Size()
}
func (m *ReleaseAssetRepositoryMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseAssetRepositoryMapping.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseAssetRepositoryMapping proto.InternalMessageInfo

func (m *ReleaseAssetRepositoryMapping) GetReleaseAssetId() uint64 {
	if m != nil {
		return m.ReleaseAssetId
	}
	return 0
}

func (m *ReleaseAssetRepositoryMapping) GetRepositoryId() uint64 {
	if m != nil {
		return m.RepositoryId
	}
	return 0
}

func (m *ReleaseAssetRepositoryMapping) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *ReleaseAssetRepositoryMapping) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// LFSObject represents a Large File Storage object
type LFSObject struct {
	Creator      string    `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id           uint64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	RepositoryId uint64    `protobuf:"varint,3,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Oid          string    `protobuf:"bytes,4,opt,name=oid,proto3" json:"oid,omitempty"`
	Size_        uint64    `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	Cid          string    `protobuf:"bytes,6,opt,name=cid,proto3" json:"cid,omitempty"`
	RootHash     []byte    `protobuf:"bytes,7,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
	CreatedAt    time.Time `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	UpdatedAt    time.Time `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at"`
}

func (m *LFSObject) Reset()         { *m = LFSObject{} }
func (m *LFSObject) String() string { return proto.CompactTextString(m) }
func (*LFSObject) ProtoMessage()    {}
func (*LFSObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9cfcdd7c462dde8, []int{5}
}
func (m *LFSObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LFSObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LFSObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LFSObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LFSObject.Merge(m, src)
}
func (m *LFSObject) XXX_Size() int {
	return m.Size()
}
func (m *LFSObject) XXX_DiscardUnknown() {
	xxx_messageInfo_LFSObject.DiscardUnknown(m)
}

var xxx_messageInfo_LFSObject proto.InternalMessageInfo

func (m *LFSObject) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *LFSObject) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LFSObject) GetRepositoryId() uint64 {
	if m != nil {
		return m.RepositoryId
	}
	return 0
}

func (m *LFSObject) GetOid() string {
	if m != nil {
		return m.Oid
	}
	return ""
}

func (m *LFSObject) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *LFSObject) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *LFSObject) GetRootHash() []byte {
	if m != nil {
		return m.RootHash
	}
	return nil
}

func (m *LFSObject) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *LFSObject) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

// Mapping between LFS object id and repository id
type LFSObjectRepositoryMapping struct {
	LfsObjectId  uint64 `protobuf:"varint,1,opt,name=lfs_object_id,json=lfsObjectId,proto3" json:"lfs_object_id,omitempty"`
	RepositoryId uint64 `protobuf:"varint,2,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Oid          string `protobuf:"bytes,3,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (m *LFSObjectRepositoryMapping) Reset()         { *m = LFSObjectRepositoryMapping{} }
func (m *LFSObjectRepositoryMapping) String() string { return proto.CompactTextString(m) }
func (*LFSObjectRepositoryMapping) ProtoMessage()    {}
func (*LFSObjectRepositoryMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9cfcdd7c462dde8, []int{6}
}
func (m *LFSObjectRepositoryMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LFSObjectRepositoryMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LFSObjectRepositoryMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LFSObjectRepositoryMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LFSObjectRepositoryMapping.Merge(m, src)
}
func (m *LFSObjectRepositoryMapping) XXX_Size() int {
	return m.Size()
}
func (m *LFSObjectRepositoryMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_LFSObjectRepositoryMapping.DiscardUnknown(m)
}

var xxx_messageInfo_LFSObjectRepositoryMapping proto.InternalMessageInfo

func (m *LFSObjectRepositoryMapping) GetLfsObjectId() uint64 {
	if m != nil {
		return m.LfsObjectId
	}
	return 0
}

func (m *LFSObjectRepositoryMapping) GetRepositoryId() uint64 {
	if m != nil {
		return m.RepositoryId
	}
	return 0
}

func (m *LFSObjectRepositoryMapping) GetOid() string {
	if m != nil {
		return m.Oid
	}
	return ""
}

// Challenge represents a storage proof challenge
type Challenge struct {
	Id            uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Provider      string          `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	ChallengeType ChallengeType   `protobuf:"varint,3,opt,name=challenge_type,json=challengeType,proto3,enum=gitopia.gitopia.storage.ChallengeType" json:"challenge_type,omitempty"`
	ContentId     uint64          `protobuf:"varint,4,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	RootHash      []byte          `protobuf:"bytes,5,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
	ChunkIndex    uint64          `protobuf:"varint,6,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"`
	CreatedAt     time.Time       `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	Deadline      time.Time       `protobuf:"bytes,8,opt,name=deadline,proto3,stdtime" json:"deadline"`
	Status        ChallengeStatus `protobuf:"varint,9,opt,name=status,proto3,enum=gitopia.gitopia.storage.ChallengeStatus" json:"status,omitempty"`
}

func (m *Challenge) Reset()         { *m = Challenge{} }
func (m *Challenge) String() string { return proto.CompactTextString(m) }
func (*Challenge) ProtoMessage()    {}
func (*Challenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9cfcdd7c462dde8, []int{7}
}
func (m *Challenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Challenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Challenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Challenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Challenge.Merge(m, src)
}
func (m *Challenge) XXX_Size() int {
	return m.Size()
}
func (m *Challenge) XXX_DiscardUnknown() {
	xxx_messageInfo_Challenge.DiscardUnknown(m)
}

var xxx_messageInfo_Challenge proto.InternalMessageInfo

func (m *Challenge) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Challenge) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *Challenge) GetChallengeType() ChallengeType {
	if m != nil {
		return m.ChallengeType
	}
	return ChallengeType_CHALLENGE_TYPE_UNSPECIFIED
}

func (m *Challenge) GetContentId() uint64 {
	if m != nil {
		return m.ContentId
	}
	return 0
}

func (m *Challenge) GetRootHash() []byte {
	if m != nil {
		return m.RootHash
	}
	return nil
}

func (m *Challenge) GetChunkIndex() uint64 {
	if m != nil {
		return m.ChunkIndex
	}
	return 0
}

func (m *Challenge) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Challenge) GetDeadline() time.Time {
	if m != nil {
		return m.Deadline
	}
	return time.Time{}
}

func (m *Challenge) GetStatus() ChallengeStatus {
	if m != nil {
		return m.Status
	}
	return ChallengeStatus_CHALLENGE_STATUS_UNSPECIFIED
}

// BlockInfo stores information about a block
type BlockInfo struct {
	Height    uint32    `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Timestamp time.Time `protobuf:"bytes,2,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
}

func (m *BlockInfo) Reset()         { *m = BlockInfo{} }
func (m *BlockInfo) String() string { return proto.CompactTextString(m) }
func (*BlockInfo) ProtoMessage()    {}
func (*BlockInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9cfcdd7c462dde8, []int{8}
}
func (m *BlockInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockInfo.Merge(m, src)
}
func (m *BlockInfo) XXX_Size() int {
	return m.Size()
}
func (m *BlockInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BlockInfo proto.InternalMessageInfo

func (m *BlockInfo) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockInfo) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

// ProviderStake represents the stake of a provider
type ProviderStake struct {
	Provider string                                   `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Stake    github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=stake,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"stake"`
}

func (m *ProviderStake) Reset()         { *m = ProviderStake{} }
func (m *ProviderStake) String() string { return proto.CompactTextString(m) }
func (*ProviderStake) ProtoMessage()    {}
func (*ProviderStake) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9cfcdd7c462dde8, []int{9}
}
func (m *ProviderStake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProviderStake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProviderStake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProviderStake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderStake.Merge(m, src)
}
func (m *ProviderStake) XXX_Size() int {
	return m.Size()
}
func (m *ProviderStake) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderStake.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderStake proto.InternalMessageInfo

func (m *ProviderStake) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *ProviderStake) GetStake() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Stake
	}
	return nil
}

// ProviderRewards represents rewards for a provider
type ProviderRewards struct {
	Provider string                                      `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Rewards  github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,2,rep,name=rewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"rewards"`
}

func (m *ProviderRewards) Reset()         { *m = ProviderRewards{} }
func (m *ProviderRewards) String() string { return proto.CompactTextString(m) }
func (*ProviderRewards) ProtoMessage()    {}
func (*ProviderRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9cfcdd7c462dde8, []int{10}
}
func (m *ProviderRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProviderRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProviderRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProviderRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderRewards.Merge(m, src)
}
func (m *ProviderRewards) XXX_Size() int {
	return m.Size()
}
func (m *ProviderRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderRewards.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderRewards proto.InternalMessageInfo

func (m *ProviderRewards) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *ProviderRewards) GetRewards() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.Rewards
	}
	return nil
}

// Merkle proof
type Proof struct {
	Hashes [][]byte `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty"`
	Index  uint64   `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *Proof) Reset()         { *m = Proof{} }
func (m *Proof) String() string { return proto.CompactTextString(m) }
func (*Proof) ProtoMessage()    {}
func (*Proof) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9cfcdd7c462dde8, []int{11}
}
func (m *Proof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proof.Merge(m, src)
}
func (m *Proof) XXX_Size() int {
	return m.Size()
}
func (m *Proof) XXX_DiscardUnknown() {
	xxx_messageInfo_Proof.DiscardUnknown(m)
}

var xxx_messageInfo_Proof proto.InternalMessageInfo

func (m *Proof) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

func (m *Proof) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

// CidReferenceCount represents the number of times a CID is referenced
type CidReferenceCount struct {
	Cid   string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	Count uint64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *CidReferenceCount) Reset()         { *m = CidReferenceCount{} }
func (m *CidReferenceCount) String() string { return proto.CompactTextString(m) }
func (*CidReferenceCount) ProtoMessage()    {}
func (*CidReferenceCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9cfcdd7c462dde8, []int{12}
}
func (m *CidReferenceCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CidReferenceCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CidReferenceCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CidReferenceCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CidReferenceCount.Merge(m, src)
}
func (m *CidReferenceCount) XXX_Size() int {
	return m.Size()
}
func (m *CidReferenceCount) XXX_DiscardUnknown() {
	xxx_messageInfo_CidReferenceCount.DiscardUnknown(m)
}

var xxx_messageInfo_CidReferenceCount proto.InternalMessageInfo

func (m *CidReferenceCount) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *CidReferenceCount) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// StorageStats represents storage statistics broken down by type
type StorageStats struct {
	TotalPackfileSize     uint64 `protobuf:"varint,1,opt,name=total_packfile_size,json=totalPackfileSize,proto3" json:"total_packfile_size,omitempty"`
	TotalReleaseAssetSize uint64 `protobuf:"varint,2,opt,name=total_release_asset_size,json=totalReleaseAssetSize,proto3" json:"total_release_asset_size,omitempty"`
	TotalLfsObjectSize    uint64 `protobuf:"varint,3,opt,name=total_lfs_object_size,json=totalLfsObjectSize,proto3" json:"total_lfs_object_size,omitempty"`
}

func (m *StorageStats) Reset()         { *m = StorageStats{} }
func (m *StorageStats) String() string { return proto.CompactTextString(m) }
func (*StorageStats) ProtoMessage()    {}
func (*StorageStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9cfcdd7c462dde8, []int{13}
}
func (m *StorageStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StorageStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StorageStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageStats.Merge(m, src)
}
func (m *StorageStats) XXX_Size() int {
	return m.Size()
}
func (m *StorageStats) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageStats.DiscardUnknown(m)
}

var xxx_messageInfo_StorageStats proto.InternalMessageInfo

func (m *StorageStats) GetTotalPackfileSize() uint64 {
	if m != nil {
		return m.TotalPackfileSize
	}
	return 0
}

func (m *StorageStats) GetTotalReleaseAssetSize() uint64 {
	if m != nil {
		return m.TotalReleaseAssetSize
	}
	return 0
}

func (m *StorageStats) GetTotalLfsObjectSize() uint64 {
	if m != nil {
		return m.TotalLfsObjectSize
	}
	return 0
}

// LivenessWindow represents a sliding window for tracking provider liveness
type LivenessWindow struct {
	Provider                 string   `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	WindowStartBlock         uint64   `protobuf:"varint,2,opt,name=window_start_block,json=windowStartBlock,proto3" json:"window_start_block,omitempty"`
	WindowEndBlock           uint64   `protobuf:"varint,3,opt,name=window_end_block,json=windowEndBlock,proto3" json:"window_end_block,omitempty"`
	MissedBlocks             []uint64 `protobuf:"varint,4,rep,packed,name=missed_blocks,json=missedBlocks,proto3" json:"missed_blocks,omitempty"`
	TotalExpectedSubmissions uint64   `protobuf:"varint,5,opt,name=total_expected_submissions,json=totalExpectedSubmissions,proto3" json:"total_expected_submissions,omitempty"`
	ActualSubmissions        uint64   `protobuf:"varint,6,opt,name=actual_submissions,json=actualSubmissions,proto3" json:"actual_submissions,omitempty"`
}

func (m *LivenessWindow) Reset()         { *m = LivenessWindow{} }
func (m *LivenessWindow) String() string { return proto.CompactTextString(m) }
func (*LivenessWindow) ProtoMessage()    {}
func (*LivenessWindow) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9cfcdd7c462dde8, []int{14}
}
func (m *LivenessWindow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LivenessWindow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LivenessWindow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LivenessWindow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LivenessWindow.Merge(m, src)
}
func (m *LivenessWindow) XXX_Size() int {
	return m.Size()
}
func (m *LivenessWindow) XXX_DiscardUnknown() {
	xxx_messageInfo_LivenessWindow.DiscardUnknown(m)
}

var xxx_messageInfo_LivenessWindow proto.InternalMessageInfo

func (m *LivenessWindow) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *LivenessWindow) GetWindowStartBlock() uint64 {
	if m != nil {
		return m.WindowStartBlock
	}
	return 0
}

func (m *LivenessWindow) GetWindowEndBlock() uint64 {
	if m != nil {
		return m.WindowEndBlock
	}
	return 0
}

func (m *LivenessWindow) GetMissedBlocks() []uint64 {
	if m != nil {
		return m.MissedBlocks
	}
	return nil
}

func (m *LivenessWindow) GetTotalExpectedSubmissions() uint64 {
	if m != nil {
		return m.TotalExpectedSubmissions
	}
	return 0
}

func (m *LivenessWindow) GetActualSubmissions() uint64 {
	if m != nil {
		return m.ActualSubmissions
	}
	return 0
}

// ProviderLivenessInfo tracks comprehensive liveness information for a provider
type ProviderLivenessInfo struct {
	Provider                  string   `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	CurrentWindowStart        uint64   `protobuf:"varint,2,opt,name=current_window_start,json=currentWindowStart,proto3" json:"current_window_start,omitempty"`
	MissedSubmissionsInWindow uint64   `protobuf:"varint,3,opt,name=missed_submissions_in_window,json=missedSubmissionsInWindow,proto3" json:"missed_submissions_in_window,omitempty"`
	TotalSubmissionsInWindow  uint64   `protobuf:"varint,4,opt,name=total_submissions_in_window,json=totalSubmissionsInWindow,proto3" json:"total_submissions_in_window,omitempty"`
	CurrentLivenessRatio      float64  `protobuf:"fixed64,5,opt,name=current_liveness_ratio,json=currentLivenessRatio,proto3" json:"current_liveness_ratio,omitempty"`
	LastSubmissionBlock       uint64   `protobuf:"varint,6,opt,name=last_submission_block,json=lastSubmissionBlock,proto3" json:"last_submission_block,omitempty"`
	RecentMissedBlocks        []uint64 `protobuf:"varint,7,rep,packed,name=recent_missed_blocks,json=recentMissedBlocks,proto3" json:"recent_missed_blocks,omitempty"`
}

func (m *ProviderLivenessInfo) Reset()         { *m = ProviderLivenessInfo{} }
func (m *ProviderLivenessInfo) String() string { return proto.CompactTextString(m) }
func (*ProviderLivenessInfo) ProtoMessage()    {}
func (*ProviderLivenessInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9cfcdd7c462dde8, []int{15}
}
func (m *ProviderLivenessInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProviderLivenessInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProviderLivenessInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProviderLivenessInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderLivenessInfo.Merge(m, src)
}
func (m *ProviderLivenessInfo) XXX_Size() int {
	return m.Size()
}
func (m *ProviderLivenessInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderLivenessInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderLivenessInfo proto.InternalMessageInfo

func (m *ProviderLivenessInfo) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *ProviderLivenessInfo) GetCurrentWindowStart() uint64 {
	if m != nil {
		return m.CurrentWindowStart
	}
	return 0
}

func (m *ProviderLivenessInfo) GetMissedSubmissionsInWindow() uint64 {
	if m != nil {
		return m.MissedSubmissionsInWindow
	}
	return 0
}

func (m *ProviderLivenessInfo) GetTotalSubmissionsInWindow() uint64 {
	if m != nil {
		return m.TotalSubmissionsInWindow
	}
	return 0
}

func (m *ProviderLivenessInfo) GetCurrentLivenessRatio() float64 {
	if m != nil {
		return m.CurrentLivenessRatio
	}
	return 0
}

func (m *ProviderLivenessInfo) GetLastSubmissionBlock() uint64 {
	if m != nil {
		return m.LastSubmissionBlock
	}
	return 0
}

func (m *ProviderLivenessInfo) GetRecentMissedBlocks() []uint64 {
	if m != nil {
		return m.RecentMissedBlocks
	}
	return nil
}

func init() {
	proto.RegisterEnum("gitopia.gitopia.storage.ProviderStatus", ProviderStatus_name, ProviderStatus_value)
	proto.RegisterEnum("gitopia.gitopia.storage.ChallengeType", ChallengeType_name, ChallengeType_value)
	proto.RegisterEnum("gitopia.gitopia.storage.ChallengeStatus", ChallengeStatus_name, ChallengeStatus_value)
	proto.RegisterType((*Provider)(nil), "gitopia.gitopia.storage.Provider")
	proto.RegisterType((*Packfile)(nil), "gitopia.gitopia.storage.Packfile")
	proto.RegisterType((*ReleaseAsset)(nil), "gitopia.gitopia.storage.ReleaseAsset")
	proto.RegisterType((*PackfileRepositoryMapping)(nil), "gitopia.gitopia.storage.PackfileRepositoryMapping")
	proto.RegisterType((*ReleaseAssetRepositoryMapping)(nil), "gitopia.gitopia.storage.ReleaseAssetRepositoryMapping")
	proto.RegisterType((*LFSObject)(nil), "gitopia.gitopia.storage.LFSObject")
	proto.RegisterType((*LFSObjectRepositoryMapping)(nil), "gitopia.gitopia.storage.LFSObjectRepositoryMapping")
	proto.RegisterType((*Challenge)(nil), "gitopia.gitopia.storage.Challenge")
	proto.RegisterType((*BlockInfo)(nil), "gitopia.gitopia.storage.BlockInfo")
	proto.RegisterType((*ProviderStake)(nil), "gitopia.gitopia.storage.ProviderStake")
	proto.RegisterType((*ProviderRewards)(nil), "gitopia.gitopia.storage.ProviderRewards")
	proto.RegisterType((*Proof)(nil), "gitopia.gitopia.storage.Proof")
	proto.RegisterType((*CidReferenceCount)(nil), "gitopia.gitopia.storage.CidReferenceCount")
	proto.RegisterType((*StorageStats)(nil), "gitopia.gitopia.storage.StorageStats")
	proto.RegisterType((*LivenessWindow)(nil), "gitopia.gitopia.storage.LivenessWindow")
	proto.RegisterType((*ProviderLivenessInfo)(nil), "gitopia.gitopia.storage.ProviderLivenessInfo")
}

func init() {
	proto.RegisterFile("gitopia/gitopia/storage/types.proto", fileDescriptor_b9cfcdd7c462dde8)
}

var fileDescriptor_b9cfcdd7c462dde8 = []byte{
	// 1847 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x58, 0xcd, 0x6f, 0x23, 0x49,
	0x15, 0x4f, 0xdb, 0xf9, 0xb0, 0x5f, 0x12, 0x8f, 0x53, 0x93, 0x8f, 0xce, 0xc7, 0x24, 0xc1, 0x23,
	0x81, 0x19, 0x18, 0x7b, 0x27, 0xcb, 0x2c, 0x2b, 0xc1, 0xb2, 0xeb, 0x38, 0x9d, 0x59, 0x83, 0x93,
	0x58, 0x6d, 0x67, 0x47, 0x20, 0x44, 0xab, 0xd3, 0x5d, 0xb6, 0x6b, 0xd2, 0xee, 0x6a, 0x75, 0x75,
	0x67, 0x66, 0x38, 0xc1, 0x1f, 0x80, 0xb4, 0x12, 0x88, 0x2b, 0x57, 0xb4, 0x5a, 0x24, 0xae, 0xfc,
	0x07, 0x7b, 0x5c, 0x89, 0x0b, 0x27, 0x16, 0xcd, 0x1c, 0xe0, 0xcf, 0x40, 0xf5, 0xd1, 0x76, 0xdb,
	0xc9, 0x84, 0x64, 0x35, 0x5c, 0xf6, 0x12, 0x77, 0xd5, 0x7b, 0xbf, 0x57, 0xaf, 0x7e, 0xef, 0xd5,
	0xab, 0x57, 0x81, 0xfb, 0x3d, 0x12, 0xd1, 0x80, 0xd8, 0xd5, 0xe4, 0x97, 0x45, 0x34, 0xb4, 0x7b,
	0xb8, 0x1a, 0xbd, 0x0c, 0x30, 0xab, 0x04, 0x21, 0x8d, 0x28, 0x5a, 0x53, 0xc2, 0x4a, 0xf2, 0xab,
	0x94, 0x36, 0x96, 0x7b, 0xb4, 0x47, 0x85, 0x4e, 0x95, 0x7f, 0x49, 0xf5, 0x8d, 0x6d, 0x87, 0xb2,
	0x01, 0x65, 0xd5, 0x33, 0x9b, 0xe1, 0xea, 0xc5, 0xa3, 0x33, 0x1c, 0xd9, 0x8f, 0xaa, 0x0e, 0x25,
	0xbe, 0x92, 0xef, 0xf4, 0x28, 0xed, 0x79, 0xb8, 0x2a, 0x46, 0x67, 0x71, 0xb7, 0x1a, 0x91, 0x01,
	0x66, 0x91, 0x3d, 0x08, 0x94, 0xc2, 0x92, 0x3d, 0x20, 0x3e, 0xad, 0x8a, 0xbf, 0x72, 0xaa, 0xf4,
	0xdb, 0x1c, 0xe4, 0x5a, 0x21, 0xbd, 0x20, 0x2e, 0x0e, 0x91, 0x0e, 0x73, 0x4e, 0x88, 0xed, 0x88,
	0x86, 0xba, 0xb6, 0xab, 0x95, 0xf3, 0x66, 0x32, 0x44, 0x05, 0xc8, 0x10, 0x57, 0xcf, 0xec, 0x6a,
	0xe5, 0x69, 0x33, 0x43, 0x5c, 0xb4, 0x06, 0x73, 0x76, 0x40, 0xac, 0x38, 0xf4, 0xf4, 0xac, 0xd0,
	0x9c, 0xb5, 0x03, 0x72, 0x1a, 0x7a, 0xe8, 0xbb, 0x50, 0x8c, 0x68, 0x64, 0x7b, 0x96, 0xd3, 0xb7,
	0x3d, 0x0f, 0xfb, 0x3d, 0xcc, 0xf4, 0x69, 0x01, 0xbb, 0x23, 0xe6, 0xeb, 0xc3, 0x69, 0xf4, 0x2e,
	0xac, 0xb0, 0xd8, 0x71, 0x30, 0x63, 0xdd, 0x78, 0x4c, 0x7f, 0x46, 0xe8, 0x2f, 0x8f, 0x84, 0x29,
	0xd0, 0x23, 0x58, 0x76, 0xa8, 0xcf, 0xb0, 0x13, 0x47, 0xe4, 0x02, 0x5b, 0x5d, 0x9b, 0x78, 0x71,
	0x88, 0x99, 0x3e, 0x2b, 0x30, 0x77, 0x53, 0xb2, 0x43, 0x25, 0x42, 0x35, 0xc8, 0x3f, 0xa3, 0xc4,
	0xb7, 0x38, 0x1b, 0xfa, 0xdc, 0xae, 0x56, 0x9e, 0xdf, 0xdb, 0xa8, 0x48, 0xaa, 0x2a, 0x09, 0x55,
	0x95, 0x4e, 0x42, 0xd5, 0x7e, 0xee, 0x8b, 0x7f, 0xee, 0x4c, 0x7d, 0xfa, 0xd5, 0x8e, 0x66, 0xe6,
	0x38, 0x8c, 0x0b, 0xd0, 0x2f, 0x61, 0x2d, 0xf6, 0x59, 0x64, 0x9f, 0x63, 0xcb, 0xa1, 0x83, 0xc0,
	0xc3, 0x11, 0xa1, 0xca, 0x60, 0xee, 0x46, 0x06, 0x35, 0x61, 0x70, 0x45, 0x19, 0xa9, 0x0f, 0x6d,
	0x08, 0xeb, 0x3a, 0xcc, 0x0d, 0xa8, 0x4f, 0xce, 0x71, 0xa8, 0xe7, 0x25, 0xed, 0x6a, 0x88, 0x3e,
	0x84, 0x59, 0x16, 0xd9, 0x51, 0xcc, 0x74, 0xd8, 0xd5, 0xca, 0x85, 0xbd, 0xef, 0x54, 0xde, 0x90,
	0x31, 0x95, 0x24, 0x86, 0x6d, 0xa1, 0x6e, 0x2a, 0x18, 0xfa, 0x00, 0x36, 0x49, 0xd0, 0x65, 0x96,
	0xe3, 0xc5, 0x2c, 0xc2, 0xa1, 0x15, 0x60, 0x1c, 0x5a, 0x83, 0xd8, 0x8b, 0x88, 0xed, 0xba, 0xa1,
	0x3e, 0x2f, 0x96, 0xd3, 0xb9, 0x4a, 0x5d, 0x6a, 0xb4, 0x30, 0x0e, 0x8f, 0x12, 0x39, 0x7a, 0x0a,
	0x6b, 0x01, 0xf6, 0x5d, 0xe2, 0xf7, 0x2c, 0x17, 0xf3, 0x5c, 0x60, 0xd8, 0xb2, 0x07, 0x34, 0xf6,
	0x23, 0x7d, 0x41, 0xec, 0x7b, 0xbd, 0x22, 0x73, 0xb2, 0xc2, 0x73, 0xb2, 0xa2, 0x72, 0xb2, 0x52,
	0xa7, 0xc4, 0xdf, 0x9f, 0xe6, 0xdb, 0x36, 0x57, 0x14, 0xfe, 0x40, 0xc1, 0x6b, 0x02, 0x8d, 0x7e,
	0x05, 0xfa, 0xd0, 0xe0, 0x24, 0xa3, 0x8b, 0xb7, 0x60, 0x74, 0x35, 0xb1, 0x32, 0x41, 0xe9, 0x2a,
	0xcc, 0x3e, 0xb3, 0x89, 0x87, 0x5d, 0xbd, 0xb0, 0xab, 0x95, 0x73, 0xa6, 0x1a, 0xa1, 0x3a, 0x00,
	0xff, 0xb2, 0x62, 0x3f, 0x22, 0x9e, 0x7e, 0xe7, 0x16, 0x2b, 0xe5, 0x39, 0xee, 0x94, 0xc3, 0xd0,
	0x4f, 0x60, 0x33, 0x9d, 0x83, 0x1e, 0xb9, 0xc0, 0x3e, 0x66, 0xcc, 0xea, 0xda, 0xb1, 0x17, 0x31,
	0xbd, 0x28, 0x52, 0x71, 0x3d, 0xa5, 0xd2, 0x54, 0x1a, 0x87, 0x42, 0x01, 0xbd, 0x0f, 0x7a, 0x1a,
	0x1f, 0x84, 0x94, 0x76, 0x13, 0xf0, 0x92, 0x00, 0xaf, 0xa6, 0xe4, 0x2d, 0x2e, 0x56, 0xc8, 0x0e,
	0xdc, 0xf5, 0x6c, 0x16, 0x8d, 0x96, 0x74, 0xfa, 0xd8, 0x39, 0xd7, 0xd1, 0x2d, 0xf6, 0xb1, 0xc4,
	0x0d, 0x24, 0x0e, 0xd5, 0x39, 0xbc, 0xf4, 0xf7, 0x0c, 0xe4, 0x5a, 0xb6, 0x73, 0xde, 0x25, 0x1e,
	0xbe, 0x45, 0x0d, 0xb8, 0x0f, 0x8b, 0x21, 0x0e, 0x28, 0x23, 0x11, 0x0d, 0x5f, 0x5a, 0xc4, 0x15,
	0x95, 0x60, 0xda, 0x5c, 0x18, 0x4d, 0x36, 0x5c, 0x84, 0x60, 0xda, 0xb7, 0x07, 0x58, 0xd4, 0x80,
	0xbc, 0x29, 0xbe, 0xf9, 0x1c, 0x23, 0xbf, 0xc6, 0xea, 0x9c, 0x8b, 0x6f, 0x54, 0x84, 0xac, 0x43,
	0x5c, 0x71, 0x8c, 0xf3, 0x26, 0xff, 0x44, 0x9b, 0x90, 0x0f, 0x29, 0x8d, 0xac, 0xbe, 0xcd, 0xfa,
	0xe2, 0xd8, 0x2e, 0x98, 0x39, 0x3e, 0xf1, 0xb1, 0xcd, 0xfa, 0x3c, 0x8e, 0xc2, 0x2d, 0xec, 0x5a,
	0x76, 0x74, 0xc3, 0x33, 0x28, 0x0f, 0x75, 0x5e, 0xe1, 0x6a, 0x11, 0x37, 0x12, 0x07, 0x6e, 0x62,
	0x24, 0x7f, 0x1b, 0x23, 0x0a, 0x57, 0x8b, 0x78, 0x25, 0xa4, 0x9e, 0x6b, 0x71, 0xe7, 0x41, 0x56,
	0x42, 0xea, 0xb9, 0x75, 0xe2, 0x96, 0xfe, 0x93, 0x81, 0x05, 0x13, 0x7b, 0x22, 0xe9, 0x19, 0xc3,
	0xd1, 0xdb, 0x66, 0xb6, 0x08, 0xd9, 0xc8, 0xee, 0x29, 0x62, 0xf9, 0xe7, 0x90, 0xeb, 0x99, 0x2b,
	0xb8, 0x9e, 0xbd, 0xcc, 0xf5, 0xdc, 0x1b, 0xb8, 0xce, 0x4d, 0x70, 0xbd, 0x0a, 0xb3, 0xac, 0x6f,
	0xef, 0x3d, 0x7e, 0x4f, 0x55, 0x27, 0x35, 0x9a, 0x88, 0x01, 0xbc, 0x8d, 0x18, 0xcc, 0x7f, 0xad,
	0x18, 0x94, 0x6c, 0x58, 0x4f, 0xf2, 0xd7, 0x1c, 0x52, 0x74, 0x64, 0x07, 0x01, 0xf1, 0x7b, 0x68,
	0x07, 0xe6, 0x03, 0x25, 0xe4, 0x54, 0x6a, 0x82, 0x08, 0x48, 0xa6, 0x1a, 0x57, 0xb0, 0x9d, 0xb9,
	0xcc, 0x76, 0xe9, 0x0f, 0x1a, 0xdc, 0x4b, 0x47, 0xf3, 0xf2, 0x3a, 0x65, 0x28, 0x86, 0x52, 0xc1,
	0xb2, 0xb9, 0xc6, 0x68, 0xb1, 0x42, 0x98, 0x02, 0xde, 0x70, 0xc1, 0x24, 0xbc, 0xd9, 0xcb, 0xe1,
	0x4d, 0x1d, 0xa5, 0xd2, 0xdf, 0x32, 0x90, 0x6f, 0x1e, 0xb6, 0x4f, 0xce, 0x9e, 0x61, 0xe7, 0xff,
	0x91, 0x61, 0x94, 0xb8, 0x49, 0x86, 0x51, 0xe2, 0x7e, 0xa3, 0x4e, 0x6e, 0xe9, 0x39, 0x6c, 0x0c,
	0xa9, 0xbb, 0x1c, 0xce, 0x12, 0x2c, 0x7a, 0x5d, 0x66, 0x51, 0x21, 0x1e, 0xc5, 0x72, 0xde, 0xeb,
	0x32, 0x09, 0xb9, 0x45, 0x20, 0xa9, 0x22, 0x58, 0xb2, 0x58, 0xfa, 0x3c, 0x0b, 0xf9, 0x61, 0x4b,
	0xa3, 0x42, 0xa3, 0x0d, 0x43, 0xb3, 0x01, 0xb9, 0x40, 0x5d, 0xe6, 0xc2, 0x5e, 0xde, 0x1c, 0x8e,
	0xd1, 0x11, 0x14, 0x86, 0x7d, 0x92, 0xc5, 0x3b, 0x49, 0x61, 0xb6, 0xb0, 0xf7, 0xed, 0x37, 0xf6,
	0x05, 0xc3, 0x75, 0x3a, 0x2f, 0x03, 0x6c, 0x2e, 0x3a, 0xe9, 0x21, 0xba, 0x07, 0xe0, 0x50, 0x3f,
	0xc2, 0xbe, 0xd8, 0xa0, 0x6c, 0xd3, 0xf2, 0x6a, 0xa6, 0x31, 0x11, 0xc7, 0x99, 0x89, 0x38, 0xee,
	0xc0, 0xbc, 0xd3, 0x8f, 0xfd, 0x73, 0x8b, 0xf8, 0x2e, 0x7e, 0xa1, 0xea, 0x0b, 0x88, 0xa9, 0x06,
	0x9f, 0x99, 0x08, 0xf4, 0xdc, 0xd7, 0x0b, 0xf4, 0x47, 0x90, 0x73, 0xb1, 0xed, 0x7a, 0xc4, 0xc7,
	0xb7, 0xca, 0x95, 0x21, 0x0a, 0x7d, 0x34, 0x6c, 0xa1, 0xf2, 0x82, 0xaa, 0xf2, 0xff, 0xa6, 0x6a,
	0xbc, 0x87, 0x2a, 0xf5, 0x20, 0xbf, 0xef, 0x51, 0xe7, 0xbc, 0xe1, 0x77, 0x29, 0x2f, 0x86, 0x7d,
	0x4c, 0x7a, 0xfd, 0x48, 0x44, 0x6c, 0xd1, 0x54, 0x23, 0xb4, 0x0f, 0xf9, 0x61, 0xb7, 0x2d, 0xc2,
	0x76, 0xe3, 0xcd, 0x0e, 0x61, 0xa5, 0xdf, 0x6b, 0xb0, 0x98, 0xea, 0xe3, 0xce, 0xf1, 0x58, 0x2e,
	0x68, 0x13, 0xb9, 0xd0, 0x85, 0x19, 0xd1, 0x4c, 0xea, 0x99, 0xdd, 0xec, 0xf5, 0x9d, 0xd8, 0x63,
	0xbe, 0xd8, 0x67, 0x5f, 0xed, 0x94, 0x7b, 0x24, 0xea, 0xc7, 0x67, 0x15, 0x87, 0x0e, 0xaa, 0xea,
	0x29, 0x21, 0x7f, 0x1e, 0x32, 0xf7, 0x5c, 0x3d, 0x4c, 0x38, 0x80, 0xfd, 0xf9, 0xdf, 0x7f, 0x7d,
	0xa0, 0x99, 0xd2, 0x7c, 0xe9, 0x4f, 0x1a, 0xdc, 0x49, 0xbc, 0x32, 0xf1, 0x73, 0x3b, 0x74, 0xd9,
	0xb5, 0x7e, 0x05, 0x30, 0x17, 0x4a, 0x35, 0xe5, 0xd9, 0xd6, 0x95, 0x9e, 0x1d, 0x60, 0x47, 0x38,
	0xf7, 0xbe, 0x72, 0xee, 0x7b, 0x37, 0x70, 0x4e, 0x61, 0x94, 0x7f, 0xc9, 0x32, 0xa5, 0xc7, 0x30,
	0x23, 0x9a, 0x24, 0x11, 0x1c, 0x9b, 0xf5, 0x31, 0xd3, 0xb5, 0xdd, 0x6c, 0x79, 0xc1, 0x54, 0x23,
	0xb4, 0x0c, 0x33, 0x32, 0x4b, 0xe5, 0xf9, 0x94, 0x83, 0xd2, 0x8f, 0x60, 0xa9, 0x4e, 0x5c, 0x13,
	0x77, 0x71, 0x88, 0x7d, 0x07, 0xd7, 0x45, 0x63, 0xaa, 0xaa, 0x99, 0x36, 0xaa, 0x66, 0xcb, 0x30,
	0xe3, 0x88, 0x8e, 0x57, 0x81, 0xc5, 0xa0, 0xf4, 0x99, 0x06, 0x0b, 0x6d, 0x99, 0x38, 0x3c, 0x5d,
	0x18, 0xaa, 0xc0, 0x5d, 0xf9, 0xf0, 0x19, 0x5e, 0x36, 0xa2, 0x52, 0xca, 0x73, 0xbd, 0x24, 0x44,
	0xc9, 0x1d, 0xd5, 0xe6, 0x65, 0xf3, 0x87, 0xa0, 0x4b, 0xfd, 0xf1, 0x4b, 0x43, 0x80, 0xe4, 0x4a,
	0x2b, 0x42, 0x9e, 0xbe, 0x74, 0x04, 0xf0, 0x11, 0x48, 0x81, 0x95, 0x2a, 0x4f, 0x02, 0x25, 0x4b,
	0x38, 0x12, 0xc2, 0x66, 0x52, 0xa5, 0x38, 0xa4, 0xf4, 0xc7, 0x0c, 0x14, 0x92, 0x96, 0xef, 0x29,
	0xf1, 0x5d, 0xfa, 0xfc, 0xda, 0x08, 0x7e, 0x1f, 0xd0, 0x73, 0xa1, 0x65, 0xb1, 0xc8, 0x0e, 0x23,
	0xeb, 0x8c, 0x67, 0xbf, 0x72, 0xaa, 0x28, 0x25, 0x6d, 0x2e, 0x10, 0xa7, 0x82, 0xdf, 0x7b, 0x4a,
	0x1b, 0xfb, 0xae, 0xd2, 0x95, 0xae, 0x14, 0xe4, 0xbc, 0xe1, 0xbb, 0x52, 0xf3, 0x3e, 0x2c, 0x0e,
	0x08, 0x63, 0x58, 0x69, 0xf1, 0x87, 0x61, 0x96, 0x97, 0x4b, 0x39, 0x29, 0x74, 0x18, 0xfa, 0x31,
	0x6c, 0xc8, 0xed, 0xe1, 0x17, 0x01, 0x76, 0x78, 0xf5, 0x60, 0xf1, 0x19, 0xd7, 0x20, 0xd4, 0x4f,
	0x9e, 0x86, 0x92, 0x39, 0x43, 0x29, 0xb4, 0x47, 0x72, 0xf4, 0x10, 0x90, 0xed, 0x44, 0xb1, 0xed,
	0x8d, 0xa1, 0x64, 0x71, 0x5a, 0x92, 0x92, 0x94, 0x7a, 0xe9, 0x37, 0x59, 0x58, 0x4e, 0x72, 0x3b,
	0x21, 0x48, 0x1c, 0xf3, 0xeb, 0xe8, 0x79, 0x07, 0x96, 0x9d, 0x38, 0x0c, 0x79, 0xd5, 0x4c, 0xd3,
	0xa4, 0x08, 0x42, 0x4a, 0xf6, 0x74, 0xc4, 0x13, 0xfa, 0x10, 0xb6, 0xd4, 0xc6, 0x53, 0x5e, 0x59,
	0xc4, 0x57, 0x78, 0x45, 0xd7, 0xba, 0xd4, 0x49, 0xf9, 0xd7, 0xf0, 0x55, 0xb4, 0x3e, 0x80, 0x4d,
	0x49, 0xca, 0xd5, 0xf8, 0xe9, 0x14, 0x2b, 0x57, 0xc1, 0x7f, 0x00, 0xab, 0x89, 0xc7, 0xc3, 0x97,
	0x43, 0x68, 0x47, 0x84, 0x0a, 0x3e, 0x35, 0x33, 0xd9, 0x4f, 0x42, 0x81, 0xc9, 0x65, 0x68, 0x0f,
	0x56, 0xc4, 0x63, 0x63, 0xb4, 0xa6, 0x8a, 0xae, 0x7a, 0x6b, 0x73, 0xe1, 0x68, 0x35, 0x19, 0xe2,
	0x77, 0x60, 0x39, 0xc4, 0x0e, 0x5f, 0x68, 0x3c, 0xd2, 0x73, 0x22, 0xd2, 0x48, 0xca, 0x8e, 0x52,
	0xf1, 0x7e, 0xf0, 0x17, 0x0d, 0x0a, 0xe3, 0x8f, 0x57, 0xb4, 0x03, 0x9b, 0x2d, 0xf3, 0xe4, 0x93,
	0xc6, 0x81, 0x61, 0x5a, 0xed, 0x4e, 0xad, 0x73, 0xda, 0xb6, 0x4e, 0x8f, 0xdb, 0x2d, 0xa3, 0xde,
	0x38, 0x6c, 0x18, 0x07, 0xc5, 0x29, 0xb4, 0x01, 0xab, 0x93, 0x0a, 0xb5, 0x7a, 0xa7, 0xf1, 0x89,
	0x51, 0xd4, 0xd0, 0x16, 0xe8, 0x93, 0xb2, 0xc6, 0xb1, 0x92, 0x66, 0xd0, 0x3d, 0x58, 0x9f, 0x94,
	0xb6, 0x4f, 0xdb, 0x2d, 0xe3, 0xf8, 0xc0, 0x38, 0x28, 0x66, 0xd1, 0xb7, 0xe0, 0xde, 0xe5, 0x95,
	0x4d, 0xe3, 0x49, 0xa3, 0xdd, 0x31, 0xcc, 0xc6, 0xf1, 0x93, 0xe2, 0xf4, 0x83, 0xdf, 0x69, 0xb0,
	0x38, 0x76, 0xa9, 0xa2, 0x6d, 0xd8, 0xa8, 0x7f, 0x5c, 0x6b, 0x36, 0x8d, 0xe3, 0x27, 0x86, 0xd5,
	0xf9, 0x79, 0xcb, 0x98, 0xf0, 0x76, 0x13, 0xd6, 0x26, 0xe4, 0xad, 0x5a, 0xfd, 0x67, 0x87, 0x8d,
	0x26, 0x77, 0x77, 0x17, 0xb6, 0x26, 0x84, 0xa6, 0xd1, 0x34, 0x6a, 0x6d, 0xc3, 0xaa, 0xb5, 0xdb,
	0x46, 0x47, 0xba, 0x3c, 0xa1, 0xd1, 0x3c, 0x6c, 0x5b, 0x27, 0xfb, 0x3f, 0x35, 0xea, 0x9d, 0x62,
	0xf6, 0xc1, 0xe7, 0x1a, 0xdc, 0x99, 0xb8, 0xb9, 0xc6, 0x8d, 0x5e, 0xc9, 0xe0, 0x16, 0xe8, 0x97,
	0x34, 0x38, 0x0b, 0x7c, 0x8f, 0xda, 0xf8, 0x8e, 0x94, 0xb4, 0x7e, 0x72, 0xd4, 0x6a, 0x1a, 0x1d,
	0xe3, 0xa0, 0x98, 0x19, 0xdf, 0x91, 0x92, 0x1f, 0xd6, 0x1a, 0x4d, 0xc1, 0xe1, 0x55, 0xa6, 0x3b,
	0x8d, 0x23, 0xe3, 0xe4, 0xb4, 0x53, 0x9c, 0xde, 0x7f, 0xf2, 0xc5, 0xab, 0x6d, 0xed, 0xcb, 0x57,
	0xdb, 0xda, 0xbf, 0x5e, 0x6d, 0x6b, 0x9f, 0xbe, 0xde, 0x9e, 0xfa, 0xf2, 0xf5, 0xf6, 0xd4, 0x3f,
	0x5e, 0x6f, 0x4f, 0xfd, 0xe2, 0x61, 0xea, 0x02, 0x98, 0xfc, 0xe7, 0xd9, 0xc5, 0x7b, 0xd5, 0x17,
	0xe3, 0xff, 0x41, 0x3b, 0x9b, 0x15, 0xb7, 0xea, 0xbb, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xea,
	0x35, 0x6d, 0x5a, 0x69, 0x13, 0x00, 0x00,
}

func (m *Provider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Provider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Provider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastLivenessCheck != nil {
		n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.LastLivenessCheck, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.LastLivenessCheck):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintTypes(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.ConsecutiveProofFaults != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ConsecutiveProofFaults))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.ConsecutiveLivenessFaults != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ConsecutiveLivenessFaults))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.JailUntil != nil {
		n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.JailUntil, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.JailUntil):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintTypes(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x7a
	}
	if m.Jailed {
		i--
		if m.Jailed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.DecreaseCompletionTime != nil {
		n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.DecreaseCompletionTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.DecreaseCompletionTime):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintTypes(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x6a
	}
	if m.PendingDecreaseAmount != nil {
		{
			size, err := m.PendingDecreaseAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.IpfsClusterPeerMultiaddr) > 0 {
		i -= len(m.IpfsClusterPeerMultiaddr)
		copy(dAtA[i:], m.IpfsClusterPeerMultiaddr)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.IpfsClusterPeerMultiaddr)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0x4a
	}
	if m.UnstakeCompletionTime != nil {
		n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.UnstakeCompletionTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.UnstakeCompletionTime):])
		if err5 != nil {
			return 0, err5
		}
		i -= n5
		i = encodeVarintTypes(dAtA, i, uint64(n5))
		i--
		dAtA[i] = 0x42
	}
	n6, err6 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.JoinTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.JoinTime):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintTypes(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x3a
	if m.ConsecutiveFailures != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ConsecutiveFailures))
		i--
		dAtA[i] = 0x30
	}
	if m.SuccessfulChallenges != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SuccessfulChallenges))
		i--
		dAtA[i] = 0x28
	}
	if m.TotalChallenges != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TotalChallenges))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ApiUrl) > 0 {
		i -= len(m.ApiUrl)
		copy(dAtA[i:], m.ApiUrl)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ApiUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Packfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Packfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Packfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OldCid) > 0 {
		i -= len(m.OldCid)
		copy(dAtA[i:], m.OldCid)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OldCid)))
		i--
		dAtA[i] = 0x52
	}
	n7, err7 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UpdatedAt):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintTypes(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x4a
	n8, err8 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintTypes(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x42
	if len(m.RootHash) > 0 {
		i -= len(m.RootHash)
		copy(dAtA[i:], m.RootHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RootHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x32
	}
	if m.Size_ != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.RepositoryId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RepositoryId))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReleaseAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReleaseAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReleaseAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n9, err9 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UpdatedAt):])
	if err9 != nil {
		return 0, err9
	}
	i -= n9
	i = encodeVarintTypes(dAtA, i, uint64(n9))
	i--
	dAtA[i] = 0x5a
	n10, err10 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt):])
	if err10 != nil {
		return 0, err10
	}
	i -= n10
	i = encodeVarintTypes(dAtA, i, uint64(n10))
	i--
	dAtA[i] = 0x52
	if len(m.Sha256) > 0 {
		i -= len(m.Sha256)
		copy(dAtA[i:], m.Sha256)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Sha256)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.RootHash) > 0 {
		i -= len(m.RootHash)
		copy(dAtA[i:], m.RootHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RootHash)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Size_ != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x22
	}
	if m.RepositoryId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RepositoryId))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PackfileRepositoryMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PackfileRepositoryMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PackfileRepositoryMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RepositoryId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RepositoryId))
		i--
		dAtA[i] = 0x10
	}
	if m.PackfileId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PackfileId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReleaseAssetRepositoryMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReleaseAssetRepositoryMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReleaseAssetRepositoryMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RepositoryId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RepositoryId))
		i--
		dAtA[i] = 0x10
	}
	if m.ReleaseAssetId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ReleaseAssetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LFSObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LFSObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LFSObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n11, err11 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UpdatedAt):])
	if err11 != nil {
		return 0, err11
	}
	i -= n11
	i = encodeVarintTypes(dAtA, i, uint64(n11))
	i--
	dAtA[i] = 0x4a
	n12, err12 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt):])
	if err12 != nil {
		return 0, err12
	}
	i -= n12
	i = encodeVarintTypes(dAtA, i, uint64(n12))
	i--
	dAtA[i] = 0x42
	if len(m.RootHash) > 0 {
		i -= len(m.RootHash)
		copy(dAtA[i:], m.RootHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RootHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x32
	}
	if m.Size_ != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Oid) > 0 {
		i -= len(m.Oid)
		copy(dAtA[i:], m.Oid)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Oid)))
		i--
		dAtA[i] = 0x22
	}
	if m.RepositoryId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RepositoryId))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LFSObjectRepositoryMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LFSObjectRepositoryMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LFSObjectRepositoryMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Oid) > 0 {
		i -= len(m.Oid)
		copy(dAtA[i:], m.Oid)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Oid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RepositoryId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RepositoryId))
		i--
		dAtA[i] = 0x10
	}
	if m.LfsObjectId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LfsObjectId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Challenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Challenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Challenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	n13, err13 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Deadline, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Deadline):])
	if err13 != nil {
		return 0, err13
	}
	i -= n13
	i = encodeVarintTypes(dAtA, i, uint64(n13))
	i--
	dAtA[i] = 0x42
	n14, err14 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt):])
	if err14 != nil {
		return 0, err14
	}
	i -= n14
	i = encodeVarintTypes(dAtA, i, uint64(n14))
	i--
	dAtA[i] = 0x3a
	if m.ChunkIndex != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ChunkIndex))
		i--
		dAtA[i] = 0x30
	}
	if len(m.RootHash) > 0 {
		i -= len(m.RootHash)
		copy(dAtA[i:], m.RootHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RootHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ContentId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ContentId))
		i--
		dAtA[i] = 0x20
	}
	if m.ChallengeType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ChallengeType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n15, err15 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp):])
	if err15 != nil {
		return 0, err15
	}
	i -= n15
	i = encodeVarintTypes(dAtA, i, uint64(n15))
	i--
	dAtA[i] = 0x12
	if m.Height != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProviderStake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProviderStake) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProviderStake) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stake) > 0 {
		for iNdEx := len(m.Stake) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stake[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProviderRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProviderRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProviderRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Proof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Hashes) > 0 {
		for iNdEx := len(m.Hashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Hashes[iNdEx])
			copy(dAtA[i:], m.Hashes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Hashes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CidReferenceCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CidReferenceCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CidReferenceCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StorageStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalLfsObjectSize != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TotalLfsObjectSize))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalReleaseAssetSize != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TotalReleaseAssetSize))
		i--
		dAtA[i] = 0x10
	}
	if m.TotalPackfileSize != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TotalPackfileSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LivenessWindow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LivenessWindow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LivenessWindow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActualSubmissions != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ActualSubmissions))
		i--
		dAtA[i] = 0x30
	}
	if m.TotalExpectedSubmissions != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TotalExpectedSubmissions))
		i--
		dAtA[i] = 0x28
	}
	if len(m.MissedBlocks) > 0 {
		dAtA17 := make([]byte, len(m.MissedBlocks)*10)
		var j16 int
		for _, num := range m.MissedBlocks {
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		i -= j16
		copy(dAtA[i:], dAtA17[:j16])
		i = encodeVarintTypes(dAtA, i, uint64(j16))
		i--
		dAtA[i] = 0x22
	}
	if m.WindowEndBlock != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.WindowEndBlock))
		i--
		dAtA[i] = 0x18
	}
	if m.WindowStartBlock != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.WindowStartBlock))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProviderLivenessInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProviderLivenessInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProviderLivenessInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecentMissedBlocks) > 0 {
		dAtA19 := make([]byte, len(m.RecentMissedBlocks)*10)
		var j18 int
		for _, num := range m.RecentMissedBlocks {
			for num >= 1<<7 {
				dAtA19[j18] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j18++
			}
			dAtA19[j18] = uint8(num)
			j18++
		}
		i -= j18
		copy(dAtA[i:], dAtA19[:j18])
		i = encodeVarintTypes(dAtA, i, uint64(j18))
		i--
		dAtA[i] = 0x3a
	}
	if m.LastSubmissionBlock != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LastSubmissionBlock))
		i--
		dAtA[i] = 0x30
	}
	if m.CurrentLivenessRatio != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CurrentLivenessRatio))))
		i--
		dAtA[i] = 0x29
	}
	if m.TotalSubmissionsInWindow != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TotalSubmissionsInWindow))
		i--
		dAtA[i] = 0x20
	}
	if m.MissedSubmissionsInWindow != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MissedSubmissionsInWindow))
		i--
		dAtA[i] = 0x18
	}
	if m.CurrentWindowStart != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CurrentWindowStart))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Provider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	l = len(m.ApiUrl)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TotalChallenges != 0 {
		n += 1 + sovTypes(uint64(m.TotalChallenges))
	}
	if m.SuccessfulChallenges != 0 {
		n += 1 + sovTypes(uint64(m.SuccessfulChallenges))
	}
	if m.ConsecutiveFailures != 0 {
		n += 1 + sovTypes(uint64(m.ConsecutiveFailures))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.JoinTime)
	n += 1 + l + sovTypes(uint64(l))
	if m.UnstakeCompletionTime != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.UnstakeCompletionTime)
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	l = len(m.IpfsClusterPeerMultiaddr)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PendingDecreaseAmount != nil {
		l = m.PendingDecreaseAmount.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DecreaseCompletionTime != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.DecreaseCompletionTime)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Jailed {
		n += 2
	}
	if m.JailUntil != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.JailUntil)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ConsecutiveLivenessFaults != 0 {
		n += 2 + sovTypes(uint64(m.ConsecutiveLivenessFaults))
	}
	if m.ConsecutiveProofFaults != 0 {
		n += 2 + sovTypes(uint64(m.ConsecutiveProofFaults))
	}
	if m.LastLivenessCheck != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.LastLivenessCheck)
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Packfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	if m.RepositoryId != 0 {
		n += 1 + sovTypes(uint64(m.RepositoryId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovTypes(uint64(m.Size_))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.RootHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovTypes(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.OldCid)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReleaseAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	if m.RepositoryId != 0 {
		n += 1 + sovTypes(uint64(m.RepositoryId))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovTypes(uint64(m.Size_))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.RootHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Sha256)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovTypes(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *PackfileRepositoryMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PackfileId != 0 {
		n += 1 + sovTypes(uint64(m.PackfileId))
	}
	if m.RepositoryId != 0 {
		n += 1 + sovTypes(uint64(m.RepositoryId))
	}
	return n
}

func (m *ReleaseAssetRepositoryMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReleaseAssetId != 0 {
		n += 1 + sovTypes(uint64(m.ReleaseAssetId))
	}
	if m.RepositoryId != 0 {
		n += 1 + sovTypes(uint64(m.RepositoryId))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *LFSObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	if m.RepositoryId != 0 {
		n += 1 + sovTypes(uint64(m.RepositoryId))
	}
	l = len(m.Oid)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovTypes(uint64(m.Size_))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.RootHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovTypes(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *LFSObjectRepositoryMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LfsObjectId != 0 {
		n += 1 + sovTypes(uint64(m.LfsObjectId))
	}
	if m.RepositoryId != 0 {
		n += 1 + sovTypes(uint64(m.RepositoryId))
	}
	l = len(m.Oid)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Challenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ChallengeType != 0 {
		n += 1 + sovTypes(uint64(m.ChallengeType))
	}
	if m.ContentId != 0 {
		n += 1 + sovTypes(uint64(m.ContentId))
	}
	l = len(m.RootHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ChunkIndex != 0 {
		n += 1 + sovTypes(uint64(m.ChunkIndex))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovTypes(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Deadline)
	n += 1 + l + sovTypes(uint64(l))
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	return n
}

func (m *BlockInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovTypes(uint64(m.Height))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *ProviderStake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Stake) > 0 {
		for _, e := range m.Stake {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ProviderRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Proof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Hashes) > 0 {
		for _, b := range m.Hashes {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Index != 0 {
		n += 1 + sovTypes(uint64(m.Index))
	}
	return n
}

func (m *CidReferenceCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovTypes(uint64(m.Count))
	}
	return n
}

func (m *StorageStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalPackfileSize != 0 {
		n += 1 + sovTypes(uint64(m.TotalPackfileSize))
	}
	if m.TotalReleaseAssetSize != 0 {
		n += 1 + sovTypes(uint64(m.TotalReleaseAssetSize))
	}
	if m.TotalLfsObjectSize != 0 {
		n += 1 + sovTypes(uint64(m.TotalLfsObjectSize))
	}
	return n
}

func (m *LivenessWindow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WindowStartBlock != 0 {
		n += 1 + sovTypes(uint64(m.WindowStartBlock))
	}
	if m.WindowEndBlock != 0 {
		n += 1 + sovTypes(uint64(m.WindowEndBlock))
	}
	if len(m.MissedBlocks) > 0 {
		l = 0
		for _, e := range m.MissedBlocks {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if m.TotalExpectedSubmissions != 0 {
		n += 1 + sovTypes(uint64(m.TotalExpectedSubmissions))
	}
	if m.ActualSubmissions != 0 {
		n += 1 + sovTypes(uint64(m.ActualSubmissions))
	}
	return n
}

func (m *ProviderLivenessInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CurrentWindowStart != 0 {
		n += 1 + sovTypes(uint64(m.CurrentWindowStart))
	}
	if m.MissedSubmissionsInWindow != 0 {
		n += 1 + sovTypes(uint64(m.MissedSubmissionsInWindow))
	}
	if m.TotalSubmissionsInWindow != 0 {
		n += 1 + sovTypes(uint64(m.TotalSubmissionsInWindow))
	}
	if m.CurrentLivenessRatio != 0 {
		n += 9
	}
	if m.LastSubmissionBlock != 0 {
		n += 1 + sovTypes(uint64(m.LastSubmissionBlock))
	}
	if len(m.RecentMissedBlocks) > 0 {
		l = 0
		for _, e := range m.RecentMissedBlocks {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Provider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Provider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Provider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalChallenges", wireType)
			}
			m.TotalChallenges = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalChallenges |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessfulChallenges", wireType)
			}
			m.SuccessfulChallenges = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuccessfulChallenges |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsecutiveFailures", wireType)
			}
			m.ConsecutiveFailures = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsecutiveFailures |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.JoinTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakeCompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnstakeCompletionTime == nil {
				m.UnstakeCompletionTime = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.UnstakeCompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ProviderStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpfsClusterPeerMultiaddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpfsClusterPeerMultiaddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingDecreaseAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PendingDecreaseAmount == nil {
				m.PendingDecreaseAmount = &types.Coin{}
			}
			if err := m.PendingDecreaseAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecreaseCompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DecreaseCompletionTime == nil {
				m.DecreaseCompletionTime = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.DecreaseCompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jailed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Jailed = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JailUntil", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JailUntil == nil {
				m.JailUntil = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.JailUntil, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsecutiveLivenessFaults", wireType)
			}
			m.ConsecutiveLivenessFaults = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsecutiveLivenessFaults |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsecutiveProofFaults", wireType)
			}
			m.ConsecutiveProofFaults = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsecutiveProofFaults |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLivenessCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastLivenessCheck == nil {
				m.LastLivenessCheck = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.LastLivenessCheck, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Packfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Packfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Packfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryId", wireType)
			}
			m.RepositoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepositoryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootHash = append(m.RootHash[:0], dAtA[iNdEx:postIndex]...)
			if m.RootHash == nil {
				m.RootHash = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldCid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldCid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReleaseAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReleaseAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReleaseAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryId", wireType)
			}
			m.RepositoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepositoryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootHash = append(m.RootHash[:0], dAtA[iNdEx:postIndex]...)
			if m.RootHash == nil {
				m.RootHash = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha256", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha256 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PackfileRepositoryMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PackfileRepositoryMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PackfileRepositoryMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackfileId", wireType)
			}
			m.PackfileId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PackfileId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryId", wireType)
			}
			m.RepositoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepositoryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReleaseAssetRepositoryMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReleaseAssetRepositoryMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReleaseAssetRepositoryMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseAssetId", wireType)
			}
			m.ReleaseAssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReleaseAssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryId", wireType)
			}
			m.RepositoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepositoryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LFSObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LFSObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LFSObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryId", wireType)
			}
			m.RepositoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepositoryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootHash = append(m.RootHash[:0], dAtA[iNdEx:postIndex]...)
			if m.RootHash == nil {
				m.RootHash = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LFSObjectRepositoryMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LFSObjectRepositoryMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LFSObjectRepositoryMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LfsObjectId", wireType)
			}
			m.LfsObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LfsObjectId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryId", wireType)
			}
			m.RepositoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepositoryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Challenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Challenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Challenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeType", wireType)
			}
			m.ChallengeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeType |= ChallengeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentId", wireType)
			}
			m.ContentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContentId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootHash = append(m.RootHash[:0], dAtA[iNdEx:postIndex]...)
			if m.RootHash == nil {
				m.RootHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkIndex", wireType)
			}
			m.ChunkIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Deadline, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ChallengeStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProviderStake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderStake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderStake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stake = append(m.Stake, types.Coin{})
			if err := m.Stake[len(m.Stake)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProviderRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, types.DecCoin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hashes = append(m.Hashes, make([]byte, postIndex-iNdEx))
			copy(m.Hashes[len(m.Hashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CidReferenceCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CidReferenceCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CidReferenceCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPackfileSize", wireType)
			}
			m.TotalPackfileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPackfileSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalReleaseAssetSize", wireType)
			}
			m.TotalReleaseAssetSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalReleaseAssetSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLfsObjectSize", wireType)
			}
			m.TotalLfsObjectSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalLfsObjectSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LivenessWindow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LivenessWindow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LivenessWindow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindowStartBlock", wireType)
			}
			m.WindowStartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WindowStartBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindowEndBlock", wireType)
			}
			m.WindowEndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WindowEndBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MissedBlocks = append(m.MissedBlocks, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MissedBlocks) == 0 {
					m.MissedBlocks = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MissedBlocks = append(m.MissedBlocks, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MissedBlocks", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalExpectedSubmissions", wireType)
			}
			m.TotalExpectedSubmissions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalExpectedSubmissions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualSubmissions", wireType)
			}
			m.ActualSubmissions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActualSubmissions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProviderLivenessInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderLivenessInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderLivenessInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentWindowStart", wireType)
			}
			m.CurrentWindowStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentWindowStart |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissedSubmissionsInWindow", wireType)
			}
			m.MissedSubmissionsInWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissedSubmissionsInWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSubmissionsInWindow", wireType)
			}
			m.TotalSubmissionsInWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSubmissionsInWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentLivenessRatio", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CurrentLivenessRatio = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSubmissionBlock", wireType)
			}
			m.LastSubmissionBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSubmissionBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RecentMissedBlocks = append(m.RecentMissedBlocks, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RecentMissedBlocks) == 0 {
					m.RecentMissedBlocks = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RecentMissedBlocks = append(m.RecentMissedBlocks, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentMissedBlocks", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
