// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitopia/gitopia/storage/types.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ChallengeStatus represents the status of a challenge
type ChallengeStatus int32

const (
	ChallengeStatus_CHALLENGE_STATUS_UNSPECIFIED ChallengeStatus = 0
	ChallengeStatus_CHALLENGE_STATUS_PENDING     ChallengeStatus = 1
	ChallengeStatus_CHALLENGE_STATUS_COMPLETED   ChallengeStatus = 2
	ChallengeStatus_CHALLENGE_STATUS_FAILED      ChallengeStatus = 3
	ChallengeStatus_CHALLENGE_STATUS_TIMEOUT     ChallengeStatus = 4
)

var ChallengeStatus_name = map[int32]string{
	0: "CHALLENGE_STATUS_UNSPECIFIED",
	1: "CHALLENGE_STATUS_PENDING",
	2: "CHALLENGE_STATUS_COMPLETED",
	3: "CHALLENGE_STATUS_FAILED",
	4: "CHALLENGE_STATUS_TIMEOUT",
}

var ChallengeStatus_value = map[string]int32{
	"CHALLENGE_STATUS_UNSPECIFIED": 0,
	"CHALLENGE_STATUS_PENDING":     1,
	"CHALLENGE_STATUS_COMPLETED":   2,
	"CHALLENGE_STATUS_FAILED":      3,
	"CHALLENGE_STATUS_TIMEOUT":     4,
}

func (x ChallengeStatus) String() string {
	return proto.EnumName(ChallengeStatus_name, int32(x))
}

func (ChallengeStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b9cfcdd7c462dde8, []int{0}
}

// Provider represents a storage provider in the network
type Provider struct {
	Creator              string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id                   uint64     `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Address              string     `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	PeerId               string     `protobuf:"bytes,4,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Multiaddresses       []string   `protobuf:"bytes,5,rep,name=multiaddresses,proto3" json:"multiaddresses,omitempty"`
	Stake                types.Coin `protobuf:"bytes,6,opt,name=stake,proto3" json:"stake"`
	Online               bool       `protobuf:"varint,7,opt,name=online,proto3" json:"online,omitempty"`
	TotalChallenges      uint64     `protobuf:"varint,8,opt,name=total_challenges,json=totalChallenges,proto3" json:"total_challenges,omitempty"`
	SuccessfulChallenges uint64     `protobuf:"varint,9,opt,name=successful_challenges,json=successfulChallenges,proto3" json:"successful_challenges,omitempty"`
	ConsecutiveFailures  uint64     `protobuf:"varint,10,opt,name=consecutive_failures,json=consecutiveFailures,proto3" json:"consecutive_failures,omitempty"`
	JoinTime             time.Time  `protobuf:"bytes,11,opt,name=join_time,json=joinTime,proto3,stdtime" json:"join_time"`
}

func (m *Provider) Reset()         { *m = Provider{} }
func (m *Provider) String() string { return proto.CompactTextString(m) }
func (*Provider) ProtoMessage()    {}
func (*Provider) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9cfcdd7c462dde8, []int{0}
}
func (m *Provider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Provider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Provider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Provider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Provider.Merge(m, src)
}
func (m *Provider) XXX_Size() int {
	return m.Size()
}
func (m *Provider) XXX_DiscardUnknown() {
	xxx_messageInfo_Provider.DiscardUnknown(m)
}

var xxx_messageInfo_Provider proto.InternalMessageInfo

func (m *Provider) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Provider) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Provider) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Provider) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func (m *Provider) GetMultiaddresses() []string {
	if m != nil {
		return m.Multiaddresses
	}
	return nil
}

func (m *Provider) GetStake() types.Coin {
	if m != nil {
		return m.Stake
	}
	return types.Coin{}
}

func (m *Provider) GetOnline() bool {
	if m != nil {
		return m.Online
	}
	return false
}

func (m *Provider) GetTotalChallenges() uint64 {
	if m != nil {
		return m.TotalChallenges
	}
	return 0
}

func (m *Provider) GetSuccessfulChallenges() uint64 {
	if m != nil {
		return m.SuccessfulChallenges
	}
	return 0
}

func (m *Provider) GetConsecutiveFailures() uint64 {
	if m != nil {
		return m.ConsecutiveFailures
	}
	return 0
}

func (m *Provider) GetJoinTime() time.Time {
	if m != nil {
		return m.JoinTime
	}
	return time.Time{}
}

// Packfile represents a Git packfile stored in IPFS
type Packfile struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id           uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	RepositoryId uint64 `protobuf:"varint,3,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Name         string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Size_        uint64 `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	Cid          string `protobuf:"bytes,6,opt,name=cid,proto3" json:"cid,omitempty"`
	RootHash     string `protobuf:"bytes,7,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
}

func (m *Packfile) Reset()         { *m = Packfile{} }
func (m *Packfile) String() string { return proto.CompactTextString(m) }
func (*Packfile) ProtoMessage()    {}
func (*Packfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9cfcdd7c462dde8, []int{1}
}
func (m *Packfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Packfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Packfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Packfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Packfile.Merge(m, src)
}
func (m *Packfile) XXX_Size() int {
	return m.Size()
}
func (m *Packfile) XXX_DiscardUnknown() {
	xxx_messageInfo_Packfile.DiscardUnknown(m)
}

var xxx_messageInfo_Packfile proto.InternalMessageInfo

func (m *Packfile) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Packfile) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Packfile) GetRepositoryId() uint64 {
	if m != nil {
		return m.RepositoryId
	}
	return 0
}

func (m *Packfile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Packfile) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *Packfile) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *Packfile) GetRootHash() string {
	if m != nil {
		return m.RootHash
	}
	return ""
}

// Mapping between packfile id and repository id
type PackfileRepositoryMapping struct {
	PackfileId   uint64 `protobuf:"varint,1,opt,name=packfile_id,json=packfileId,proto3" json:"packfile_id,omitempty"`
	RepositoryId uint64 `protobuf:"varint,2,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
}

func (m *PackfileRepositoryMapping) Reset()         { *m = PackfileRepositoryMapping{} }
func (m *PackfileRepositoryMapping) String() string { return proto.CompactTextString(m) }
func (*PackfileRepositoryMapping) ProtoMessage()    {}
func (*PackfileRepositoryMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9cfcdd7c462dde8, []int{2}
}
func (m *PackfileRepositoryMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PackfileRepositoryMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PackfileRepositoryMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PackfileRepositoryMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackfileRepositoryMapping.Merge(m, src)
}
func (m *PackfileRepositoryMapping) XXX_Size() int {
	return m.Size()
}
func (m *PackfileRepositoryMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_PackfileRepositoryMapping.DiscardUnknown(m)
}

var xxx_messageInfo_PackfileRepositoryMapping proto.InternalMessageInfo

func (m *PackfileRepositoryMapping) GetPackfileId() uint64 {
	if m != nil {
		return m.PackfileId
	}
	return 0
}

func (m *PackfileRepositoryMapping) GetRepositoryId() uint64 {
	if m != nil {
		return m.RepositoryId
	}
	return 0
}

// Challenge represents a storage proof challenge
type Challenge struct {
	Id              uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProviderAddress string          `protobuf:"bytes,2,opt,name=provider_address,json=providerAddress,proto3" json:"provider_address,omitempty"`
	PackfileId      uint64          `protobuf:"varint,3,opt,name=packfile_id,json=packfileId,proto3" json:"packfile_id,omitempty"`
	RootHash        string          `protobuf:"bytes,4,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
	ChunkIndex      uint64          `protobuf:"varint,5,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"`
	CreatedAt       time.Time       `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	Deadline        time.Time       `protobuf:"bytes,7,opt,name=deadline,proto3,stdtime" json:"deadline"`
	Status          ChallengeStatus `protobuf:"varint,8,opt,name=status,proto3,enum=gitopia.gitopia.storage.ChallengeStatus" json:"status,omitempty"`
}

func (m *Challenge) Reset()         { *m = Challenge{} }
func (m *Challenge) String() string { return proto.CompactTextString(m) }
func (*Challenge) ProtoMessage()    {}
func (*Challenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9cfcdd7c462dde8, []int{3}
}
func (m *Challenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Challenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Challenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Challenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Challenge.Merge(m, src)
}
func (m *Challenge) XXX_Size() int {
	return m.Size()
}
func (m *Challenge) XXX_DiscardUnknown() {
	xxx_messageInfo_Challenge.DiscardUnknown(m)
}

var xxx_messageInfo_Challenge proto.InternalMessageInfo

func (m *Challenge) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Challenge) GetProviderAddress() string {
	if m != nil {
		return m.ProviderAddress
	}
	return ""
}

func (m *Challenge) GetPackfileId() uint64 {
	if m != nil {
		return m.PackfileId
	}
	return 0
}

func (m *Challenge) GetRootHash() string {
	if m != nil {
		return m.RootHash
	}
	return ""
}

func (m *Challenge) GetChunkIndex() uint64 {
	if m != nil {
		return m.ChunkIndex
	}
	return 0
}

func (m *Challenge) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Challenge) GetDeadline() time.Time {
	if m != nil {
		return m.Deadline
	}
	return time.Time{}
}

func (m *Challenge) GetStatus() ChallengeStatus {
	if m != nil {
		return m.Status
	}
	return ChallengeStatus_CHALLENGE_STATUS_UNSPECIFIED
}

// BlockInfo stores information about a block
type BlockInfo struct {
	Height    uint32    `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Timestamp time.Time `protobuf:"bytes,2,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
}

func (m *BlockInfo) Reset()         { *m = BlockInfo{} }
func (m *BlockInfo) String() string { return proto.CompactTextString(m) }
func (*BlockInfo) ProtoMessage()    {}
func (*BlockInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9cfcdd7c462dde8, []int{4}
}
func (m *BlockInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockInfo.Merge(m, src)
}
func (m *BlockInfo) XXX_Size() int {
	return m.Size()
}
func (m *BlockInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BlockInfo proto.InternalMessageInfo

func (m *BlockInfo) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockInfo) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func init() {
	proto.RegisterEnum("gitopia.gitopia.storage.ChallengeStatus", ChallengeStatus_name, ChallengeStatus_value)
	proto.RegisterType((*Provider)(nil), "gitopia.gitopia.storage.Provider")
	proto.RegisterType((*Packfile)(nil), "gitopia.gitopia.storage.Packfile")
	proto.RegisterType((*PackfileRepositoryMapping)(nil), "gitopia.gitopia.storage.PackfileRepositoryMapping")
	proto.RegisterType((*Challenge)(nil), "gitopia.gitopia.storage.Challenge")
	proto.RegisterType((*BlockInfo)(nil), "gitopia.gitopia.storage.BlockInfo")
}

func init() {
	proto.RegisterFile("gitopia/gitopia/storage/types.proto", fileDescriptor_b9cfcdd7c462dde8)
}

var fileDescriptor_b9cfcdd7c462dde8 = []byte{
	// 807 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xc1, 0x6e, 0xdb, 0x46,
	0x10, 0x15, 0x25, 0x59, 0x16, 0xc7, 0x8d, 0x2d, 0x6c, 0xdd, 0x9a, 0x71, 0x02, 0x59, 0x50, 0x80,
	0x42, 0x29, 0x50, 0x12, 0x4e, 0x90, 0x7b, 0x24, 0x99, 0x76, 0x08, 0xd8, 0x8e, 0x40, 0xcb, 0x97,
	0x5e, 0x88, 0x15, 0xb9, 0xa2, 0xb6, 0xa6, 0xb8, 0x04, 0x77, 0x69, 0x24, 0xfd, 0x8a, 0x7c, 0x48,
	0x0f, 0x3d, 0xf4, 0x23, 0x72, 0xcc, 0xb1, 0xa7, 0xb6, 0xb0, 0xef, 0xfd, 0x86, 0x62, 0x57, 0x4b,
	0x25, 0x96, 0x5c, 0xc0, 0x39, 0x71, 0x67, 0xde, 0x1b, 0x72, 0xde, 0xbc, 0x21, 0x09, 0xcf, 0x62,
	0x2a, 0x58, 0x46, 0xb1, 0x53, 0x5e, 0xb9, 0x60, 0x39, 0x8e, 0x89, 0x23, 0xde, 0x67, 0x84, 0xdb,
	0x59, 0xce, 0x04, 0x43, 0x7b, 0x1a, 0xb4, 0xcb, 0xab, 0x26, 0xed, 0xef, 0xc6, 0x2c, 0x66, 0x8a,
	0xe3, 0xc8, 0xd3, 0x82, 0xbe, 0xdf, 0x0e, 0x19, 0x9f, 0x33, 0xee, 0x4c, 0x30, 0x27, 0xce, 0xf5,
	0xe1, 0x84, 0x08, 0x7c, 0xe8, 0x84, 0x8c, 0xa6, 0x1a, 0x3f, 0x88, 0x19, 0x8b, 0x13, 0xe2, 0xa8,
	0x68, 0x52, 0x4c, 0x1d, 0x41, 0xe7, 0x84, 0x0b, 0x3c, 0xcf, 0x16, 0x84, 0xee, 0x1f, 0x35, 0x68,
	0x8e, 0x72, 0x76, 0x4d, 0x23, 0x92, 0x23, 0x0b, 0x36, 0xc3, 0x9c, 0x60, 0xc1, 0x72, 0xcb, 0xe8,
	0x18, 0x3d, 0xd3, 0x2f, 0x43, 0xb4, 0x0d, 0x55, 0x1a, 0x59, 0xd5, 0x8e, 0xd1, 0xab, 0xfb, 0x55,
	0x1a, 0x49, 0x26, 0x8e, 0xa2, 0x9c, 0x70, 0x6e, 0xd5, 0x16, 0x4c, 0x1d, 0xa2, 0x3d, 0xd8, 0xcc,
	0x08, 0xc9, 0x03, 0x1a, 0x59, 0x75, 0x85, 0x34, 0x64, 0xe8, 0x45, 0xe8, 0x07, 0xd8, 0x9e, 0x17,
	0x89, 0xa0, 0x9a, 0x48, 0xb8, 0xb5, 0xd1, 0xa9, 0xf5, 0x4c, 0x7f, 0x25, 0x8b, 0x5e, 0xc1, 0x06,
	0x17, 0xf8, 0x8a, 0x58, 0x8d, 0x8e, 0xd1, 0xdb, 0x7a, 0xf1, 0xd8, 0x5e, 0x48, 0xb4, 0xa5, 0x44,
	0x5b, 0x4b, 0xb4, 0x87, 0x8c, 0xa6, 0x83, 0xfa, 0xc7, 0xbf, 0x0e, 0x2a, 0xfe, 0x82, 0x8d, 0xbe,
	0x87, 0x06, 0x4b, 0x13, 0x9a, 0x12, 0x6b, 0xb3, 0x63, 0xf4, 0x9a, 0xbe, 0x8e, 0xd0, 0x73, 0x68,
	0x09, 0x26, 0x70, 0x12, 0x84, 0x33, 0x9c, 0x24, 0x24, 0x8d, 0x09, 0xb7, 0x9a, 0x4a, 0xc7, 0x8e,
	0xca, 0x0f, 0x97, 0x69, 0xf4, 0x12, 0xbe, 0xe3, 0x45, 0x18, 0x12, 0xce, 0xa7, 0xc5, 0x1d, 0xbe,
	0xa9, 0xf8, 0xbb, 0x9f, 0xc1, 0x2f, 0x8a, 0x0e, 0x61, 0x37, 0x64, 0x29, 0x27, 0x61, 0x21, 0xe8,
	0x35, 0x09, 0xa6, 0x98, 0x26, 0x45, 0x4e, 0xb8, 0x05, 0xaa, 0xe6, 0xdb, 0x2f, 0xb0, 0x63, 0x0d,
	0xa1, 0x3e, 0x98, 0xbf, 0x30, 0x9a, 0x06, 0xd2, 0x0b, 0x6b, 0x4b, 0xa9, 0xdc, 0xb7, 0x17, 0x46,
	0xd9, 0xa5, 0x51, 0xf6, 0xb8, 0x34, 0x6a, 0xd0, 0x94, 0x32, 0x3f, 0xfc, 0x7d, 0x60, 0xf8, 0x4d,
	0x59, 0x26, 0x81, 0xee, 0xef, 0x06, 0x34, 0x47, 0x38, 0xbc, 0x9a, 0xd2, 0x84, 0x7c, 0x85, 0x6d,
	0xcf, 0xe0, 0x51, 0x4e, 0x32, 0xc6, 0xa9, 0x60, 0xf9, 0x7b, 0x69, 0x51, 0x4d, 0x41, 0xdf, 0x7c,
	0x4e, 0x7a, 0x11, 0x42, 0x50, 0x4f, 0xf1, 0x9c, 0x68, 0xfb, 0xd4, 0x59, 0xe6, 0x38, 0xfd, 0x95,
	0x58, 0x1b, 0x8a, 0xaf, 0xce, 0xa8, 0x05, 0xb5, 0x90, 0x46, 0xca, 0x26, 0xd3, 0x97, 0x47, 0xf4,
	0x04, 0xcc, 0x9c, 0x31, 0x11, 0xcc, 0x30, 0x9f, 0x29, 0x1b, 0x4c, 0xbf, 0x29, 0x13, 0x6f, 0x30,
	0x9f, 0x75, 0x31, 0x3c, 0x2e, 0x3b, 0xf6, 0x97, 0x8f, 0x3b, 0xc3, 0x59, 0x46, 0xd3, 0x18, 0x1d,
	0xc0, 0x56, 0xa6, 0x41, 0xd9, 0x96, 0xa1, 0x1e, 0x03, 0x65, 0xca, 0xbb, 0xa7, 0xf3, 0xea, 0x7a,
	0xe7, 0xdd, 0x7f, 0xab, 0x60, 0x2e, 0xad, 0xd1, 0xe2, 0x8d, 0xa5, 0xf8, 0xe7, 0xd0, 0xca, 0xf4,
	0xa6, 0x07, 0xe5, 0xf2, 0x56, 0x55, 0x93, 0x3b, 0x65, 0xbe, 0xaf, 0x97, 0x78, 0xa5, 0x9d, 0xda,
	0x5a, 0x3b, 0x77, 0x94, 0xd6, 0xef, 0x2a, 0x95, 0xd5, 0xe1, 0xac, 0x48, 0xaf, 0x02, 0x9a, 0x46,
	0xe4, 0x9d, 0x9e, 0x19, 0xa8, 0x94, 0x27, 0x33, 0x68, 0x08, 0xa0, 0x1c, 0x22, 0x51, 0x80, 0x85,
	0xde, 0xf3, 0x87, 0x6d, 0x80, 0xa9, 0xeb, 0xfa, 0x02, 0xbd, 0x86, 0x66, 0x44, 0x70, 0xb4, 0x5c,
	0xf9, 0x07, 0x2f, 0x51, 0x59, 0x85, 0x5e, 0x43, 0x83, 0x0b, 0x2c, 0x8a, 0xc5, 0x0b, 0xb1, 0xfd,
	0xa2, 0x67, 0xff, 0xcf, 0xc7, 0xc7, 0x5e, 0x0e, 0xf5, 0x42, 0xf1, 0x7d, 0x5d, 0xd7, 0x8d, 0xc1,
	0x1c, 0x24, 0x2c, 0xbc, 0xf2, 0xd2, 0x29, 0x93, 0x6f, 0xe0, 0x8c, 0xd0, 0x78, 0x26, 0xd4, 0xcc,
	0x1f, 0xf9, 0x3a, 0x42, 0x03, 0x30, 0x97, 0x5f, 0x1d, 0x35, 0xf0, 0x07, 0x8b, 0x5d, 0x96, 0xfd,
	0xf8, 0x9b, 0x01, 0x3b, 0x2b, 0x4d, 0xa0, 0x0e, 0x3c, 0x1d, 0xbe, 0xe9, 0x9f, 0x9e, 0xba, 0xe7,
	0x27, 0x6e, 0x70, 0x31, 0xee, 0x8f, 0x2f, 0x2f, 0x82, 0xcb, 0xf3, 0x8b, 0x91, 0x3b, 0xf4, 0x8e,
	0x3d, 0xf7, 0xa8, 0x55, 0x41, 0x4f, 0xc1, 0x5a, 0x63, 0x8c, 0xdc, 0xf3, 0x23, 0xef, 0xfc, 0xa4,
	0x65, 0xa0, 0x36, 0xec, 0xaf, 0xa1, 0xc3, 0xb7, 0x67, 0xa3, 0x53, 0x77, 0xec, 0x1e, 0xb5, 0xaa,
	0xe8, 0x09, 0xec, 0xad, 0xe1, 0xc7, 0x7d, 0xef, 0xd4, 0x3d, 0x6a, 0xd5, 0xee, 0xbd, 0xf5, 0xd8,
	0x3b, 0x73, 0xdf, 0x5e, 0x8e, 0x5b, 0xf5, 0xc1, 0xc9, 0xc7, 0x9b, 0xb6, 0xf1, 0xe9, 0xa6, 0x6d,
	0xfc, 0x73, 0xd3, 0x36, 0x3e, 0xdc, 0xb6, 0x2b, 0x9f, 0x6e, 0xdb, 0x95, 0x3f, 0x6f, 0xdb, 0x95,
	0x9f, 0x7f, 0x8a, 0xa9, 0x98, 0x15, 0x13, 0x3b, 0x64, 0x73, 0x67, 0xf5, 0x7f, 0x70, 0xfd, 0xca,
	0x79, 0x77, 0xf7, 0xa7, 0x30, 0x69, 0xa8, 0x01, 0xbd, 0xfc, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x55,
	0xdd, 0x1f, 0xe8, 0x3c, 0x06, 0x00, 0x00,
}

func (m *Provider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Provider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Provider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.JoinTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.JoinTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTypes(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x5a
	if m.ConsecutiveFailures != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ConsecutiveFailures))
		i--
		dAtA[i] = 0x50
	}
	if m.SuccessfulChallenges != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SuccessfulChallenges))
		i--
		dAtA[i] = 0x48
	}
	if m.TotalChallenges != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TotalChallenges))
		i--
		dAtA[i] = 0x40
	}
	if m.Online {
		i--
		if m.Online {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	{
		size, err := m.Stake.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Multiaddresses) > 0 {
		for iNdEx := len(m.Multiaddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Multiaddresses[iNdEx])
			copy(dAtA[i:], m.Multiaddresses[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Multiaddresses[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.PeerId) > 0 {
		i -= len(m.PeerId)
		copy(dAtA[i:], m.PeerId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PeerId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Packfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Packfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Packfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RootHash) > 0 {
		i -= len(m.RootHash)
		copy(dAtA[i:], m.RootHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RootHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x32
	}
	if m.Size_ != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.RepositoryId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RepositoryId))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PackfileRepositoryMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PackfileRepositoryMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PackfileRepositoryMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RepositoryId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RepositoryId))
		i--
		dAtA[i] = 0x10
	}
	if m.PackfileId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PackfileId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Challenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Challenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Challenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Deadline, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Deadline):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintTypes(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x3a
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintTypes(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x32
	if m.ChunkIndex != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ChunkIndex))
		i--
		dAtA[i] = 0x28
	}
	if len(m.RootHash) > 0 {
		i -= len(m.RootHash)
		copy(dAtA[i:], m.RootHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RootHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.PackfileId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PackfileId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ProviderAddress) > 0 {
		i -= len(m.ProviderAddress)
		copy(dAtA[i:], m.ProviderAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ProviderAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintTypes(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x12
	if m.Height != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Provider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.PeerId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Multiaddresses) > 0 {
		for _, s := range m.Multiaddresses {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = m.Stake.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.Online {
		n += 2
	}
	if m.TotalChallenges != 0 {
		n += 1 + sovTypes(uint64(m.TotalChallenges))
	}
	if m.SuccessfulChallenges != 0 {
		n += 1 + sovTypes(uint64(m.SuccessfulChallenges))
	}
	if m.ConsecutiveFailures != 0 {
		n += 1 + sovTypes(uint64(m.ConsecutiveFailures))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.JoinTime)
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *Packfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	if m.RepositoryId != 0 {
		n += 1 + sovTypes(uint64(m.RepositoryId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovTypes(uint64(m.Size_))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.RootHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PackfileRepositoryMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PackfileId != 0 {
		n += 1 + sovTypes(uint64(m.PackfileId))
	}
	if m.RepositoryId != 0 {
		n += 1 + sovTypes(uint64(m.RepositoryId))
	}
	return n
}

func (m *Challenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	l = len(m.ProviderAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PackfileId != 0 {
		n += 1 + sovTypes(uint64(m.PackfileId))
	}
	l = len(m.RootHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ChunkIndex != 0 {
		n += 1 + sovTypes(uint64(m.ChunkIndex))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovTypes(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Deadline)
	n += 1 + l + sovTypes(uint64(l))
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	return n
}

func (m *BlockInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovTypes(uint64(m.Height))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Provider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Provider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Provider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multiaddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Multiaddresses = append(m.Multiaddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Online = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalChallenges", wireType)
			}
			m.TotalChallenges = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalChallenges |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessfulChallenges", wireType)
			}
			m.SuccessfulChallenges = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuccessfulChallenges |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsecutiveFailures", wireType)
			}
			m.ConsecutiveFailures = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsecutiveFailures |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.JoinTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Packfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Packfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Packfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryId", wireType)
			}
			m.RepositoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepositoryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PackfileRepositoryMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PackfileRepositoryMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PackfileRepositoryMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackfileId", wireType)
			}
			m.PackfileId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PackfileId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryId", wireType)
			}
			m.RepositoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepositoryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Challenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Challenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Challenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackfileId", wireType)
			}
			m.PackfileId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PackfileId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkIndex", wireType)
			}
			m.ChunkIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Deadline, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ChallengeStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
