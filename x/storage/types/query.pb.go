// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitopia/gitopia/storage/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryProviderRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryProviderRequest) Reset()         { *m = QueryProviderRequest{} }
func (m *QueryProviderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProviderRequest) ProtoMessage()    {}
func (*QueryProviderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{2}
}
func (m *QueryProviderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProviderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProviderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProviderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProviderRequest.Merge(m, src)
}
func (m *QueryProviderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProviderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProviderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProviderRequest proto.InternalMessageInfo

func (m *QueryProviderRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryProviderResponse struct {
	Provider Provider `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider"`
}

func (m *QueryProviderResponse) Reset()         { *m = QueryProviderResponse{} }
func (m *QueryProviderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProviderResponse) ProtoMessage()    {}
func (*QueryProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{3}
}
func (m *QueryProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProviderResponse.Merge(m, src)
}
func (m *QueryProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProviderResponse proto.InternalMessageInfo

func (m *QueryProviderResponse) GetProvider() Provider {
	if m != nil {
		return m.Provider
	}
	return Provider{}
}

type QueryProvidersRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryProvidersRequest) Reset()         { *m = QueryProvidersRequest{} }
func (m *QueryProvidersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProvidersRequest) ProtoMessage()    {}
func (*QueryProvidersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{4}
}
func (m *QueryProvidersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProvidersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProvidersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProvidersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProvidersRequest.Merge(m, src)
}
func (m *QueryProvidersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProvidersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProvidersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProvidersRequest proto.InternalMessageInfo

func (m *QueryProvidersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryProvidersResponse struct {
	Providers  []Provider          `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryProvidersResponse) Reset()         { *m = QueryProvidersResponse{} }
func (m *QueryProvidersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProvidersResponse) ProtoMessage()    {}
func (*QueryProvidersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{5}
}
func (m *QueryProvidersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProvidersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProvidersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProvidersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProvidersResponse.Merge(m, src)
}
func (m *QueryProvidersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProvidersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProvidersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProvidersResponse proto.InternalMessageInfo

func (m *QueryProvidersResponse) GetProviders() []Provider {
	if m != nil {
		return m.Providers
	}
	return nil
}

func (m *QueryProvidersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryActiveProvidersRequest struct {
}

func (m *QueryActiveProvidersRequest) Reset()         { *m = QueryActiveProvidersRequest{} }
func (m *QueryActiveProvidersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryActiveProvidersRequest) ProtoMessage()    {}
func (*QueryActiveProvidersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{6}
}
func (m *QueryActiveProvidersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveProvidersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveProvidersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveProvidersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveProvidersRequest.Merge(m, src)
}
func (m *QueryActiveProvidersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveProvidersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveProvidersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveProvidersRequest proto.InternalMessageInfo

type QueryActiveProvidersResponse struct {
	Providers []Provider `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers"`
}

func (m *QueryActiveProvidersResponse) Reset()         { *m = QueryActiveProvidersResponse{} }
func (m *QueryActiveProvidersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryActiveProvidersResponse) ProtoMessage()    {}
func (*QueryActiveProvidersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{7}
}
func (m *QueryActiveProvidersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveProvidersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveProvidersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveProvidersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveProvidersResponse.Merge(m, src)
}
func (m *QueryActiveProvidersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveProvidersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveProvidersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveProvidersResponse proto.InternalMessageInfo

func (m *QueryActiveProvidersResponse) GetProviders() []Provider {
	if m != nil {
		return m.Providers
	}
	return nil
}

type QueryPackfileRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryPackfileRequest) Reset()         { *m = QueryPackfileRequest{} }
func (m *QueryPackfileRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPackfileRequest) ProtoMessage()    {}
func (*QueryPackfileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{8}
}
func (m *QueryPackfileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPackfileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPackfileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPackfileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPackfileRequest.Merge(m, src)
}
func (m *QueryPackfileRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPackfileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPackfileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPackfileRequest proto.InternalMessageInfo

func (m *QueryPackfileRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryPackfileResponse struct {
	Packfile Packfile `protobuf:"bytes,1,opt,name=packfile,proto3" json:"packfile"`
}

func (m *QueryPackfileResponse) Reset()         { *m = QueryPackfileResponse{} }
func (m *QueryPackfileResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPackfileResponse) ProtoMessage()    {}
func (*QueryPackfileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{9}
}
func (m *QueryPackfileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPackfileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPackfileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPackfileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPackfileResponse.Merge(m, src)
}
func (m *QueryPackfileResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPackfileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPackfileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPackfileResponse proto.InternalMessageInfo

func (m *QueryPackfileResponse) GetPackfile() Packfile {
	if m != nil {
		return m.Packfile
	}
	return Packfile{}
}

type QueryPackfilesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPackfilesRequest) Reset()         { *m = QueryPackfilesRequest{} }
func (m *QueryPackfilesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPackfilesRequest) ProtoMessage()    {}
func (*QueryPackfilesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{10}
}
func (m *QueryPackfilesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPackfilesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPackfilesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPackfilesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPackfilesRequest.Merge(m, src)
}
func (m *QueryPackfilesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPackfilesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPackfilesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPackfilesRequest proto.InternalMessageInfo

func (m *QueryPackfilesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryPackfilesResponse struct {
	Packfiles  []Packfile          `protobuf:"bytes,1,rep,name=packfiles,proto3" json:"packfiles"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPackfilesResponse) Reset()         { *m = QueryPackfilesResponse{} }
func (m *QueryPackfilesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPackfilesResponse) ProtoMessage()    {}
func (*QueryPackfilesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{11}
}
func (m *QueryPackfilesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPackfilesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPackfilesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPackfilesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPackfilesResponse.Merge(m, src)
}
func (m *QueryPackfilesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPackfilesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPackfilesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPackfilesResponse proto.InternalMessageInfo

func (m *QueryPackfilesResponse) GetPackfiles() []Packfile {
	if m != nil {
		return m.Packfiles
	}
	return nil
}

func (m *QueryPackfilesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryRepositoryPackfileRequest struct {
	RepositoryId uint64 `protobuf:"varint,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
}

func (m *QueryRepositoryPackfileRequest) Reset()         { *m = QueryRepositoryPackfileRequest{} }
func (m *QueryRepositoryPackfileRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRepositoryPackfileRequest) ProtoMessage()    {}
func (*QueryRepositoryPackfileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{12}
}
func (m *QueryRepositoryPackfileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRepositoryPackfileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRepositoryPackfileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRepositoryPackfileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRepositoryPackfileRequest.Merge(m, src)
}
func (m *QueryRepositoryPackfileRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRepositoryPackfileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRepositoryPackfileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRepositoryPackfileRequest proto.InternalMessageInfo

func (m *QueryRepositoryPackfileRequest) GetRepositoryId() uint64 {
	if m != nil {
		return m.RepositoryId
	}
	return 0
}

type QueryRepositoryPackfileResponse struct {
	Packfile Packfile `protobuf:"bytes,1,opt,name=packfile,proto3" json:"packfile"`
}

func (m *QueryRepositoryPackfileResponse) Reset()         { *m = QueryRepositoryPackfileResponse{} }
func (m *QueryRepositoryPackfileResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRepositoryPackfileResponse) ProtoMessage()    {}
func (*QueryRepositoryPackfileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{13}
}
func (m *QueryRepositoryPackfileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRepositoryPackfileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRepositoryPackfileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRepositoryPackfileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRepositoryPackfileResponse.Merge(m, src)
}
func (m *QueryRepositoryPackfileResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRepositoryPackfileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRepositoryPackfileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRepositoryPackfileResponse proto.InternalMessageInfo

func (m *QueryRepositoryPackfileResponse) GetPackfile() Packfile {
	if m != nil {
		return m.Packfile
	}
	return Packfile{}
}

type QueryReleaseAssetRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryReleaseAssetRequest) Reset()         { *m = QueryReleaseAssetRequest{} }
func (m *QueryReleaseAssetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReleaseAssetRequest) ProtoMessage()    {}
func (*QueryReleaseAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{14}
}
func (m *QueryReleaseAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReleaseAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReleaseAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReleaseAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReleaseAssetRequest.Merge(m, src)
}
func (m *QueryReleaseAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReleaseAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReleaseAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReleaseAssetRequest proto.InternalMessageInfo

func (m *QueryReleaseAssetRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryReleaseAssetResponse struct {
	ReleaseAsset ReleaseAsset `protobuf:"bytes,1,opt,name=release_asset,json=releaseAsset,proto3" json:"release_asset"`
}

func (m *QueryReleaseAssetResponse) Reset()         { *m = QueryReleaseAssetResponse{} }
func (m *QueryReleaseAssetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReleaseAssetResponse) ProtoMessage()    {}
func (*QueryReleaseAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{15}
}
func (m *QueryReleaseAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReleaseAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReleaseAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReleaseAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReleaseAssetResponse.Merge(m, src)
}
func (m *QueryReleaseAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReleaseAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReleaseAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReleaseAssetResponse proto.InternalMessageInfo

func (m *QueryReleaseAssetResponse) GetReleaseAsset() ReleaseAsset {
	if m != nil {
		return m.ReleaseAsset
	}
	return ReleaseAsset{}
}

type QueryReleaseAssetsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryReleaseAssetsRequest) Reset()         { *m = QueryReleaseAssetsRequest{} }
func (m *QueryReleaseAssetsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReleaseAssetsRequest) ProtoMessage()    {}
func (*QueryReleaseAssetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{16}
}
func (m *QueryReleaseAssetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReleaseAssetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReleaseAssetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReleaseAssetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReleaseAssetsRequest.Merge(m, src)
}
func (m *QueryReleaseAssetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReleaseAssetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReleaseAssetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReleaseAssetsRequest proto.InternalMessageInfo

func (m *QueryReleaseAssetsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryReleaseAssetsResponse struct {
	ReleaseAssets []ReleaseAsset      `protobuf:"bytes,1,rep,name=release_assets,json=releaseAssets,proto3" json:"release_assets"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryReleaseAssetsResponse) Reset()         { *m = QueryReleaseAssetsResponse{} }
func (m *QueryReleaseAssetsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReleaseAssetsResponse) ProtoMessage()    {}
func (*QueryReleaseAssetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{17}
}
func (m *QueryReleaseAssetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReleaseAssetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReleaseAssetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReleaseAssetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReleaseAssetsResponse.Merge(m, src)
}
func (m *QueryReleaseAssetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReleaseAssetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReleaseAssetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReleaseAssetsResponse proto.InternalMessageInfo

func (m *QueryReleaseAssetsResponse) GetReleaseAssets() []ReleaseAsset {
	if m != nil {
		return m.ReleaseAssets
	}
	return nil
}

func (m *QueryReleaseAssetsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryRepositoryReleaseAssetRequest struct {
	RepositoryId uint64 `protobuf:"varint,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Tag          string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Name         string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *QueryRepositoryReleaseAssetRequest) Reset()         { *m = QueryRepositoryReleaseAssetRequest{} }
func (m *QueryRepositoryReleaseAssetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRepositoryReleaseAssetRequest) ProtoMessage()    {}
func (*QueryRepositoryReleaseAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{18}
}
func (m *QueryRepositoryReleaseAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRepositoryReleaseAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRepositoryReleaseAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRepositoryReleaseAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRepositoryReleaseAssetRequest.Merge(m, src)
}
func (m *QueryRepositoryReleaseAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRepositoryReleaseAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRepositoryReleaseAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRepositoryReleaseAssetRequest proto.InternalMessageInfo

func (m *QueryRepositoryReleaseAssetRequest) GetRepositoryId() uint64 {
	if m != nil {
		return m.RepositoryId
	}
	return 0
}

func (m *QueryRepositoryReleaseAssetRequest) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *QueryRepositoryReleaseAssetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryRepositoryReleaseAssetResponse struct {
	ReleaseAsset ReleaseAsset `protobuf:"bytes,1,opt,name=release_asset,json=releaseAsset,proto3" json:"release_asset"`
}

func (m *QueryRepositoryReleaseAssetResponse) Reset()         { *m = QueryRepositoryReleaseAssetResponse{} }
func (m *QueryRepositoryReleaseAssetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRepositoryReleaseAssetResponse) ProtoMessage()    {}
func (*QueryRepositoryReleaseAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{19}
}
func (m *QueryRepositoryReleaseAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRepositoryReleaseAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRepositoryReleaseAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRepositoryReleaseAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRepositoryReleaseAssetResponse.Merge(m, src)
}
func (m *QueryRepositoryReleaseAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRepositoryReleaseAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRepositoryReleaseAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRepositoryReleaseAssetResponse proto.InternalMessageInfo

func (m *QueryRepositoryReleaseAssetResponse) GetReleaseAsset() ReleaseAsset {
	if m != nil {
		return m.ReleaseAsset
	}
	return ReleaseAsset{}
}

type QueryRepositoryReleaseAssetsRequest struct {
	RepositoryId uint64 `protobuf:"varint,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Tag          string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (m *QueryRepositoryReleaseAssetsRequest) Reset()         { *m = QueryRepositoryReleaseAssetsRequest{} }
func (m *QueryRepositoryReleaseAssetsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRepositoryReleaseAssetsRequest) ProtoMessage()    {}
func (*QueryRepositoryReleaseAssetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{20}
}
func (m *QueryRepositoryReleaseAssetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRepositoryReleaseAssetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRepositoryReleaseAssetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRepositoryReleaseAssetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRepositoryReleaseAssetsRequest.Merge(m, src)
}
func (m *QueryRepositoryReleaseAssetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRepositoryReleaseAssetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRepositoryReleaseAssetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRepositoryReleaseAssetsRequest proto.InternalMessageInfo

func (m *QueryRepositoryReleaseAssetsRequest) GetRepositoryId() uint64 {
	if m != nil {
		return m.RepositoryId
	}
	return 0
}

func (m *QueryRepositoryReleaseAssetsRequest) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

type QueryRepositoryReleaseAssetsResponse struct {
	ReleaseAssets []ReleaseAsset `protobuf:"bytes,1,rep,name=release_assets,json=releaseAssets,proto3" json:"release_assets"`
}

func (m *QueryRepositoryReleaseAssetsResponse) Reset()         { *m = QueryRepositoryReleaseAssetsResponse{} }
func (m *QueryRepositoryReleaseAssetsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRepositoryReleaseAssetsResponse) ProtoMessage()    {}
func (*QueryRepositoryReleaseAssetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{21}
}
func (m *QueryRepositoryReleaseAssetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRepositoryReleaseAssetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRepositoryReleaseAssetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRepositoryReleaseAssetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRepositoryReleaseAssetsResponse.Merge(m, src)
}
func (m *QueryRepositoryReleaseAssetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRepositoryReleaseAssetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRepositoryReleaseAssetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRepositoryReleaseAssetsResponse proto.InternalMessageInfo

func (m *QueryRepositoryReleaseAssetsResponse) GetReleaseAssets() []ReleaseAsset {
	if m != nil {
		return m.ReleaseAssets
	}
	return nil
}

type QueryRepositoryReleaseAssetsByRepositoryIdRequest struct {
	RepositoryId uint64             `protobuf:"varint,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Pagination   *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRepositoryReleaseAssetsByRepositoryIdRequest) Reset() {
	*m = QueryRepositoryReleaseAssetsByRepositoryIdRequest{}
}
func (m *QueryRepositoryReleaseAssetsByRepositoryIdRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryRepositoryReleaseAssetsByRepositoryIdRequest) ProtoMessage() {}
func (*QueryRepositoryReleaseAssetsByRepositoryIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{22}
}
func (m *QueryRepositoryReleaseAssetsByRepositoryIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRepositoryReleaseAssetsByRepositoryIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRepositoryReleaseAssetsByRepositoryIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRepositoryReleaseAssetsByRepositoryIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRepositoryReleaseAssetsByRepositoryIdRequest.Merge(m, src)
}
func (m *QueryRepositoryReleaseAssetsByRepositoryIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRepositoryReleaseAssetsByRepositoryIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRepositoryReleaseAssetsByRepositoryIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRepositoryReleaseAssetsByRepositoryIdRequest proto.InternalMessageInfo

func (m *QueryRepositoryReleaseAssetsByRepositoryIdRequest) GetRepositoryId() uint64 {
	if m != nil {
		return m.RepositoryId
	}
	return 0
}

func (m *QueryRepositoryReleaseAssetsByRepositoryIdRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryRepositoryReleaseAssetsByRepositoryIdResponse struct {
	ReleaseAssets []ReleaseAsset      `protobuf:"bytes,1,rep,name=release_assets,json=releaseAssets,proto3" json:"release_assets"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRepositoryReleaseAssetsByRepositoryIdResponse) Reset() {
	*m = QueryRepositoryReleaseAssetsByRepositoryIdResponse{}
}
func (m *QueryRepositoryReleaseAssetsByRepositoryIdResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryRepositoryReleaseAssetsByRepositoryIdResponse) ProtoMessage() {}
func (*QueryRepositoryReleaseAssetsByRepositoryIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{23}
}
func (m *QueryRepositoryReleaseAssetsByRepositoryIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRepositoryReleaseAssetsByRepositoryIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRepositoryReleaseAssetsByRepositoryIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRepositoryReleaseAssetsByRepositoryIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRepositoryReleaseAssetsByRepositoryIdResponse.Merge(m, src)
}
func (m *QueryRepositoryReleaseAssetsByRepositoryIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRepositoryReleaseAssetsByRepositoryIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRepositoryReleaseAssetsByRepositoryIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRepositoryReleaseAssetsByRepositoryIdResponse proto.InternalMessageInfo

func (m *QueryRepositoryReleaseAssetsByRepositoryIdResponse) GetReleaseAssets() []ReleaseAsset {
	if m != nil {
		return m.ReleaseAssets
	}
	return nil
}

func (m *QueryRepositoryReleaseAssetsByRepositoryIdResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryChallengeRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryChallengeRequest) Reset()         { *m = QueryChallengeRequest{} }
func (m *QueryChallengeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryChallengeRequest) ProtoMessage()    {}
func (*QueryChallengeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{24}
}
func (m *QueryChallengeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChallengeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChallengeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChallengeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChallengeRequest.Merge(m, src)
}
func (m *QueryChallengeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryChallengeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChallengeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChallengeRequest proto.InternalMessageInfo

func (m *QueryChallengeRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryChallengeResponse struct {
	Challenge Challenge `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge"`
}

func (m *QueryChallengeResponse) Reset()         { *m = QueryChallengeResponse{} }
func (m *QueryChallengeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChallengeResponse) ProtoMessage()    {}
func (*QueryChallengeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{25}
}
func (m *QueryChallengeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChallengeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChallengeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChallengeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChallengeResponse.Merge(m, src)
}
func (m *QueryChallengeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChallengeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChallengeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChallengeResponse proto.InternalMessageInfo

func (m *QueryChallengeResponse) GetChallenge() Challenge {
	if m != nil {
		return m.Challenge
	}
	return Challenge{}
}

type QueryChallengesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryChallengesRequest) Reset()         { *m = QueryChallengesRequest{} }
func (m *QueryChallengesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryChallengesRequest) ProtoMessage()    {}
func (*QueryChallengesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{26}
}
func (m *QueryChallengesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChallengesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChallengesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChallengesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChallengesRequest.Merge(m, src)
}
func (m *QueryChallengesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryChallengesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChallengesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChallengesRequest proto.InternalMessageInfo

func (m *QueryChallengesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryChallengesResponse struct {
	Challenges []Challenge         `protobuf:"bytes,1,rep,name=challenges,proto3" json:"challenges"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryChallengesResponse) Reset()         { *m = QueryChallengesResponse{} }
func (m *QueryChallengesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChallengesResponse) ProtoMessage()    {}
func (*QueryChallengesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{27}
}
func (m *QueryChallengesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChallengesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChallengesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChallengesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChallengesResponse.Merge(m, src)
}
func (m *QueryChallengesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChallengesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChallengesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChallengesResponse proto.InternalMessageInfo

func (m *QueryChallengesResponse) GetChallenges() []Challenge {
	if m != nil {
		return m.Challenges
	}
	return nil
}

func (m *QueryChallengesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryStorageStatsRequest struct {
}

func (m *QueryStorageStatsRequest) Reset()         { *m = QueryStorageStatsRequest{} }
func (m *QueryStorageStatsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStorageStatsRequest) ProtoMessage()    {}
func (*QueryStorageStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{28}
}
func (m *QueryStorageStatsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStorageStatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStorageStatsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStorageStatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStorageStatsRequest.Merge(m, src)
}
func (m *QueryStorageStatsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStorageStatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStorageStatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStorageStatsRequest proto.InternalMessageInfo

type QueryStorageStatsResponse struct {
	StorageStats StorageStats `protobuf:"bytes,1,opt,name=storage_stats,json=storageStats,proto3" json:"storage_stats"`
}

func (m *QueryStorageStatsResponse) Reset()         { *m = QueryStorageStatsResponse{} }
func (m *QueryStorageStatsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStorageStatsResponse) ProtoMessage()    {}
func (*QueryStorageStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{29}
}
func (m *QueryStorageStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStorageStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStorageStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStorageStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStorageStatsResponse.Merge(m, src)
}
func (m *QueryStorageStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStorageStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStorageStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStorageStatsResponse proto.InternalMessageInfo

func (m *QueryStorageStatsResponse) GetStorageStats() StorageStats {
	if m != nil {
		return m.StorageStats
	}
	return StorageStats{}
}

type QueryCidReferenceCountRequest struct {
	Cid string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (m *QueryCidReferenceCountRequest) Reset()         { *m = QueryCidReferenceCountRequest{} }
func (m *QueryCidReferenceCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCidReferenceCountRequest) ProtoMessage()    {}
func (*QueryCidReferenceCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{30}
}
func (m *QueryCidReferenceCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCidReferenceCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCidReferenceCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCidReferenceCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCidReferenceCountRequest.Merge(m, src)
}
func (m *QueryCidReferenceCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCidReferenceCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCidReferenceCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCidReferenceCountRequest proto.InternalMessageInfo

func (m *QueryCidReferenceCountRequest) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

type QueryCidReferenceCountResponse struct {
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *QueryCidReferenceCountResponse) Reset()         { *m = QueryCidReferenceCountResponse{} }
func (m *QueryCidReferenceCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCidReferenceCountResponse) ProtoMessage()    {}
func (*QueryCidReferenceCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{31}
}
func (m *QueryCidReferenceCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCidReferenceCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCidReferenceCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCidReferenceCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCidReferenceCountResponse.Merge(m, src)
}
func (m *QueryCidReferenceCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCidReferenceCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCidReferenceCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCidReferenceCountResponse proto.InternalMessageInfo

func (m *QueryCidReferenceCountResponse) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type QueryCidReferenceCountsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryCidReferenceCountsRequest) Reset()         { *m = QueryCidReferenceCountsRequest{} }
func (m *QueryCidReferenceCountsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCidReferenceCountsRequest) ProtoMessage()    {}
func (*QueryCidReferenceCountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{32}
}
func (m *QueryCidReferenceCountsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCidReferenceCountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCidReferenceCountsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCidReferenceCountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCidReferenceCountsRequest.Merge(m, src)
}
func (m *QueryCidReferenceCountsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCidReferenceCountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCidReferenceCountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCidReferenceCountsRequest proto.InternalMessageInfo

func (m *QueryCidReferenceCountsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryCidReferenceCountsResponse struct {
	CidReferenceCounts []CidReferenceCount `protobuf:"bytes,1,rep,name=cid_reference_counts,json=cidReferenceCounts,proto3" json:"cid_reference_counts"`
	Pagination         *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryCidReferenceCountsResponse) Reset()         { *m = QueryCidReferenceCountsResponse{} }
func (m *QueryCidReferenceCountsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCidReferenceCountsResponse) ProtoMessage()    {}
func (*QueryCidReferenceCountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{33}
}
func (m *QueryCidReferenceCountsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCidReferenceCountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCidReferenceCountsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCidReferenceCountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCidReferenceCountsResponse.Merge(m, src)
}
func (m *QueryCidReferenceCountsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCidReferenceCountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCidReferenceCountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCidReferenceCountsResponse proto.InternalMessageInfo

func (m *QueryCidReferenceCountsResponse) GetCidReferenceCounts() []CidReferenceCount {
	if m != nil {
		return m.CidReferenceCounts
	}
	return nil
}

func (m *QueryCidReferenceCountsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryLFSObjectsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryLFSObjectsRequest) Reset()         { *m = QueryLFSObjectsRequest{} }
func (m *QueryLFSObjectsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLFSObjectsRequest) ProtoMessage()    {}
func (*QueryLFSObjectsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{34}
}
func (m *QueryLFSObjectsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLFSObjectsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLFSObjectsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLFSObjectsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLFSObjectsRequest.Merge(m, src)
}
func (m *QueryLFSObjectsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLFSObjectsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLFSObjectsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLFSObjectsRequest proto.InternalMessageInfo

func (m *QueryLFSObjectsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryLFSObjectsResponse struct {
	LfsObjects []LFSObject         `protobuf:"bytes,1,rep,name=lfs_objects,json=lfsObjects,proto3" json:"lfs_objects"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryLFSObjectsResponse) Reset()         { *m = QueryLFSObjectsResponse{} }
func (m *QueryLFSObjectsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLFSObjectsResponse) ProtoMessage()    {}
func (*QueryLFSObjectsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{35}
}
func (m *QueryLFSObjectsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLFSObjectsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLFSObjectsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLFSObjectsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLFSObjectsResponse.Merge(m, src)
}
func (m *QueryLFSObjectsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLFSObjectsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLFSObjectsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLFSObjectsResponse proto.InternalMessageInfo

func (m *QueryLFSObjectsResponse) GetLfsObjects() []LFSObject {
	if m != nil {
		return m.LfsObjects
	}
	return nil
}

func (m *QueryLFSObjectsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryLFSObjectRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryLFSObjectRequest) Reset()         { *m = QueryLFSObjectRequest{} }
func (m *QueryLFSObjectRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLFSObjectRequest) ProtoMessage()    {}
func (*QueryLFSObjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{36}
}
func (m *QueryLFSObjectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLFSObjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLFSObjectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLFSObjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLFSObjectRequest.Merge(m, src)
}
func (m *QueryLFSObjectRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLFSObjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLFSObjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLFSObjectRequest proto.InternalMessageInfo

func (m *QueryLFSObjectRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryLFSObjectResponse struct {
	LfsObject LFSObject `protobuf:"bytes,1,opt,name=lfs_object,json=lfsObject,proto3" json:"lfs_object"`
}

func (m *QueryLFSObjectResponse) Reset()         { *m = QueryLFSObjectResponse{} }
func (m *QueryLFSObjectResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLFSObjectResponse) ProtoMessage()    {}
func (*QueryLFSObjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{37}
}
func (m *QueryLFSObjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLFSObjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLFSObjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLFSObjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLFSObjectResponse.Merge(m, src)
}
func (m *QueryLFSObjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLFSObjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLFSObjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLFSObjectResponse proto.InternalMessageInfo

func (m *QueryLFSObjectResponse) GetLfsObject() LFSObject {
	if m != nil {
		return m.LfsObject
	}
	return LFSObject{}
}

type QueryLFSObjectsByRepositoryIdRequest struct {
	RepositoryId uint64 `protobuf:"varint,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
}

func (m *QueryLFSObjectsByRepositoryIdRequest) Reset()         { *m = QueryLFSObjectsByRepositoryIdRequest{} }
func (m *QueryLFSObjectsByRepositoryIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLFSObjectsByRepositoryIdRequest) ProtoMessage()    {}
func (*QueryLFSObjectsByRepositoryIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{38}
}
func (m *QueryLFSObjectsByRepositoryIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLFSObjectsByRepositoryIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLFSObjectsByRepositoryIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLFSObjectsByRepositoryIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLFSObjectsByRepositoryIdRequest.Merge(m, src)
}
func (m *QueryLFSObjectsByRepositoryIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLFSObjectsByRepositoryIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLFSObjectsByRepositoryIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLFSObjectsByRepositoryIdRequest proto.InternalMessageInfo

func (m *QueryLFSObjectsByRepositoryIdRequest) GetRepositoryId() uint64 {
	if m != nil {
		return m.RepositoryId
	}
	return 0
}

type QueryLFSObjectsByRepositoryIdResponse struct {
	LfsObjects []LFSObject `protobuf:"bytes,1,rep,name=lfs_objects,json=lfsObjects,proto3" json:"lfs_objects"`
}

func (m *QueryLFSObjectsByRepositoryIdResponse) Reset()         { *m = QueryLFSObjectsByRepositoryIdResponse{} }
func (m *QueryLFSObjectsByRepositoryIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLFSObjectsByRepositoryIdResponse) ProtoMessage()    {}
func (*QueryLFSObjectsByRepositoryIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{39}
}
func (m *QueryLFSObjectsByRepositoryIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLFSObjectsByRepositoryIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLFSObjectsByRepositoryIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLFSObjectsByRepositoryIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLFSObjectsByRepositoryIdResponse.Merge(m, src)
}
func (m *QueryLFSObjectsByRepositoryIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLFSObjectsByRepositoryIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLFSObjectsByRepositoryIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLFSObjectsByRepositoryIdResponse proto.InternalMessageInfo

func (m *QueryLFSObjectsByRepositoryIdResponse) GetLfsObjects() []LFSObject {
	if m != nil {
		return m.LfsObjects
	}
	return nil
}

type QueryLFSObjectByRepositoryIdAndOidRequest struct {
	RepositoryId uint64 `protobuf:"varint,1,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	Oid          string `protobuf:"bytes,2,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (m *QueryLFSObjectByRepositoryIdAndOidRequest) Reset() {
	*m = QueryLFSObjectByRepositoryIdAndOidRequest{}
}
func (m *QueryLFSObjectByRepositoryIdAndOidRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLFSObjectByRepositoryIdAndOidRequest) ProtoMessage() {}
func (*QueryLFSObjectByRepositoryIdAndOidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{40}
}
func (m *QueryLFSObjectByRepositoryIdAndOidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLFSObjectByRepositoryIdAndOidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLFSObjectByRepositoryIdAndOidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLFSObjectByRepositoryIdAndOidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLFSObjectByRepositoryIdAndOidRequest.Merge(m, src)
}
func (m *QueryLFSObjectByRepositoryIdAndOidRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLFSObjectByRepositoryIdAndOidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLFSObjectByRepositoryIdAndOidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLFSObjectByRepositoryIdAndOidRequest proto.InternalMessageInfo

func (m *QueryLFSObjectByRepositoryIdAndOidRequest) GetRepositoryId() uint64 {
	if m != nil {
		return m.RepositoryId
	}
	return 0
}

func (m *QueryLFSObjectByRepositoryIdAndOidRequest) GetOid() string {
	if m != nil {
		return m.Oid
	}
	return ""
}

type QueryLFSObjectByRepositoryIdAndOidResponse struct {
	LfsObject LFSObject `protobuf:"bytes,1,opt,name=lfs_object,json=lfsObject,proto3" json:"lfs_object"`
}

func (m *QueryLFSObjectByRepositoryIdAndOidResponse) Reset() {
	*m = QueryLFSObjectByRepositoryIdAndOidResponse{}
}
func (m *QueryLFSObjectByRepositoryIdAndOidResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLFSObjectByRepositoryIdAndOidResponse) ProtoMessage() {}
func (*QueryLFSObjectByRepositoryIdAndOidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3064f8a874606e, []int{41}
}
func (m *QueryLFSObjectByRepositoryIdAndOidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLFSObjectByRepositoryIdAndOidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLFSObjectByRepositoryIdAndOidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLFSObjectByRepositoryIdAndOidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLFSObjectByRepositoryIdAndOidResponse.Merge(m, src)
}
func (m *QueryLFSObjectByRepositoryIdAndOidResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLFSObjectByRepositoryIdAndOidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLFSObjectByRepositoryIdAndOidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLFSObjectByRepositoryIdAndOidResponse proto.InternalMessageInfo

func (m *QueryLFSObjectByRepositoryIdAndOidResponse) GetLfsObject() LFSObject {
	if m != nil {
		return m.LfsObject
	}
	return LFSObject{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "gitopia.gitopia.storage.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "gitopia.gitopia.storage.QueryParamsResponse")
	proto.RegisterType((*QueryProviderRequest)(nil), "gitopia.gitopia.storage.QueryProviderRequest")
	proto.RegisterType((*QueryProviderResponse)(nil), "gitopia.gitopia.storage.QueryProviderResponse")
	proto.RegisterType((*QueryProvidersRequest)(nil), "gitopia.gitopia.storage.QueryProvidersRequest")
	proto.RegisterType((*QueryProvidersResponse)(nil), "gitopia.gitopia.storage.QueryProvidersResponse")
	proto.RegisterType((*QueryActiveProvidersRequest)(nil), "gitopia.gitopia.storage.QueryActiveProvidersRequest")
	proto.RegisterType((*QueryActiveProvidersResponse)(nil), "gitopia.gitopia.storage.QueryActiveProvidersResponse")
	proto.RegisterType((*QueryPackfileRequest)(nil), "gitopia.gitopia.storage.QueryPackfileRequest")
	proto.RegisterType((*QueryPackfileResponse)(nil), "gitopia.gitopia.storage.QueryPackfileResponse")
	proto.RegisterType((*QueryPackfilesRequest)(nil), "gitopia.gitopia.storage.QueryPackfilesRequest")
	proto.RegisterType((*QueryPackfilesResponse)(nil), "gitopia.gitopia.storage.QueryPackfilesResponse")
	proto.RegisterType((*QueryRepositoryPackfileRequest)(nil), "gitopia.gitopia.storage.QueryRepositoryPackfileRequest")
	proto.RegisterType((*QueryRepositoryPackfileResponse)(nil), "gitopia.gitopia.storage.QueryRepositoryPackfileResponse")
	proto.RegisterType((*QueryReleaseAssetRequest)(nil), "gitopia.gitopia.storage.QueryReleaseAssetRequest")
	proto.RegisterType((*QueryReleaseAssetResponse)(nil), "gitopia.gitopia.storage.QueryReleaseAssetResponse")
	proto.RegisterType((*QueryReleaseAssetsRequest)(nil), "gitopia.gitopia.storage.QueryReleaseAssetsRequest")
	proto.RegisterType((*QueryReleaseAssetsResponse)(nil), "gitopia.gitopia.storage.QueryReleaseAssetsResponse")
	proto.RegisterType((*QueryRepositoryReleaseAssetRequest)(nil), "gitopia.gitopia.storage.QueryRepositoryReleaseAssetRequest")
	proto.RegisterType((*QueryRepositoryReleaseAssetResponse)(nil), "gitopia.gitopia.storage.QueryRepositoryReleaseAssetResponse")
	proto.RegisterType((*QueryRepositoryReleaseAssetsRequest)(nil), "gitopia.gitopia.storage.QueryRepositoryReleaseAssetsRequest")
	proto.RegisterType((*QueryRepositoryReleaseAssetsResponse)(nil), "gitopia.gitopia.storage.QueryRepositoryReleaseAssetsResponse")
	proto.RegisterType((*QueryRepositoryReleaseAssetsByRepositoryIdRequest)(nil), "gitopia.gitopia.storage.QueryRepositoryReleaseAssetsByRepositoryIdRequest")
	proto.RegisterType((*QueryRepositoryReleaseAssetsByRepositoryIdResponse)(nil), "gitopia.gitopia.storage.QueryRepositoryReleaseAssetsByRepositoryIdResponse")
	proto.RegisterType((*QueryChallengeRequest)(nil), "gitopia.gitopia.storage.QueryChallengeRequest")
	proto.RegisterType((*QueryChallengeResponse)(nil), "gitopia.gitopia.storage.QueryChallengeResponse")
	proto.RegisterType((*QueryChallengesRequest)(nil), "gitopia.gitopia.storage.QueryChallengesRequest")
	proto.RegisterType((*QueryChallengesResponse)(nil), "gitopia.gitopia.storage.QueryChallengesResponse")
	proto.RegisterType((*QueryStorageStatsRequest)(nil), "gitopia.gitopia.storage.QueryStorageStatsRequest")
	proto.RegisterType((*QueryStorageStatsResponse)(nil), "gitopia.gitopia.storage.QueryStorageStatsResponse")
	proto.RegisterType((*QueryCidReferenceCountRequest)(nil), "gitopia.gitopia.storage.QueryCidReferenceCountRequest")
	proto.RegisterType((*QueryCidReferenceCountResponse)(nil), "gitopia.gitopia.storage.QueryCidReferenceCountResponse")
	proto.RegisterType((*QueryCidReferenceCountsRequest)(nil), "gitopia.gitopia.storage.QueryCidReferenceCountsRequest")
	proto.RegisterType((*QueryCidReferenceCountsResponse)(nil), "gitopia.gitopia.storage.QueryCidReferenceCountsResponse")
	proto.RegisterType((*QueryLFSObjectsRequest)(nil), "gitopia.gitopia.storage.QueryLFSObjectsRequest")
	proto.RegisterType((*QueryLFSObjectsResponse)(nil), "gitopia.gitopia.storage.QueryLFSObjectsResponse")
	proto.RegisterType((*QueryLFSObjectRequest)(nil), "gitopia.gitopia.storage.QueryLFSObjectRequest")
	proto.RegisterType((*QueryLFSObjectResponse)(nil), "gitopia.gitopia.storage.QueryLFSObjectResponse")
	proto.RegisterType((*QueryLFSObjectsByRepositoryIdRequest)(nil), "gitopia.gitopia.storage.QueryLFSObjectsByRepositoryIdRequest")
	proto.RegisterType((*QueryLFSObjectsByRepositoryIdResponse)(nil), "gitopia.gitopia.storage.QueryLFSObjectsByRepositoryIdResponse")
	proto.RegisterType((*QueryLFSObjectByRepositoryIdAndOidRequest)(nil), "gitopia.gitopia.storage.QueryLFSObjectByRepositoryIdAndOidRequest")
	proto.RegisterType((*QueryLFSObjectByRepositoryIdAndOidResponse)(nil), "gitopia.gitopia.storage.QueryLFSObjectByRepositoryIdAndOidResponse")
}

func init() {
	proto.RegisterFile("gitopia/gitopia/storage/query.proto", fileDescriptor_3e3064f8a874606e)
}

var fileDescriptor_3e3064f8a874606e = []byte{
	// 1623 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5a, 0x4d, 0x70, 0xdb, 0x44,
	0x14, 0x8e, 0x92, 0xb6, 0xd4, 0xaf, 0x69, 0x29, 0x8f, 0xd0, 0x06, 0xd3, 0x3a, 0xed, 0xe6, 0xaf,
	0x4d, 0x6a, 0xab, 0x49, 0xff, 0x18, 0x68, 0xcb, 0x24, 0x69, 0x93, 0xfe, 0x0d, 0x0d, 0x2e, 0xc3,
	0x81, 0xe9, 0x8c, 0x91, 0x2d, 0xc5, 0x15, 0x38, 0x96, 0x6b, 0x29, 0x81, 0x92, 0xc9, 0x85, 0x73,
	0x0f, 0xcc, 0x70, 0x81, 0x19, 0xca, 0x70, 0x04, 0x06, 0x0e, 0x1c, 0xb9, 0x30, 0x1c, 0x7b, 0x81,
	0x29, 0xc3, 0x85, 0x13, 0xc3, 0xa4, 0x1c, 0x98, 0xe1, 0xce, 0x99, 0xd1, 0xea, 0x69, 0x25, 0xcb,
	0x92, 0x25, 0x3b, 0xca, 0x81, 0x53, 0xec, 0xdd, 0x7d, 0xfb, 0xbe, 0xef, 0xbd, 0xb7, 0x6f, 0xf5,
	0x29, 0x86, 0xd1, 0xaa, 0x6e, 0x19, 0x0d, 0x5d, 0x91, 0xdd, 0xbf, 0xa6, 0x65, 0x34, 0x95, 0xaa,
	0x26, 0xdf, 0x5f, 0xd3, 0x9a, 0x0f, 0x0a, 0x8d, 0xa6, 0x61, 0x19, 0x78, 0x98, 0x26, 0x0b, 0xee,
	0x5f, 0x5a, 0x94, 0x1d, 0xaa, 0x1a, 0x55, 0x83, 0xaf, 0x91, 0xed, 0x4f, 0xce, 0xf2, 0xec, 0x91,
	0xaa, 0x61, 0x54, 0x6b, 0x9a, 0xac, 0x34, 0x74, 0x59, 0xa9, 0xd7, 0x0d, 0x4b, 0xb1, 0x74, 0xa3,
	0x6e, 0xd2, 0xec, 0x54, 0xc5, 0x30, 0x57, 0x0d, 0x53, 0x2e, 0x2b, 0x26, 0x79, 0x91, 0xd7, 0x67,
	0xca, 0x9a, 0xa5, 0xcc, 0xc8, 0x0d, 0xa5, 0xaa, 0xd7, 0xf9, 0x62, 0x5a, 0x3b, 0x16, 0x85, 0xae,
	0xa1, 0x34, 0x95, 0x55, 0x77, 0xc7, 0x48, 0x0e, 0xd6, 0x83, 0x86, 0x46, 0x8b, 0xd8, 0x10, 0xe0,
	0x1b, 0xb6, 0xb3, 0x65, 0x6e, 0x59, 0xd4, 0xee, 0xaf, 0x69, 0xa6, 0xc5, 0xde, 0x84, 0xe7, 0x5b,
	0x46, 0xcd, 0x86, 0x51, 0x37, 0x35, 0xbc, 0x04, 0x7b, 0x1c, 0x0f, 0xc3, 0xd2, 0x31, 0xe9, 0xc4,
	0xbe, 0xd9, 0x91, 0x42, 0x44, 0x04, 0x0a, 0x8e, 0xe1, 0xfc, 0xae, 0xc7, 0x7f, 0x8c, 0xf4, 0x15,
	0xc9, 0x88, 0x9d, 0x86, 0x21, 0x67, 0xd7, 0xa6, 0xb1, 0xae, 0xab, 0x5a, 0x93, 0xbc, 0xe1, 0x30,
	0x3c, 0xa3, 0xa8, 0x6a, 0x53, 0x33, 0x9d, 0x7d, 0x33, 0x45, 0xf7, 0x2b, 0xbb, 0x0b, 0x2f, 0x04,
	0x2c, 0x08, 0xc9, 0x02, 0xec, 0x6d, 0xd0, 0x18, 0x61, 0x39, 0x1e, 0x8d, 0x85, 0x16, 0x12, 0x1a,
	0x61, 0xc8, 0x4a, 0x81, 0xdd, 0x5d, 0xfa, 0xb8, 0x08, 0xe0, 0xc5, 0x9c, 0xf6, 0x9f, 0x28, 0x38,
	0x09, 0x2a, 0xd8, 0x09, 0x2a, 0x38, 0x65, 0x40, 0x09, 0x2a, 0x2c, 0x2b, 0x55, 0x8d, 0x6c, 0x8b,
	0x3e, 0x4b, 0xf6, 0x95, 0x04, 0x87, 0x82, 0x1e, 0x88, 0xc0, 0x55, 0xc8, 0xb8, 0x38, 0x6c, 0xd6,
	0x03, 0xdd, 0x30, 0xf0, 0x2c, 0x71, 0xa9, 0x05, 0x69, 0x3f, 0x47, 0x3a, 0x19, 0x8b, 0xd4, 0xc1,
	0xd0, 0x02, 0xf5, 0x28, 0xbc, 0xc4, 0x91, 0xce, 0x55, 0x2c, 0x7d, 0x5d, 0x0b, 0x46, 0x84, 0x69,
	0x70, 0x24, 0x7c, 0x3a, 0x55, 0x3a, 0x6c, 0xc2, 0xad, 0x10, 0xa5, 0xf2, 0xde, 0x8a, 0x5e, 0x73,
	0x83, 0x8a, 0x07, 0xa0, 0x5f, 0x57, 0x79, 0x22, 0x76, 0x15, 0xfb, 0x75, 0xd5, 0xab, 0x0b, 0xb1,
	0xce, 0x57, 0x17, 0x34, 0x16, 0x5f, 0x17, 0xb4, 0x50, 0xd4, 0x05, 0x7d, 0xf7, 0xea, 0x82, 0x06,
	0x76, 0xb0, 0x2e, 0x3c, 0x0f, 0xbe, 0x40, 0xba, 0x83, 0xf1, 0x81, 0x6c, 0x65, 0xe0, 0x59, 0xa6,
	0x57, 0x17, 0x57, 0x21, 0xc7, 0x91, 0x16, 0xb5, 0x86, 0x61, 0xea, 0x96, 0xd1, 0x9e, 0x9b, 0x51,
	0xd8, 0xdf, 0x14, 0x93, 0x25, 0x91, 0xa6, 0x41, 0x6f, 0xf0, 0xba, 0xca, 0x56, 0x60, 0x24, 0x72,
	0x9b, 0x34, 0x53, 0x37, 0x05, 0xc3, 0xe4, 0xa7, 0xa6, 0x29, 0xa6, 0x36, 0x67, 0x9a, 0x9a, 0x15,
	0x55, 0x44, 0xab, 0xf0, 0x62, 0xc8, 0x5a, 0x42, 0xb3, 0x6c, 0xb3, 0xe2, 0xe3, 0x25, 0xc5, 0x9e,
	0x20, 0x48, 0xe3, 0x91, 0x90, 0xfc, 0xbb, 0x10, 0xac, 0xc1, 0xa6, 0x6f, 0x8c, 0x55, 0x42, 0xdc,
	0xa5, 0x5e, 0x59, 0x3f, 0x48, 0x90, 0x0d, 0xf3, 0x42, 0xac, 0x8a, 0x70, 0xa0, 0x85, 0x95, 0x5b,
	0x62, 0x5d, 0xd1, 0xda, 0xef, 0xa7, 0x95, 0x62, 0xa9, 0x19, 0xc0, 0x02, 0x35, 0x12, 0x96, 0xc5,
	0x24, 0xe5, 0x86, 0x07, 0x61, 0xc0, 0x52, 0xaa, 0x1c, 0x4c, 0xa6, 0x68, 0x7f, 0x44, 0x84, 0x5d,
	0x75, 0x65, 0x55, 0x1b, 0x1e, 0xe0, 0x43, 0xfc, 0x33, 0x7b, 0x1f, 0x46, 0x3b, 0x3a, 0xdc, 0xb1,
	0x52, 0xb8, 0xdb, 0xd1, 0xb1, 0xb9, 0x3d, 0xaa, 0xec, 0x43, 0x18, 0xeb, 0xbc, 0xfb, 0xce, 0x15,
	0x03, 0xfb, 0x52, 0x82, 0x99, 0x4e, 0xce, 0xe7, 0x7d, 0x13, 0xd7, 0xd5, 0xae, 0x88, 0x2e, 0x86,
	0xd4, 0x59, 0x2f, 0x47, 0xe4, 0x57, 0x09, 0x66, 0xbb, 0x81, 0xf8, 0x7f, 0x38, 0x3a, 0x93, 0x74,
	0x63, 0x2d, 0xdc, 0x53, 0x6a, 0x35, 0xad, 0x5e, 0x8d, 0xbc, 0x38, 0xdf, 0xa1, 0x8b, 0xc7, 0xb7,
	0x90, 0xf8, 0x2d, 0x42, 0xa6, 0xe2, 0x0e, 0x52, 0x85, 0xb3, 0x48, 0x6a, 0xc2, 0xdc, 0xbd, 0x79,
	0x84, 0x69, 0xbb, 0x87, 0xd4, 0x7b, 0xdc, 0xb7, 0x12, 0x1c, 0x6e, 0x73, 0x41, 0x2c, 0xae, 0x01,
	0x08, 0x28, 0x6e, 0x86, 0x92, 0xd3, 0xf0, 0xd9, 0xa6, 0x97, 0x9b, 0x2c, 0x5d, 0x49, 0x77, 0x1c,
	0xa7, 0x77, 0x2c, 0x45, 0x9c, 0x70, 0x71, 0x05, 0xb5, 0xce, 0x79, 0x7d, 0x87, 0x80, 0x96, 0x4c,
	0x7b, 0x22, 0xb6, 0xef, 0xf8, 0x77, 0x71, 0xfb, 0x8e, 0xe9, 0x1b, 0x63, 0x33, 0x70, 0xd4, 0x09,
	0x9c, 0xae, 0x16, 0xb5, 0x15, 0xad, 0xa9, 0xd5, 0x2b, 0xda, 0x82, 0xb1, 0x56, 0x17, 0xcd, 0xf5,
	0x20, 0x0c, 0x54, 0xa8, 0x5e, 0x32, 0x45, 0xfb, 0x23, 0x3b, 0x4f, 0xf7, 0x7f, 0x88, 0x09, 0xc1,
	0x1c, 0x82, 0xdd, 0x15, 0x7b, 0x80, 0xaa, 0xcc, 0xf9, 0xc2, 0xee, 0x45, 0xd9, 0xa5, 0x5e, 0x0e,
	0xbf, 0x48, 0xf4, 0x6c, 0x11, 0xe6, 0x8a, 0x30, 0x96, 0x61, 0xa8, 0xa2, 0xab, 0xa5, 0xa6, 0x3b,
	0x5d, 0xe2, 0x20, 0xdd, 0x02, 0x99, 0x8a, 0x2e, 0x90, 0xe0, 0x96, 0x14, 0x56, 0xac, 0xb4, 0xf9,
	0x4a, 0xaf, 0x60, 0xdc, 0x13, 0x74, 0x6b, 0xf1, 0xce, 0xed, 0xf2, 0xbb, 0x5a, 0x25, 0xfd, 0x90,
	0x7d, 0xe7, 0x9e, 0x20, 0xbf, 0x0b, 0x0a, 0xd5, 0x75, 0xd8, 0x57, 0x5b, 0x31, 0x4b, 0x86, 0x33,
	0x1c, 0x7b, 0x84, 0xc4, 0x0e, 0xee, 0x11, 0xaa, 0xad, 0x98, 0xb4, 0x65, 0xfa, 0xed, 0x4d, 0x38,
	0x8b, 0x6a, 0x6f, 0x4a, 0x30, 0x74, 0x82, 0xd6, 0x12, 0x80, 0x47, 0x2b, 0xb6, 0xbf, 0x05, 0x59,
	0x65, 0x04, 0x2b, 0x76, 0x93, 0x6e, 0x57, 0x2f, 0x74, 0xbd, 0xdf, 0x69, 0xac, 0x09, 0xe3, 0x31,
	0x9b, 0xa5, 0x9e, 0x15, 0x56, 0x86, 0x93, 0xad, 0x3e, 0x5b, 0x5d, 0xce, 0xd5, 0xd5, 0xdb, 0xba,
	0xda, 0xed, 0x23, 0x88, 0xa1, 0xab, 0xee, 0x23, 0x88, 0xa1, 0xab, 0x6c, 0x0d, 0xa6, 0x92, 0xf8,
	0x48, 0x39, 0x37, 0xb3, 0x4f, 0x72, 0xb0, 0x9b, 0xfb, 0xc5, 0x87, 0x12, 0xec, 0x71, 0xde, 0x41,
	0xe0, 0x74, 0xe4, 0x4e, 0xed, 0x2f, 0x3e, 0xb2, 0xa7, 0x92, 0x2d, 0x76, 0x80, 0xb3, 0xc9, 0x8f,
	0x7e, 0xfb, 0xeb, 0x93, 0xfe, 0xe3, 0x38, 0x22, 0x77, 0x7e, 0x21, 0x83, 0x5f, 0x48, 0xb0, 0xd7,
	0x55, 0xbd, 0x98, 0x8f, 0xf1, 0xd1, 0xfa, 0x76, 0x24, 0x5b, 0x48, 0xba, 0x9c, 0x40, 0x9d, 0xe1,
	0xa0, 0xf2, 0x38, 0x1d, 0x0d, 0x8a, 0x4c, 0xe4, 0x0d, 0x7a, 0xcf, 0xb2, 0x89, 0x9f, 0x4a, 0x90,
	0x11, 0xaa, 0x1e, 0x13, 0xba, 0x14, 0x51, 0x93, 0x13, 0xaf, 0x27, 0x8c, 0x53, 0x1c, 0xe3, 0x18,
	0xb2, 0x58, 0x8c, 0x26, 0x7e, 0x66, 0xc7, 0x8e, 0xf4, 0x5d, 0x6c, 0xec, 0x5a, 0xb5, 0x69, 0x6c,
	0xec, 0x02, 0x1a, 0x94, 0x15, 0x38, 0xae, 0x13, 0x38, 0xd1, 0x21, 0xa1, 0x8e, 0x89, 0xbc, 0xa1,
	0xab, 0x14, 0x36, 0x21, 0xba, 0x13, 0x7a, 0x4b, 0x1c, 0xb6, 0xe0, 0xcb, 0x81, 0x24, 0x61, 0x13,
	0x60, 0x7e, 0x96, 0x00, 0xdb, 0xd5, 0x36, 0x5e, 0xe8, 0xec, 0x33, 0x52, 0xe6, 0x67, 0x5f, 0xee,
	0xde, 0x90, 0x50, 0x5f, 0xe1, 0xa8, 0x2f, 0xe3, 0xc5, 0x48, 0xd4, 0x5e, 0x37, 0x91, 0x37, 0x5a,
	0xda, 0xcd, 0xa6, 0x20, 0x84, 0xdf, 0x48, 0x30, 0xe8, 0x7f, 0xa2, 0xc6, 0x99, 0x38, 0x40, 0x6d,
	0xda, 0x31, 0x3b, 0xdb, 0x8d, 0x49, 0xe2, 0xe3, 0x44, 0xcf, 0xf4, 0x79, 0x2e, 0x0b, 0x9c, 0xba,
	0xf8, 0x5a, 0x82, 0xfd, 0x2d, 0xa2, 0x02, 0xbb, 0x70, 0x2d, 0xea, 0xe3, 0x4c, 0x57, 0x36, 0x84,
	0x57, 0xe6, 0x78, 0x4f, 0xe2, 0x64, 0x32, 0xbc, 0x26, 0xfe, 0x23, 0xc1, 0xa1, 0x70, 0x29, 0x84,
	0xaf, 0x26, 0xcd, 0x79, 0x58, 0xb0, 0x2f, 0xf6, 0x66, 0x4c, 0x34, 0xde, 0xe2, 0x34, 0x96, 0xf1,
	0xf5, 0x5e, 0x8a, 0x26, 0x90, 0x11, 0x4b, 0xa9, 0x6e, 0xca, 0x1b, 0xb6, 0xe4, 0xdf, 0xc4, 0xbf,
	0x25, 0x38, 0x1c, 0x21, 0xfc, 0xb0, 0x27, 0xc4, 0x22, 0x5b, 0x97, 0x7a, 0xb4, 0x26, 0xc2, 0xcb,
	0x9c, 0xf0, 0x0d, 0xbc, 0xb6, 0x6d, 0xc2, 0xa6, 0xc3, 0x18, 0x1f, 0xf6, 0xc3, 0x78, 0x22, 0x8d,
	0x8b, 0x37, 0x7a, 0x82, 0x1e, 0xfa, 0xdc, 0x93, 0xbd, 0x99, 0xca, 0x5e, 0x14, 0x94, 0x1b, 0x3c,
	0x28, 0x57, 0x70, 0x7e, 0xfb, 0x41, 0xc1, 0x47, 0x12, 0x64, 0x84, 0xe0, 0x8b, 0xeb, 0xd5, 0x41,
	0x21, 0x1d, 0xd7, 0xab, 0xdb, 0xf4, 0x74, 0x82, 0x73, 0x28, 0xc4, 0xa6, 0xd3, 0x33, 0x3e, 0x97,
	0x00, 0x3c, 0x45, 0x8b, 0x49, 0x1d, 0x8a, 0xfa, 0x3b, 0x9d, 0xdc, 0x80, 0x20, 0x4e, 0x73, 0x88,
	0xe3, 0x38, 0x1a, 0x0f, 0x91, 0x87, 0x6f, 0xd0, 0x2f, 0x30, 0xe3, 0xfa, 0x6f, 0x88, 0xdc, 0x8d,
	0xeb, 0xbf, 0x61, 0x2a, 0x98, 0x4d, 0x70, 0x90, 0xc7, 0x30, 0x17, 0x09, 0x92, 0x8b, 0x63, 0xfc,
	0x49, 0x82, 0xe7, 0xda, 0xe4, 0x1a, 0x9e, 0x8f, 0x09, 0x4a, 0x84, 0x10, 0xce, 0x5e, 0xe8, 0xda,
	0x8e, 0xe0, 0xbe, 0xc2, 0xe1, 0x9e, 0xc5, 0xd9, 0xe8, 0x98, 0xea, 0x6a, 0x5e, 0x08, 0xd1, 0x3c,
	0x17, 0xa2, 0xf2, 0x46, 0xc5, 0xae, 0x80, 0x1f, 0x25, 0xc0, 0x76, 0x11, 0x8b, 0xdd, 0x62, 0x31,
	0x13, 0x5e, 0xd9, 0xd1, 0x7a, 0x99, 0x9d, 0xe3, 0x2c, 0x64, 0xcc, 0x77, 0xc3, 0xc2, 0xc4, 0xef,
	0x25, 0x78, 0x36, 0xf0, 0x1f, 0x22, 0x3c, 0xdb, 0x19, 0x44, 0xf8, 0xff, 0x9b, 0xb2, 0xe7, 0xba,
	0xb4, 0x22, 0xdc, 0x33, 0x1c, 0xf7, 0x34, 0x9e, 0x8c, 0xc4, 0xad, 0x70, 0xcb, 0xbc, 0xf7, 0x78,
	0xf9, 0x48, 0x02, 0xf0, 0xe4, 0x57, 0xdc, 0xb1, 0x6b, 0xd3, 0xe4, 0x71, 0xc7, 0xae, 0x5d, 0x61,
	0xb3, 0x53, 0x1c, 0xe4, 0x04, 0x8e, 0x45, 0x82, 0xac, 0xad, 0x98, 0x79, 0x92, 0x7a, 0xb6, 0x74,
	0xc8, 0x88, 0x4d, 0xe2, 0xda, 0x56, 0x50, 0x20, 0x67, 0xe5, 0xc4, 0xeb, 0x09, 0xdc, 0x69, 0x0e,
	0x6e, 0x0a, 0x4f, 0x24, 0x00, 0xe7, 0xf4, 0xad, 0x2d, 0x09, 0x86, 0xa3, 0xf4, 0x2b, 0x5e, 0x4a,
	0x1a, 0x9d, 0xf0, 0xcb, 0xe4, 0x72, 0xaf, 0xe6, 0xc4, 0x66, 0x89, 0xb3, 0x99, 0xc3, 0xd7, 0x7a,
	0xb9, 0x3f, 0xfc, 0x59, 0xf8, 0x57, 0x82, 0xa3, 0x1d, 0xc5, 0x2c, 0xce, 0x27, 0x84, 0xda, 0x41,
	0x6d, 0x67, 0x17, 0xb6, 0xb5, 0x07, 0x71, 0xbe, 0xc5, 0x39, 0x2f, 0xe2, 0x95, 0xed, 0x71, 0x96,
	0x37, 0x0c, 0x5d, 0xdd, 0x9c, 0x5f, 0x7a, 0xbc, 0x95, 0x93, 0x9e, 0x6c, 0xe5, 0xa4, 0x3f, 0xb7,
	0x72, 0xd2, 0xc7, 0x4f, 0x73, 0x7d, 0x4f, 0x9e, 0xe6, 0xfa, 0x7e, 0x7f, 0x9a, 0xeb, 0x7b, 0x3b,
	0x5f, 0xd5, 0xad, 0x7b, 0x6b, 0xe5, 0x42, 0xc5, 0x58, 0x6d, 0xf3, 0xb4, 0x7e, 0x5e, 0xfe, 0xa0,
	0xf5, 0xe7, 0x06, 0xe5, 0x3d, 0xfc, 0xf7, 0x06, 0x67, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x0a,
	0x46, 0xf8, 0x09, 0x5a, 0x21, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of the module
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Provider queries a storage provider by address
	Provider(ctx context.Context, in *QueryProviderRequest, opts ...grpc.CallOption) (*QueryProviderResponse, error)
	// Providers queries all storage providers
	Providers(ctx context.Context, in *QueryProvidersRequest, opts ...grpc.CallOption) (*QueryProvidersResponse, error)
	// Packfile queries a packfile by id
	Packfile(ctx context.Context, in *QueryPackfileRequest, opts ...grpc.CallOption) (*QueryPackfileResponse, error)
	// Packfiles queries all packfiles
	Packfiles(ctx context.Context, in *QueryPackfilesRequest, opts ...grpc.CallOption) (*QueryPackfilesResponse, error)
	// RepositoryPackfile queries a packfile for a repository
	RepositoryPackfile(ctx context.Context, in *QueryRepositoryPackfileRequest, opts ...grpc.CallOption) (*QueryRepositoryPackfileResponse, error)
	// ReleaseAsset queries a release asset by id
	ReleaseAsset(ctx context.Context, in *QueryReleaseAssetRequest, opts ...grpc.CallOption) (*QueryReleaseAssetResponse, error)
	// ReleaseAssets queries all release assets
	ReleaseAssets(ctx context.Context, in *QueryReleaseAssetsRequest, opts ...grpc.CallOption) (*QueryReleaseAssetsResponse, error)
	// RepositoryReleaseAsset queries a release asset for a repository by repository id, tag and name
	RepositoryReleaseAsset(ctx context.Context, in *QueryRepositoryReleaseAssetRequest, opts ...grpc.CallOption) (*QueryRepositoryReleaseAssetResponse, error)
	// RepositoryReleaseAssets queries all release assets for a repository by repository id and tag
	RepositoryReleaseAssets(ctx context.Context, in *QueryRepositoryReleaseAssetsRequest, opts ...grpc.CallOption) (*QueryRepositoryReleaseAssetsResponse, error)
	// RepositoryReleaseAssetsByRepositoryId queries all release assets for a repository by repository id
	RepositoryReleaseAssetsByRepositoryId(ctx context.Context, in *QueryRepositoryReleaseAssetsByRepositoryIdRequest, opts ...grpc.CallOption) (*QueryRepositoryReleaseAssetsByRepositoryIdResponse, error)
	// Challenge queries a challenge by id
	Challenge(ctx context.Context, in *QueryChallengeRequest, opts ...grpc.CallOption) (*QueryChallengeResponse, error)
	Challenges(ctx context.Context, in *QueryChallengesRequest, opts ...grpc.CallOption) (*QueryChallengesResponse, error)
	StorageStats(ctx context.Context, in *QueryStorageStatsRequest, opts ...grpc.CallOption) (*QueryStorageStatsResponse, error)
	CidReferenceCount(ctx context.Context, in *QueryCidReferenceCountRequest, opts ...grpc.CallOption) (*QueryCidReferenceCountResponse, error)
	CidReferenceCounts(ctx context.Context, in *QueryCidReferenceCountsRequest, opts ...grpc.CallOption) (*QueryCidReferenceCountsResponse, error)
	ActiveProviders(ctx context.Context, in *QueryActiveProvidersRequest, opts ...grpc.CallOption) (*QueryActiveProvidersResponse, error)
	LFSObjects(ctx context.Context, in *QueryLFSObjectsRequest, opts ...grpc.CallOption) (*QueryLFSObjectsResponse, error)
	LFSObject(ctx context.Context, in *QueryLFSObjectRequest, opts ...grpc.CallOption) (*QueryLFSObjectResponse, error)
	LFSObjectsByRepositoryId(ctx context.Context, in *QueryLFSObjectsByRepositoryIdRequest, opts ...grpc.CallOption) (*QueryLFSObjectsByRepositoryIdResponse, error)
	LFSObjectByRepositoryIdAndOid(ctx context.Context, in *QueryLFSObjectByRepositoryIdAndOidRequest, opts ...grpc.CallOption) (*QueryLFSObjectByRepositoryIdAndOidResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/gitopia.gitopia.storage.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Provider(ctx context.Context, in *QueryProviderRequest, opts ...grpc.CallOption) (*QueryProviderResponse, error) {
	out := new(QueryProviderResponse)
	err := c.cc.Invoke(ctx, "/gitopia.gitopia.storage.Query/Provider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Providers(ctx context.Context, in *QueryProvidersRequest, opts ...grpc.CallOption) (*QueryProvidersResponse, error) {
	out := new(QueryProvidersResponse)
	err := c.cc.Invoke(ctx, "/gitopia.gitopia.storage.Query/Providers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Packfile(ctx context.Context, in *QueryPackfileRequest, opts ...grpc.CallOption) (*QueryPackfileResponse, error) {
	out := new(QueryPackfileResponse)
	err := c.cc.Invoke(ctx, "/gitopia.gitopia.storage.Query/Packfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Packfiles(ctx context.Context, in *QueryPackfilesRequest, opts ...grpc.CallOption) (*QueryPackfilesResponse, error) {
	out := new(QueryPackfilesResponse)
	err := c.cc.Invoke(ctx, "/gitopia.gitopia.storage.Query/Packfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RepositoryPackfile(ctx context.Context, in *QueryRepositoryPackfileRequest, opts ...grpc.CallOption) (*QueryRepositoryPackfileResponse, error) {
	out := new(QueryRepositoryPackfileResponse)
	err := c.cc.Invoke(ctx, "/gitopia.gitopia.storage.Query/RepositoryPackfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReleaseAsset(ctx context.Context, in *QueryReleaseAssetRequest, opts ...grpc.CallOption) (*QueryReleaseAssetResponse, error) {
	out := new(QueryReleaseAssetResponse)
	err := c.cc.Invoke(ctx, "/gitopia.gitopia.storage.Query/ReleaseAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReleaseAssets(ctx context.Context, in *QueryReleaseAssetsRequest, opts ...grpc.CallOption) (*QueryReleaseAssetsResponse, error) {
	out := new(QueryReleaseAssetsResponse)
	err := c.cc.Invoke(ctx, "/gitopia.gitopia.storage.Query/ReleaseAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RepositoryReleaseAsset(ctx context.Context, in *QueryRepositoryReleaseAssetRequest, opts ...grpc.CallOption) (*QueryRepositoryReleaseAssetResponse, error) {
	out := new(QueryRepositoryReleaseAssetResponse)
	err := c.cc.Invoke(ctx, "/gitopia.gitopia.storage.Query/RepositoryReleaseAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RepositoryReleaseAssets(ctx context.Context, in *QueryRepositoryReleaseAssetsRequest, opts ...grpc.CallOption) (*QueryRepositoryReleaseAssetsResponse, error) {
	out := new(QueryRepositoryReleaseAssetsResponse)
	err := c.cc.Invoke(ctx, "/gitopia.gitopia.storage.Query/RepositoryReleaseAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RepositoryReleaseAssetsByRepositoryId(ctx context.Context, in *QueryRepositoryReleaseAssetsByRepositoryIdRequest, opts ...grpc.CallOption) (*QueryRepositoryReleaseAssetsByRepositoryIdResponse, error) {
	out := new(QueryRepositoryReleaseAssetsByRepositoryIdResponse)
	err := c.cc.Invoke(ctx, "/gitopia.gitopia.storage.Query/RepositoryReleaseAssetsByRepositoryId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Challenge(ctx context.Context, in *QueryChallengeRequest, opts ...grpc.CallOption) (*QueryChallengeResponse, error) {
	out := new(QueryChallengeResponse)
	err := c.cc.Invoke(ctx, "/gitopia.gitopia.storage.Query/Challenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Challenges(ctx context.Context, in *QueryChallengesRequest, opts ...grpc.CallOption) (*QueryChallengesResponse, error) {
	out := new(QueryChallengesResponse)
	err := c.cc.Invoke(ctx, "/gitopia.gitopia.storage.Query/Challenges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StorageStats(ctx context.Context, in *QueryStorageStatsRequest, opts ...grpc.CallOption) (*QueryStorageStatsResponse, error) {
	out := new(QueryStorageStatsResponse)
	err := c.cc.Invoke(ctx, "/gitopia.gitopia.storage.Query/StorageStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CidReferenceCount(ctx context.Context, in *QueryCidReferenceCountRequest, opts ...grpc.CallOption) (*QueryCidReferenceCountResponse, error) {
	out := new(QueryCidReferenceCountResponse)
	err := c.cc.Invoke(ctx, "/gitopia.gitopia.storage.Query/CidReferenceCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CidReferenceCounts(ctx context.Context, in *QueryCidReferenceCountsRequest, opts ...grpc.CallOption) (*QueryCidReferenceCountsResponse, error) {
	out := new(QueryCidReferenceCountsResponse)
	err := c.cc.Invoke(ctx, "/gitopia.gitopia.storage.Query/CidReferenceCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActiveProviders(ctx context.Context, in *QueryActiveProvidersRequest, opts ...grpc.CallOption) (*QueryActiveProvidersResponse, error) {
	out := new(QueryActiveProvidersResponse)
	err := c.cc.Invoke(ctx, "/gitopia.gitopia.storage.Query/ActiveProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LFSObjects(ctx context.Context, in *QueryLFSObjectsRequest, opts ...grpc.CallOption) (*QueryLFSObjectsResponse, error) {
	out := new(QueryLFSObjectsResponse)
	err := c.cc.Invoke(ctx, "/gitopia.gitopia.storage.Query/LFSObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LFSObject(ctx context.Context, in *QueryLFSObjectRequest, opts ...grpc.CallOption) (*QueryLFSObjectResponse, error) {
	out := new(QueryLFSObjectResponse)
	err := c.cc.Invoke(ctx, "/gitopia.gitopia.storage.Query/LFSObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LFSObjectsByRepositoryId(ctx context.Context, in *QueryLFSObjectsByRepositoryIdRequest, opts ...grpc.CallOption) (*QueryLFSObjectsByRepositoryIdResponse, error) {
	out := new(QueryLFSObjectsByRepositoryIdResponse)
	err := c.cc.Invoke(ctx, "/gitopia.gitopia.storage.Query/LFSObjectsByRepositoryId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LFSObjectByRepositoryIdAndOid(ctx context.Context, in *QueryLFSObjectByRepositoryIdAndOidRequest, opts ...grpc.CallOption) (*QueryLFSObjectByRepositoryIdAndOidResponse, error) {
	out := new(QueryLFSObjectByRepositoryIdAndOidResponse)
	err := c.cc.Invoke(ctx, "/gitopia.gitopia.storage.Query/LFSObjectByRepositoryIdAndOid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of the module
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Provider queries a storage provider by address
	Provider(context.Context, *QueryProviderRequest) (*QueryProviderResponse, error)
	// Providers queries all storage providers
	Providers(context.Context, *QueryProvidersRequest) (*QueryProvidersResponse, error)
	// Packfile queries a packfile by id
	Packfile(context.Context, *QueryPackfileRequest) (*QueryPackfileResponse, error)
	// Packfiles queries all packfiles
	Packfiles(context.Context, *QueryPackfilesRequest) (*QueryPackfilesResponse, error)
	// RepositoryPackfile queries a packfile for a repository
	RepositoryPackfile(context.Context, *QueryRepositoryPackfileRequest) (*QueryRepositoryPackfileResponse, error)
	// ReleaseAsset queries a release asset by id
	ReleaseAsset(context.Context, *QueryReleaseAssetRequest) (*QueryReleaseAssetResponse, error)
	// ReleaseAssets queries all release assets
	ReleaseAssets(context.Context, *QueryReleaseAssetsRequest) (*QueryReleaseAssetsResponse, error)
	// RepositoryReleaseAsset queries a release asset for a repository by repository id, tag and name
	RepositoryReleaseAsset(context.Context, *QueryRepositoryReleaseAssetRequest) (*QueryRepositoryReleaseAssetResponse, error)
	// RepositoryReleaseAssets queries all release assets for a repository by repository id and tag
	RepositoryReleaseAssets(context.Context, *QueryRepositoryReleaseAssetsRequest) (*QueryRepositoryReleaseAssetsResponse, error)
	// RepositoryReleaseAssetsByRepositoryId queries all release assets for a repository by repository id
	RepositoryReleaseAssetsByRepositoryId(context.Context, *QueryRepositoryReleaseAssetsByRepositoryIdRequest) (*QueryRepositoryReleaseAssetsByRepositoryIdResponse, error)
	// Challenge queries a challenge by id
	Challenge(context.Context, *QueryChallengeRequest) (*QueryChallengeResponse, error)
	Challenges(context.Context, *QueryChallengesRequest) (*QueryChallengesResponse, error)
	StorageStats(context.Context, *QueryStorageStatsRequest) (*QueryStorageStatsResponse, error)
	CidReferenceCount(context.Context, *QueryCidReferenceCountRequest) (*QueryCidReferenceCountResponse, error)
	CidReferenceCounts(context.Context, *QueryCidReferenceCountsRequest) (*QueryCidReferenceCountsResponse, error)
	ActiveProviders(context.Context, *QueryActiveProvidersRequest) (*QueryActiveProvidersResponse, error)
	LFSObjects(context.Context, *QueryLFSObjectsRequest) (*QueryLFSObjectsResponse, error)
	LFSObject(context.Context, *QueryLFSObjectRequest) (*QueryLFSObjectResponse, error)
	LFSObjectsByRepositoryId(context.Context, *QueryLFSObjectsByRepositoryIdRequest) (*QueryLFSObjectsByRepositoryIdResponse, error)
	LFSObjectByRepositoryIdAndOid(context.Context, *QueryLFSObjectByRepositoryIdAndOidRequest) (*QueryLFSObjectByRepositoryIdAndOidResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Provider(ctx context.Context, req *QueryProviderRequest) (*QueryProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Provider not implemented")
}
func (*UnimplementedQueryServer) Providers(ctx context.Context, req *QueryProvidersRequest) (*QueryProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Providers not implemented")
}
func (*UnimplementedQueryServer) Packfile(ctx context.Context, req *QueryPackfileRequest) (*QueryPackfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Packfile not implemented")
}
func (*UnimplementedQueryServer) Packfiles(ctx context.Context, req *QueryPackfilesRequest) (*QueryPackfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Packfiles not implemented")
}
func (*UnimplementedQueryServer) RepositoryPackfile(ctx context.Context, req *QueryRepositoryPackfileRequest) (*QueryRepositoryPackfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepositoryPackfile not implemented")
}
func (*UnimplementedQueryServer) ReleaseAsset(ctx context.Context, req *QueryReleaseAssetRequest) (*QueryReleaseAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseAsset not implemented")
}
func (*UnimplementedQueryServer) ReleaseAssets(ctx context.Context, req *QueryReleaseAssetsRequest) (*QueryReleaseAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseAssets not implemented")
}
func (*UnimplementedQueryServer) RepositoryReleaseAsset(ctx context.Context, req *QueryRepositoryReleaseAssetRequest) (*QueryRepositoryReleaseAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepositoryReleaseAsset not implemented")
}
func (*UnimplementedQueryServer) RepositoryReleaseAssets(ctx context.Context, req *QueryRepositoryReleaseAssetsRequest) (*QueryRepositoryReleaseAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepositoryReleaseAssets not implemented")
}
func (*UnimplementedQueryServer) RepositoryReleaseAssetsByRepositoryId(ctx context.Context, req *QueryRepositoryReleaseAssetsByRepositoryIdRequest) (*QueryRepositoryReleaseAssetsByRepositoryIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepositoryReleaseAssetsByRepositoryId not implemented")
}
func (*UnimplementedQueryServer) Challenge(ctx context.Context, req *QueryChallengeRequest) (*QueryChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Challenge not implemented")
}
func (*UnimplementedQueryServer) Challenges(ctx context.Context, req *QueryChallengesRequest) (*QueryChallengesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Challenges not implemented")
}
func (*UnimplementedQueryServer) StorageStats(ctx context.Context, req *QueryStorageStatsRequest) (*QueryStorageStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageStats not implemented")
}
func (*UnimplementedQueryServer) CidReferenceCount(ctx context.Context, req *QueryCidReferenceCountRequest) (*QueryCidReferenceCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CidReferenceCount not implemented")
}
func (*UnimplementedQueryServer) CidReferenceCounts(ctx context.Context, req *QueryCidReferenceCountsRequest) (*QueryCidReferenceCountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CidReferenceCounts not implemented")
}
func (*UnimplementedQueryServer) ActiveProviders(ctx context.Context, req *QueryActiveProvidersRequest) (*QueryActiveProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveProviders not implemented")
}
func (*UnimplementedQueryServer) LFSObjects(ctx context.Context, req *QueryLFSObjectsRequest) (*QueryLFSObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LFSObjects not implemented")
}
func (*UnimplementedQueryServer) LFSObject(ctx context.Context, req *QueryLFSObjectRequest) (*QueryLFSObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LFSObject not implemented")
}
func (*UnimplementedQueryServer) LFSObjectsByRepositoryId(ctx context.Context, req *QueryLFSObjectsByRepositoryIdRequest) (*QueryLFSObjectsByRepositoryIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LFSObjectsByRepositoryId not implemented")
}
func (*UnimplementedQueryServer) LFSObjectByRepositoryIdAndOid(ctx context.Context, req *QueryLFSObjectByRepositoryIdAndOidRequest) (*QueryLFSObjectByRepositoryIdAndOidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LFSObjectByRepositoryIdAndOid not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitopia.gitopia.storage.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Provider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Provider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitopia.gitopia.storage.Query/Provider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Provider(ctx, req.(*QueryProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Providers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Providers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitopia.gitopia.storage.Query/Providers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Providers(ctx, req.(*QueryProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Packfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPackfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Packfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitopia.gitopia.storage.Query/Packfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Packfile(ctx, req.(*QueryPackfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Packfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPackfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Packfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitopia.gitopia.storage.Query/Packfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Packfiles(ctx, req.(*QueryPackfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RepositoryPackfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRepositoryPackfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RepositoryPackfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitopia.gitopia.storage.Query/RepositoryPackfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RepositoryPackfile(ctx, req.(*QueryRepositoryPackfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReleaseAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReleaseAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReleaseAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitopia.gitopia.storage.Query/ReleaseAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReleaseAsset(ctx, req.(*QueryReleaseAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReleaseAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReleaseAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReleaseAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitopia.gitopia.storage.Query/ReleaseAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReleaseAssets(ctx, req.(*QueryReleaseAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RepositoryReleaseAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRepositoryReleaseAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RepositoryReleaseAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitopia.gitopia.storage.Query/RepositoryReleaseAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RepositoryReleaseAsset(ctx, req.(*QueryRepositoryReleaseAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RepositoryReleaseAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRepositoryReleaseAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RepositoryReleaseAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitopia.gitopia.storage.Query/RepositoryReleaseAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RepositoryReleaseAssets(ctx, req.(*QueryRepositoryReleaseAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RepositoryReleaseAssetsByRepositoryId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRepositoryReleaseAssetsByRepositoryIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RepositoryReleaseAssetsByRepositoryId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitopia.gitopia.storage.Query/RepositoryReleaseAssetsByRepositoryId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RepositoryReleaseAssetsByRepositoryId(ctx, req.(*QueryRepositoryReleaseAssetsByRepositoryIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Challenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Challenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitopia.gitopia.storage.Query/Challenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Challenge(ctx, req.(*QueryChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Challenges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChallengesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Challenges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitopia.gitopia.storage.Query/Challenges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Challenges(ctx, req.(*QueryChallengesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StorageStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStorageStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StorageStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitopia.gitopia.storage.Query/StorageStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StorageStats(ctx, req.(*QueryStorageStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CidReferenceCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCidReferenceCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CidReferenceCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitopia.gitopia.storage.Query/CidReferenceCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CidReferenceCount(ctx, req.(*QueryCidReferenceCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CidReferenceCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCidReferenceCountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CidReferenceCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitopia.gitopia.storage.Query/CidReferenceCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CidReferenceCounts(ctx, req.(*QueryCidReferenceCountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActiveProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryActiveProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActiveProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitopia.gitopia.storage.Query/ActiveProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActiveProviders(ctx, req.(*QueryActiveProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LFSObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLFSObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LFSObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitopia.gitopia.storage.Query/LFSObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LFSObjects(ctx, req.(*QueryLFSObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LFSObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLFSObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LFSObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitopia.gitopia.storage.Query/LFSObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LFSObject(ctx, req.(*QueryLFSObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LFSObjectsByRepositoryId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLFSObjectsByRepositoryIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LFSObjectsByRepositoryId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitopia.gitopia.storage.Query/LFSObjectsByRepositoryId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LFSObjectsByRepositoryId(ctx, req.(*QueryLFSObjectsByRepositoryIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LFSObjectByRepositoryIdAndOid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLFSObjectByRepositoryIdAndOidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LFSObjectByRepositoryIdAndOid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitopia.gitopia.storage.Query/LFSObjectByRepositoryIdAndOid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LFSObjectByRepositoryIdAndOid(ctx, req.(*QueryLFSObjectByRepositoryIdAndOidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gitopia.gitopia.storage.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Provider",
			Handler:    _Query_Provider_Handler,
		},
		{
			MethodName: "Providers",
			Handler:    _Query_Providers_Handler,
		},
		{
			MethodName: "Packfile",
			Handler:    _Query_Packfile_Handler,
		},
		{
			MethodName: "Packfiles",
			Handler:    _Query_Packfiles_Handler,
		},
		{
			MethodName: "RepositoryPackfile",
			Handler:    _Query_RepositoryPackfile_Handler,
		},
		{
			MethodName: "ReleaseAsset",
			Handler:    _Query_ReleaseAsset_Handler,
		},
		{
			MethodName: "ReleaseAssets",
			Handler:    _Query_ReleaseAssets_Handler,
		},
		{
			MethodName: "RepositoryReleaseAsset",
			Handler:    _Query_RepositoryReleaseAsset_Handler,
		},
		{
			MethodName: "RepositoryReleaseAssets",
			Handler:    _Query_RepositoryReleaseAssets_Handler,
		},
		{
			MethodName: "RepositoryReleaseAssetsByRepositoryId",
			Handler:    _Query_RepositoryReleaseAssetsByRepositoryId_Handler,
		},
		{
			MethodName: "Challenge",
			Handler:    _Query_Challenge_Handler,
		},
		{
			MethodName: "Challenges",
			Handler:    _Query_Challenges_Handler,
		},
		{
			MethodName: "StorageStats",
			Handler:    _Query_StorageStats_Handler,
		},
		{
			MethodName: "CidReferenceCount",
			Handler:    _Query_CidReferenceCount_Handler,
		},
		{
			MethodName: "CidReferenceCounts",
			Handler:    _Query_CidReferenceCounts_Handler,
		},
		{
			MethodName: "ActiveProviders",
			Handler:    _Query_ActiveProviders_Handler,
		},
		{
			MethodName: "LFSObjects",
			Handler:    _Query_LFSObjects_Handler,
		},
		{
			MethodName: "LFSObject",
			Handler:    _Query_LFSObject_Handler,
		},
		{
			MethodName: "LFSObjectsByRepositoryId",
			Handler:    _Query_LFSObjectsByRepositoryId_Handler,
		},
		{
			MethodName: "LFSObjectByRepositoryIdAndOid",
			Handler:    _Query_LFSObjectByRepositoryIdAndOid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitopia/gitopia/storage/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryProviderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProviderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProviderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Provider.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryProvidersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProvidersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProvidersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProvidersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProvidersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProvidersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Providers) > 0 {
		for iNdEx := len(m.Providers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Providers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryActiveProvidersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveProvidersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveProvidersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryActiveProvidersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveProvidersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveProvidersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Providers) > 0 {
		for iNdEx := len(m.Providers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Providers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPackfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPackfileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPackfileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPackfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPackfileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPackfileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Packfile.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPackfilesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPackfilesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPackfilesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPackfilesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPackfilesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPackfilesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Packfiles) > 0 {
		for iNdEx := len(m.Packfiles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Packfiles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRepositoryPackfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRepositoryPackfileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRepositoryPackfileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RepositoryId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RepositoryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRepositoryPackfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRepositoryPackfileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRepositoryPackfileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Packfile.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryReleaseAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReleaseAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReleaseAssetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryReleaseAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReleaseAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReleaseAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ReleaseAsset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryReleaseAssetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReleaseAssetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReleaseAssetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryReleaseAssetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReleaseAssetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReleaseAssetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReleaseAssets) > 0 {
		for iNdEx := len(m.ReleaseAssets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReleaseAssets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRepositoryReleaseAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRepositoryReleaseAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRepositoryReleaseAssetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x12
	}
	if m.RepositoryId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RepositoryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRepositoryReleaseAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRepositoryReleaseAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRepositoryReleaseAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ReleaseAsset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRepositoryReleaseAssetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRepositoryReleaseAssetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRepositoryReleaseAssetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x12
	}
	if m.RepositoryId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RepositoryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRepositoryReleaseAssetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRepositoryReleaseAssetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRepositoryReleaseAssetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReleaseAssets) > 0 {
		for iNdEx := len(m.ReleaseAssets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReleaseAssets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRepositoryReleaseAssetsByRepositoryIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRepositoryReleaseAssetsByRepositoryIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRepositoryReleaseAssetsByRepositoryIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RepositoryId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RepositoryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRepositoryReleaseAssetsByRepositoryIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRepositoryReleaseAssetsByRepositoryIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRepositoryReleaseAssetsByRepositoryIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReleaseAssets) > 0 {
		for iNdEx := len(m.ReleaseAssets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReleaseAssets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryChallengeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChallengeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChallengeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryChallengeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChallengeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChallengeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Challenge.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryChallengesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChallengesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChallengesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryChallengesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChallengesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChallengesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Challenges) > 0 {
		for iNdEx := len(m.Challenges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Challenges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStorageStatsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStorageStatsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStorageStatsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryStorageStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStorageStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStorageStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StorageStats.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCidReferenceCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCidReferenceCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCidReferenceCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCidReferenceCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCidReferenceCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCidReferenceCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCidReferenceCountsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCidReferenceCountsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCidReferenceCountsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCidReferenceCountsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCidReferenceCountsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCidReferenceCountsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CidReferenceCounts) > 0 {
		for iNdEx := len(m.CidReferenceCounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CidReferenceCounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLFSObjectsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLFSObjectsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLFSObjectsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLFSObjectsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLFSObjectsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLFSObjectsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LfsObjects) > 0 {
		for iNdEx := len(m.LfsObjects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LfsObjects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLFSObjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLFSObjectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLFSObjectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLFSObjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLFSObjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLFSObjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LfsObject.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLFSObjectsByRepositoryIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLFSObjectsByRepositoryIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLFSObjectsByRepositoryIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RepositoryId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RepositoryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLFSObjectsByRepositoryIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLFSObjectsByRepositoryIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLFSObjectsByRepositoryIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LfsObjects) > 0 {
		for iNdEx := len(m.LfsObjects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LfsObjects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLFSObjectByRepositoryIdAndOidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLFSObjectByRepositoryIdAndOidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLFSObjectByRepositoryIdAndOidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Oid) > 0 {
		i -= len(m.Oid)
		copy(dAtA[i:], m.Oid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Oid)))
		i--
		dAtA[i] = 0x12
	}
	if m.RepositoryId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RepositoryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLFSObjectByRepositoryIdAndOidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLFSObjectByRepositoryIdAndOidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLFSObjectByRepositoryIdAndOidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LfsObject.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryProviderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Provider.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryProvidersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProvidersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Providers) > 0 {
		for _, e := range m.Providers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryActiveProvidersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryActiveProvidersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Providers) > 0 {
		for _, e := range m.Providers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPackfileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryPackfileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Packfile.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPackfilesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPackfilesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Packfiles) > 0 {
		for _, e := range m.Packfiles {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRepositoryPackfileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RepositoryId != 0 {
		n += 1 + sovQuery(uint64(m.RepositoryId))
	}
	return n
}

func (m *QueryRepositoryPackfileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Packfile.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryReleaseAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryReleaseAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ReleaseAsset.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryReleaseAssetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryReleaseAssetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ReleaseAssets) > 0 {
		for _, e := range m.ReleaseAssets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRepositoryReleaseAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RepositoryId != 0 {
		n += 1 + sovQuery(uint64(m.RepositoryId))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRepositoryReleaseAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ReleaseAsset.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRepositoryReleaseAssetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RepositoryId != 0 {
		n += 1 + sovQuery(uint64(m.RepositoryId))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRepositoryReleaseAssetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ReleaseAssets) > 0 {
		for _, e := range m.ReleaseAssets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryRepositoryReleaseAssetsByRepositoryIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RepositoryId != 0 {
		n += 1 + sovQuery(uint64(m.RepositoryId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRepositoryReleaseAssetsByRepositoryIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ReleaseAssets) > 0 {
		for _, e := range m.ReleaseAssets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryChallengeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryChallengeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Challenge.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryChallengesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryChallengesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Challenges) > 0 {
		for _, e := range m.Challenges {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStorageStatsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryStorageStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StorageStats.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCidReferenceCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCidReferenceCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	return n
}

func (m *QueryCidReferenceCountsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCidReferenceCountsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CidReferenceCounts) > 0 {
		for _, e := range m.CidReferenceCounts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLFSObjectsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLFSObjectsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LfsObjects) > 0 {
		for _, e := range m.LfsObjects {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLFSObjectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryLFSObjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LfsObject.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLFSObjectsByRepositoryIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RepositoryId != 0 {
		n += 1 + sovQuery(uint64(m.RepositoryId))
	}
	return n
}

func (m *QueryLFSObjectsByRepositoryIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LfsObjects) > 0 {
		for _, e := range m.LfsObjects {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLFSObjectByRepositoryIdAndOidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RepositoryId != 0 {
		n += 1 + sovQuery(uint64(m.RepositoryId))
	}
	l = len(m.Oid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLFSObjectByRepositoryIdAndOidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LfsObject.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProviderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProviderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProviderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Provider.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProvidersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProvidersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProvidersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProvidersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProvidersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProvidersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Providers = append(m.Providers, Provider{})
			if err := m.Providers[len(m.Providers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveProvidersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveProvidersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveProvidersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveProvidersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveProvidersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveProvidersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Providers = append(m.Providers, Provider{})
			if err := m.Providers[len(m.Providers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPackfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPackfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPackfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPackfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPackfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPackfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Packfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPackfilesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPackfilesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPackfilesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPackfilesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPackfilesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPackfilesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packfiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Packfiles = append(m.Packfiles, Packfile{})
			if err := m.Packfiles[len(m.Packfiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRepositoryPackfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRepositoryPackfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRepositoryPackfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryId", wireType)
			}
			m.RepositoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepositoryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRepositoryPackfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRepositoryPackfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRepositoryPackfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Packfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReleaseAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReleaseAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReleaseAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReleaseAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReleaseAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReleaseAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReleaseAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReleaseAssetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReleaseAssetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReleaseAssetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReleaseAssetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReleaseAssetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReleaseAssetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseAssets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReleaseAssets = append(m.ReleaseAssets, ReleaseAsset{})
			if err := m.ReleaseAssets[len(m.ReleaseAssets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRepositoryReleaseAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRepositoryReleaseAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRepositoryReleaseAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryId", wireType)
			}
			m.RepositoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepositoryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRepositoryReleaseAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRepositoryReleaseAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRepositoryReleaseAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReleaseAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRepositoryReleaseAssetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRepositoryReleaseAssetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRepositoryReleaseAssetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryId", wireType)
			}
			m.RepositoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepositoryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRepositoryReleaseAssetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRepositoryReleaseAssetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRepositoryReleaseAssetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseAssets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReleaseAssets = append(m.ReleaseAssets, ReleaseAsset{})
			if err := m.ReleaseAssets[len(m.ReleaseAssets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRepositoryReleaseAssetsByRepositoryIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRepositoryReleaseAssetsByRepositoryIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRepositoryReleaseAssetsByRepositoryIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryId", wireType)
			}
			m.RepositoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepositoryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRepositoryReleaseAssetsByRepositoryIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRepositoryReleaseAssetsByRepositoryIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRepositoryReleaseAssetsByRepositoryIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseAssets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReleaseAssets = append(m.ReleaseAssets, ReleaseAsset{})
			if err := m.ReleaseAssets[len(m.ReleaseAssets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChallengeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChallengeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChallengeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChallengeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChallengeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChallengeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Challenge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChallengesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChallengesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChallengesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChallengesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChallengesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChallengesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenges = append(m.Challenges, Challenge{})
			if err := m.Challenges[len(m.Challenges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStorageStatsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStorageStatsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStorageStatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStorageStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStorageStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStorageStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StorageStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCidReferenceCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCidReferenceCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCidReferenceCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCidReferenceCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCidReferenceCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCidReferenceCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCidReferenceCountsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCidReferenceCountsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCidReferenceCountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCidReferenceCountsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCidReferenceCountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCidReferenceCountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CidReferenceCounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CidReferenceCounts = append(m.CidReferenceCounts, CidReferenceCount{})
			if err := m.CidReferenceCounts[len(m.CidReferenceCounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLFSObjectsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLFSObjectsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLFSObjectsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLFSObjectsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLFSObjectsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLFSObjectsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LfsObjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LfsObjects = append(m.LfsObjects, LFSObject{})
			if err := m.LfsObjects[len(m.LfsObjects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLFSObjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLFSObjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLFSObjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLFSObjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLFSObjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLFSObjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LfsObject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LfsObject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLFSObjectsByRepositoryIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLFSObjectsByRepositoryIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLFSObjectsByRepositoryIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryId", wireType)
			}
			m.RepositoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepositoryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLFSObjectsByRepositoryIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLFSObjectsByRepositoryIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLFSObjectsByRepositoryIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LfsObjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LfsObjects = append(m.LfsObjects, LFSObject{})
			if err := m.LfsObjects[len(m.LfsObjects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLFSObjectByRepositoryIdAndOidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLFSObjectByRepositoryIdAndOidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLFSObjectByRepositoryIdAndOidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepositoryId", wireType)
			}
			m.RepositoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepositoryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLFSObjectByRepositoryIdAndOidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLFSObjectByRepositoryIdAndOidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLFSObjectByRepositoryIdAndOidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LfsObject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LfsObject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
