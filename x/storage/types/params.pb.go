// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitopia/gitopia/storage/params.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	MinStakeAmount                  uint64         `protobuf:"varint,1,opt,name=min_stake_amount,json=minStakeAmount,proto3" json:"min_stake_amount,omitempty" yaml:"min_stake_amount"`
	ChallengeIntervalBlocks         uint64         `protobuf:"varint,2,opt,name=challenge_interval_blocks,json=challengeIntervalBlocks,proto3" json:"challenge_interval_blocks,omitempty" yaml:"challenge_interval_blocks"`
	ChallengePeriod                 *time.Duration `protobuf:"bytes,3,opt,name=challenge_period,json=challengePeriod,proto3,stdduration" json:"challenge_period,omitempty" yaml:"challenge_period"`
	RewardPerDay                    types.Coin     `protobuf:"bytes,4,opt,name=reward_per_day,json=rewardPerDay,proto3" json:"reward_per_day" yaml:"reward_per_day"`
	ChallengeSlashAmount            types.Coin     `protobuf:"bytes,5,opt,name=challenge_slash_amount,json=challengeSlashAmount,proto3" json:"challenge_slash_amount" yaml:"challenge_slash_amount"`
	ConsecutiveFailsThreshold       uint64         `protobuf:"varint,6,opt,name=consecutive_fails_threshold,json=consecutiveFailsThreshold,proto3" json:"consecutive_fails_threshold,omitempty" yaml:"consecutive_fails_threshold"`
	ConsecutiveFailsSlashPercentage uint64         `protobuf:"varint,7,opt,name=consecutive_fails_slash_percentage,json=consecutiveFailsSlashPercentage,proto3" json:"consecutive_fails_slash_percentage,omitempty" yaml:"consecutive_fails_slash_percentage"`
	UnstakeCooldownBlocks           uint64         `protobuf:"varint,8,opt,name=unstake_cooldown_blocks,json=unstakeCooldownBlocks,proto3" json:"unstake_cooldown_blocks,omitempty" yaml:"unstake_cooldown_blocks"`
	// cost per MB of storage
	StoragePricePerMb types.Coin `protobuf:"bytes,9,opt,name=storage_price_per_mb,json=storagePricePerMb,proto3" json:"storage_price_per_mb"`
	// free storage in MB
	FreeStorageMb uint64 `protobuf:"varint,10,opt,name=free_storage_mb,json=freeStorageMb,proto3" json:"free_storage_mb,omitempty" yaml:"free_storage_mb"`
	// max providers
	MaxProviders uint64 `protobuf:"varint,11,opt,name=max_providers,json=maxProviders,proto3" json:"max_providers,omitempty" yaml:"max_providers"`
	// Liveness tracking parameters
	// Number of blocks to track for liveness calculation (sliding window)
	LivenessWindowBlocks uint64 `protobuf:"varint,12,opt,name=liveness_window_blocks,json=livenessWindowBlocks,proto3" json:"liveness_window_blocks,omitempty" yaml:"liveness_window_blocks"`
	// Minimum liveness ratio required (e.g., 67 = 67%)
	MinLivenessRatio uint64 `protobuf:"varint,13,opt,name=min_liveness_ratio,json=minLivenessRatio,proto3" json:"min_liveness_ratio,omitempty" yaml:"min_liveness_ratio"`
	// Liveness fault slashing parameters (less severe)
	LivenessSlashAmount     types.Coin `protobuf:"bytes,14,opt,name=liveness_slash_amount,json=livenessSlashAmount,proto3" json:"liveness_slash_amount" yaml:"liveness_slash_amount"`
	LivenessSlashPercentage uint64     `protobuf:"varint,15,opt,name=liveness_slash_percentage,json=livenessSlashPercentage,proto3" json:"liveness_slash_percentage,omitempty" yaml:"liveness_slash_percentage"`
	LivenessJailBlocks      uint64     `protobuf:"varint,16,opt,name=liveness_jail_blocks,json=livenessJailBlocks,proto3" json:"liveness_jail_blocks,omitempty" yaml:"liveness_jail_blocks"`
	// Proof fault slashing parameters (more severe for assigned provider)
	ProofFaultSlashAmount     types.Coin `protobuf:"bytes,17,opt,name=proof_fault_slash_amount,json=proofFaultSlashAmount,proto3" json:"proof_fault_slash_amount" yaml:"proof_fault_slash_amount"`
	ProofFaultSlashPercentage uint64     `protobuf:"varint,18,opt,name=proof_fault_slash_percentage,json=proofFaultSlashPercentage,proto3" json:"proof_fault_slash_percentage,omitempty" yaml:"proof_fault_slash_percentage"`
	ProofFaultJailBlocks      uint64     `protobuf:"varint,19,opt,name=proof_fault_jail_blocks,json=proofFaultJailBlocks,proto3" json:"proof_fault_jail_blocks,omitempty" yaml:"proof_fault_jail_blocks"`
	// Maximum number of consecutive liveness faults before suspension
	MaxLivenessFaults uint64 `protobuf:"varint,20,opt,name=max_liveness_faults,json=maxLivenessFaults,proto3" json:"max_liveness_faults,omitempty" yaml:"max_liveness_faults"`
	// Maximum number of consecutive proof faults before suspension
	MaxProofFaults uint64 `protobuf:"varint,21,opt,name=max_proof_faults,json=maxProofFaults,proto3" json:"max_proof_faults,omitempty" yaml:"max_proof_faults"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb167628a29d109b, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMinStakeAmount() uint64 {
	if m != nil {
		return m.MinStakeAmount
	}
	return 0
}

func (m *Params) GetChallengeIntervalBlocks() uint64 {
	if m != nil {
		return m.ChallengeIntervalBlocks
	}
	return 0
}

func (m *Params) GetChallengePeriod() *time.Duration {
	if m != nil {
		return m.ChallengePeriod
	}
	return nil
}

func (m *Params) GetRewardPerDay() types.Coin {
	if m != nil {
		return m.RewardPerDay
	}
	return types.Coin{}
}

func (m *Params) GetChallengeSlashAmount() types.Coin {
	if m != nil {
		return m.ChallengeSlashAmount
	}
	return types.Coin{}
}

func (m *Params) GetConsecutiveFailsThreshold() uint64 {
	if m != nil {
		return m.ConsecutiveFailsThreshold
	}
	return 0
}

func (m *Params) GetConsecutiveFailsSlashPercentage() uint64 {
	if m != nil {
		return m.ConsecutiveFailsSlashPercentage
	}
	return 0
}

func (m *Params) GetUnstakeCooldownBlocks() uint64 {
	if m != nil {
		return m.UnstakeCooldownBlocks
	}
	return 0
}

func (m *Params) GetStoragePricePerMb() types.Coin {
	if m != nil {
		return m.StoragePricePerMb
	}
	return types.Coin{}
}

func (m *Params) GetFreeStorageMb() uint64 {
	if m != nil {
		return m.FreeStorageMb
	}
	return 0
}

func (m *Params) GetMaxProviders() uint64 {
	if m != nil {
		return m.MaxProviders
	}
	return 0
}

func (m *Params) GetLivenessWindowBlocks() uint64 {
	if m != nil {
		return m.LivenessWindowBlocks
	}
	return 0
}

func (m *Params) GetMinLivenessRatio() uint64 {
	if m != nil {
		return m.MinLivenessRatio
	}
	return 0
}

func (m *Params) GetLivenessSlashAmount() types.Coin {
	if m != nil {
		return m.LivenessSlashAmount
	}
	return types.Coin{}
}

func (m *Params) GetLivenessSlashPercentage() uint64 {
	if m != nil {
		return m.LivenessSlashPercentage
	}
	return 0
}

func (m *Params) GetLivenessJailBlocks() uint64 {
	if m != nil {
		return m.LivenessJailBlocks
	}
	return 0
}

func (m *Params) GetProofFaultSlashAmount() types.Coin {
	if m != nil {
		return m.ProofFaultSlashAmount
	}
	return types.Coin{}
}

func (m *Params) GetProofFaultSlashPercentage() uint64 {
	if m != nil {
		return m.ProofFaultSlashPercentage
	}
	return 0
}

func (m *Params) GetProofFaultJailBlocks() uint64 {
	if m != nil {
		return m.ProofFaultJailBlocks
	}
	return 0
}

func (m *Params) GetMaxLivenessFaults() uint64 {
	if m != nil {
		return m.MaxLivenessFaults
	}
	return 0
}

func (m *Params) GetMaxProofFaults() uint64 {
	if m != nil {
		return m.MaxProofFaults
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "gitopia.gitopia.storage.Params")
}

func init() {
	proto.RegisterFile("gitopia/gitopia/storage/params.proto", fileDescriptor_bb167628a29d109b)
}

var fileDescriptor_bb167628a29d109b = []byte{
	// 923 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x56, 0xdd, 0x72, 0xdb, 0x44,
	0x14, 0xb6, 0x21, 0x04, 0xd8, 0xe6, 0x57, 0xb1, 0x63, 0x39, 0x69, 0xbc, 0x61, 0x09, 0xb4, 0x5c,
	0x54, 0x9a, 0xc2, 0x0c, 0x17, 0x9d, 0xe1, 0x02, 0xb7, 0x94, 0xe1, 0xa7, 0x8c, 0xd9, 0x30, 0xd3,
	0xa1, 0x17, 0xa8, 0x2b, 0x79, 0x2d, 0x2f, 0x95, 0xb4, 0x9a, 0x5d, 0xd9, 0x49, 0xe0, 0x25, 0xb8,
	0xec, 0x25, 0x0f, 0xc1, 0x43, 0xf4, 0xb2, 0x97, 0x5c, 0x09, 0x26, 0x79, 0x03, 0x3d, 0x41, 0x47,
	0xab, 0x95, 0x2c, 0xab, 0xf1, 0xe4, 0xca, 0xf6, 0xf9, 0xbe, 0xf3, 0x9d, 0x3d, 0x9f, 0xce, 0x59,
	0x19, 0x9c, 0xf8, 0x2c, 0xe1, 0x31, 0x23, 0x76, 0xf9, 0x29, 0x13, 0x2e, 0x88, 0x4f, 0xed, 0x98,
	0x08, 0x12, 0x4a, 0x2b, 0x16, 0x3c, 0xe1, 0x46, 0x4f, 0xa3, 0x56, 0xf9, 0xa9, 0x59, 0x07, 0x1d,
	0x9f, 0xfb, 0x5c, 0x71, 0xec, 0xfc, 0x5b, 0x41, 0x3f, 0x18, 0x78, 0x5c, 0x86, 0x5c, 0xda, 0x2e,
	0x91, 0xd4, 0x9e, 0xdf, 0x77, 0x69, 0x42, 0xee, 0xdb, 0x1e, 0x67, 0x51, 0x89, 0xfb, 0x9c, 0xfb,
	0x01, 0xb5, 0xd5, 0x2f, 0x77, 0x36, 0xb1, 0xc7, 0x33, 0x41, 0x12, 0xc6, 0x35, 0x8e, 0xfe, 0xd9,
	0x06, 0xeb, 0x23, 0x55, 0xdf, 0xf8, 0x06, 0xec, 0x84, 0x2c, 0x72, 0x64, 0x42, 0x5e, 0x50, 0x87,
	0x84, 0x7c, 0x16, 0x25, 0x66, 0xfb, 0xb8, 0x7d, 0x77, 0x6d, 0x78, 0x98, 0xa5, 0xb0, 0x77, 0x41,
	0xc2, 0xe0, 0x01, 0x6a, 0x32, 0x10, 0xde, 0x0a, 0x59, 0x74, 0x9a, 0x47, 0xbe, 0x56, 0x01, 0xe3,
	0x39, 0xe8, 0x7b, 0x53, 0x12, 0x04, 0x34, 0xf2, 0xa9, 0xc3, 0xa2, 0x84, 0x8a, 0x39, 0x09, 0x1c,
	0x37, 0xe0, 0xde, 0x0b, 0x69, 0xbe, 0xa3, 0xf4, 0x4e, 0xb2, 0x14, 0x1e, 0x17, 0x7a, 0x2b, 0xa9,
	0x08, 0xf7, 0x2a, 0xec, 0x3b, 0x0d, 0x0d, 0x15, 0x62, 0x50, 0xb0, 0xb3, 0x48, 0x8b, 0xa9, 0x60,
	0x7c, 0x6c, 0xbe, 0x7b, 0xdc, 0xbe, 0x7b, 0xeb, 0xf3, 0xbe, 0x55, 0xb4, 0x6b, 0x95, 0xed, 0x5a,
	0x8f, 0x74, 0xbb, 0x43, 0xb8, 0xe8, 0xa1, 0x99, 0x8c, 0x5e, 0xfe, 0x07, 0xdb, 0x78, 0xbb, 0x0a,
	0x8f, 0x54, 0xd4, 0xf8, 0x0d, 0x6c, 0x09, 0x7a, 0x46, 0xc4, 0x38, 0xa7, 0x39, 0x63, 0x72, 0x61,
	0xae, 0xe9, 0x22, 0x85, 0xe7, 0x56, 0xee, 0xb9, 0xa5, 0x3d, 0xb7, 0x1e, 0x72, 0x16, 0x0d, 0x8f,
	0x5e, 0xa5, 0xb0, 0x95, 0xa5, 0xb0, 0x5b, 0x14, 0x5a, 0x4e, 0x47, 0x78, 0xa3, 0x08, 0x8c, 0xa8,
	0x78, 0x44, 0x2e, 0x8c, 0x39, 0xd8, 0x5f, 0x9c, 0x44, 0x06, 0x44, 0x4e, 0x4b, 0xd7, 0xdf, 0xbb,
	0xa9, 0xce, 0x27, 0xba, 0xce, 0x51, 0xb3, 0xa1, 0xba, 0x0c, 0xc2, 0x9d, 0x0a, 0x38, 0xcd, 0xe3,
	0xfa, 0x01, 0x4d, 0xc0, 0xa1, 0xc7, 0x23, 0x49, 0xbd, 0x59, 0xc2, 0xe6, 0xd4, 0x99, 0x10, 0x16,
	0x48, 0x27, 0x99, 0x0a, 0x2a, 0xa7, 0x3c, 0x18, 0x9b, 0xeb, 0xea, 0x11, 0x7d, 0x9a, 0xa5, 0x10,
	0x69, 0xf5, 0xd5, 0x64, 0x84, 0xfb, 0x35, 0xf4, 0x71, 0x0e, 0xfe, 0x52, 0x62, 0xc6, 0x1f, 0xe0,
	0x9a, 0xd4, 0xe2, 0x80, 0x31, 0x15, 0x1e, 0x8d, 0x12, 0xe2, 0x53, 0xf3, 0x7d, 0x55, 0xee, 0x5e,
	0x96, 0xc2, 0xcf, 0x56, 0x95, 0x6b, 0xe6, 0x20, 0x0c, 0x9b, 0x55, 0x55, 0x7f, 0xa3, 0x8a, 0x61,
	0x3c, 0x03, 0xbd, 0x59, 0x54, 0xcc, 0xa9, 0xc7, 0x79, 0x30, 0xe6, 0x67, 0x51, 0x39, 0x82, 0x1f,
	0xa8, 0x82, 0x28, 0x4b, 0xe1, 0xa0, 0x28, 0xb8, 0x82, 0x88, 0x70, 0x57, 0x23, 0x0f, 0x35, 0xa0,
	0xc7, 0x6f, 0x04, 0x3a, 0x7a, 0x27, 0x9d, 0x58, 0x30, 0x4f, 0x4d, 0x91, 0x13, 0xba, 0xe6, 0x87,
	0x37, 0x3d, 0xb5, 0xb5, 0xfc, 0xa9, 0xe1, 0x5d, 0x9d, 0x3c, 0xca, 0x73, 0x47, 0x54, 0x3c, 0x71,
	0x8d, 0x21, 0xd8, 0x9e, 0x08, 0x4a, 0x9d, 0x52, 0x36, 0x74, 0x4d, 0xa0, 0x4e, 0x79, 0x90, 0xa5,
	0x70, 0xbf, 0x38, 0x65, 0x83, 0x80, 0xf0, 0x66, 0x1e, 0x39, 0x2d, 0x02, 0x4f, 0x5c, 0xe3, 0x2b,
	0xb0, 0x19, 0x92, 0x73, 0x27, 0x16, 0x7c, 0xce, 0xc6, 0x54, 0x48, 0xf3, 0x96, 0x52, 0x30, 0xb3,
	0x14, 0x76, 0xf4, 0xea, 0xd6, 0x61, 0x84, 0x37, 0x42, 0x72, 0x3e, 0x2a, 0x7f, 0x1a, 0x4f, 0xc1,
	0x7e, 0xc0, 0xe6, 0x34, 0xa2, 0x52, 0x3a, 0x67, 0x2c, 0x1a, 0xf3, 0xb3, 0xd2, 0xaf, 0x0d, 0xa5,
	0xf3, 0xd1, 0x62, 0xda, 0xae, 0xe7, 0x21, 0xdc, 0x29, 0x81, 0xa7, 0x2a, 0xae, 0xdd, 0xfa, 0x01,
	0x18, 0xf9, 0x9d, 0x51, 0x25, 0xa9, 0x75, 0x34, 0x37, 0x95, 0xe8, 0x51, 0x96, 0xc2, 0xfe, 0xe2,
	0x5e, 0x59, 0xe6, 0x20, 0x9c, 0x5f, 0x47, 0x3f, 0xea, 0x18, 0xce, 0x43, 0x86, 0x04, 0xdd, 0x8a,
	0xb4, 0xb4, 0x31, 0x5b, 0x37, 0x79, 0x7f, 0xa2, 0x37, 0xe6, 0x76, 0xa3, 0x87, 0xe5, 0x85, 0xd9,
	0x2b, 0xe3, 0xf5, 0x7d, 0x79, 0x0e, 0xfa, 0x0d, 0x7a, 0x6d, 0x7c, 0xb7, 0x9b, 0x17, 0xda, 0x4a,
	0x2a, 0xc2, 0xbd, 0x25, 0xf5, 0xda, 0xb4, 0xfe, 0x0c, 0x2a, 0xef, 0x9c, 0xdf, 0x09, 0xab, 0x6e,
	0xcb, 0x1d, 0x25, 0x9e, 0xdf, 0x5c, 0x87, 0x0d, 0xf1, 0x1a, 0x0b, 0x61, 0xa3, 0x0c, 0x7f, 0x4f,
	0x58, 0x79, 0x47, 0xfe, 0x09, 0xcc, 0x58, 0x70, 0x3e, 0x71, 0x26, 0x64, 0x16, 0x24, 0xcb, 0x66,
	0xed, 0xde, 0x64, 0xd6, 0x1d, 0x6d, 0x16, 0x2c, 0xaa, 0xae, 0x12, 0x42, 0xb8, 0xab, 0xa0, 0xc7,
	0x39, 0x52, 0x77, 0x6c, 0x0a, 0x6e, 0xbf, 0x9d, 0x53, 0x33, 0xcd, 0x50, 0x7d, 0xdd, 0xc9, 0x52,
	0xf8, 0xf1, 0xaa, 0x0a, 0x75, 0xdf, 0xfa, 0x8d, 0x2a, 0x35, 0xe7, 0x7e, 0x05, 0xbd, 0x7a, 0x6e,
	0xdd, 0xbc, 0xbd, 0xe6, 0x9e, 0xaf, 0x20, 0x22, 0xdc, 0x59, 0xe8, 0xd7, 0x1c, 0xfc, 0x09, 0xec,
	0xe5, 0x1b, 0x53, 0x59, 0xae, 0x12, 0xa5, 0xd9, 0x51, 0xb2, 0x83, 0x2c, 0x85, 0x07, 0x8b, 0xb5,
	0x6a, 0x90, 0x10, 0xde, 0x0d, 0xc9, 0x79, 0x39, 0xba, 0x4a, 0xb8, 0x78, 0xbd, 0x16, 0x1b, 0x58,
	0x9e, 0x42, 0x9a, 0xdd, 0xb7, 0x5e, 0xaf, 0x0d, 0x46, 0xfe, 0x7a, 0x55, 0x6b, 0xaa, 0xcf, 0x27,
	0x1f, 0xac, 0xbd, 0xfc, 0x1b, 0xb6, 0x86, 0xdf, 0xbe, 0xba, 0x1c, 0xb4, 0x5f, 0x5f, 0x0e, 0xda,
	0xff, 0x5f, 0x0e, 0xda, 0x7f, 0x5d, 0x0d, 0x5a, 0xaf, 0xaf, 0x06, 0xad, 0x7f, 0xaf, 0x06, 0xad,
	0x67, 0xf7, 0x7c, 0x96, 0x4c, 0x67, 0xae, 0xe5, 0xf1, 0xd0, 0x6e, 0xfe, 0xe1, 0x98, 0x7f, 0x69,
	0x9f, 0x57, 0xff, 0x3a, 0x92, 0x8b, 0x98, 0x4a, 0x77, 0x5d, 0xbd, 0x29, 0xbf, 0x78, 0x13, 0x00,
	0x00, 0xff, 0xff, 0xe0, 0x50, 0x9b, 0x39, 0x9d, 0x08, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxProofFaults != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxProofFaults))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.MaxLivenessFaults != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxLivenessFaults))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.ProofFaultJailBlocks != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ProofFaultJailBlocks))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.ProofFaultSlashPercentage != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ProofFaultSlashPercentage))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	{
		size, err := m.ProofFaultSlashAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	if m.LivenessJailBlocks != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.LivenessJailBlocks))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.LivenessSlashPercentage != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.LivenessSlashPercentage))
		i--
		dAtA[i] = 0x78
	}
	{
		size, err := m.LivenessSlashAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	if m.MinLivenessRatio != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinLivenessRatio))
		i--
		dAtA[i] = 0x68
	}
	if m.LivenessWindowBlocks != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.LivenessWindowBlocks))
		i--
		dAtA[i] = 0x60
	}
	if m.MaxProviders != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxProviders))
		i--
		dAtA[i] = 0x58
	}
	if m.FreeStorageMb != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.FreeStorageMb))
		i--
		dAtA[i] = 0x50
	}
	{
		size, err := m.StoragePricePerMb.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.UnstakeCooldownBlocks != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.UnstakeCooldownBlocks))
		i--
		dAtA[i] = 0x40
	}
	if m.ConsecutiveFailsSlashPercentage != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ConsecutiveFailsSlashPercentage))
		i--
		dAtA[i] = 0x38
	}
	if m.ConsecutiveFailsThreshold != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ConsecutiveFailsThreshold))
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.ChallengeSlashAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.RewardPerDay.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.ChallengePeriod != nil {
		n6, err6 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(*m.ChallengePeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.ChallengePeriod):])
		if err6 != nil {
			return 0, err6
		}
		i -= n6
		i = encodeVarintParams(dAtA, i, uint64(n6))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChallengeIntervalBlocks != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ChallengeIntervalBlocks))
		i--
		dAtA[i] = 0x10
	}
	if m.MinStakeAmount != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinStakeAmount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinStakeAmount != 0 {
		n += 1 + sovParams(uint64(m.MinStakeAmount))
	}
	if m.ChallengeIntervalBlocks != 0 {
		n += 1 + sovParams(uint64(m.ChallengeIntervalBlocks))
	}
	if m.ChallengePeriod != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.ChallengePeriod)
		n += 1 + l + sovParams(uint64(l))
	}
	l = m.RewardPerDay.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.ChallengeSlashAmount.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.ConsecutiveFailsThreshold != 0 {
		n += 1 + sovParams(uint64(m.ConsecutiveFailsThreshold))
	}
	if m.ConsecutiveFailsSlashPercentage != 0 {
		n += 1 + sovParams(uint64(m.ConsecutiveFailsSlashPercentage))
	}
	if m.UnstakeCooldownBlocks != 0 {
		n += 1 + sovParams(uint64(m.UnstakeCooldownBlocks))
	}
	l = m.StoragePricePerMb.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.FreeStorageMb != 0 {
		n += 1 + sovParams(uint64(m.FreeStorageMb))
	}
	if m.MaxProviders != 0 {
		n += 1 + sovParams(uint64(m.MaxProviders))
	}
	if m.LivenessWindowBlocks != 0 {
		n += 1 + sovParams(uint64(m.LivenessWindowBlocks))
	}
	if m.MinLivenessRatio != 0 {
		n += 1 + sovParams(uint64(m.MinLivenessRatio))
	}
	l = m.LivenessSlashAmount.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.LivenessSlashPercentage != 0 {
		n += 1 + sovParams(uint64(m.LivenessSlashPercentage))
	}
	if m.LivenessJailBlocks != 0 {
		n += 2 + sovParams(uint64(m.LivenessJailBlocks))
	}
	l = m.ProofFaultSlashAmount.Size()
	n += 2 + l + sovParams(uint64(l))
	if m.ProofFaultSlashPercentage != 0 {
		n += 2 + sovParams(uint64(m.ProofFaultSlashPercentage))
	}
	if m.ProofFaultJailBlocks != 0 {
		n += 2 + sovParams(uint64(m.ProofFaultJailBlocks))
	}
	if m.MaxLivenessFaults != 0 {
		n += 2 + sovParams(uint64(m.MaxLivenessFaults))
	}
	if m.MaxProofFaults != 0 {
		n += 2 + sovParams(uint64(m.MaxProofFaults))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStakeAmount", wireType)
			}
			m.MinStakeAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinStakeAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeIntervalBlocks", wireType)
			}
			m.ChallengeIntervalBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeIntervalBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengePeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChallengePeriod == nil {
				m.ChallengePeriod = new(time.Duration)
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(m.ChallengePeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPerDay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardPerDay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeSlashAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChallengeSlashAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsecutiveFailsThreshold", wireType)
			}
			m.ConsecutiveFailsThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsecutiveFailsThreshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsecutiveFailsSlashPercentage", wireType)
			}
			m.ConsecutiveFailsSlashPercentage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsecutiveFailsSlashPercentage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakeCooldownBlocks", wireType)
			}
			m.UnstakeCooldownBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnstakeCooldownBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoragePricePerMb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StoragePricePerMb.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeStorageMb", wireType)
			}
			m.FreeStorageMb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreeStorageMb |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxProviders", wireType)
			}
			m.MaxProviders = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxProviders |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LivenessWindowBlocks", wireType)
			}
			m.LivenessWindowBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LivenessWindowBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLivenessRatio", wireType)
			}
			m.MinLivenessRatio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinLivenessRatio |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LivenessSlashAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LivenessSlashAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LivenessSlashPercentage", wireType)
			}
			m.LivenessSlashPercentage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LivenessSlashPercentage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LivenessJailBlocks", wireType)
			}
			m.LivenessJailBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LivenessJailBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofFaultSlashAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProofFaultSlashAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofFaultSlashPercentage", wireType)
			}
			m.ProofFaultSlashPercentage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProofFaultSlashPercentage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofFaultJailBlocks", wireType)
			}
			m.ProofFaultJailBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProofFaultJailBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLivenessFaults", wireType)
			}
			m.MaxLivenessFaults = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLivenessFaults |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxProofFaults", wireType)
			}
			m.MaxProofFaults = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxProofFaults |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
