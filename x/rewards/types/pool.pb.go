// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitopia/gitopia/rewards/pool.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Series int32

const (
	Series_NONE   Series = 0
	Series_ONE    Series = 1
	Series_TWO    Series = 2
	Series_THREE  Series = 3
	Series_FOUR   Series = 4
	Series_FIVE   Series = 5
	Series_SIX    Series = 6
	Series_SEVEN  Series = 7
	Series_COSMOS Series = 8
)

var Series_name = map[int32]string{
	0: "NONE",
	1: "ONE",
	2: "TWO",
	3: "THREE",
	4: "FOUR",
	5: "FIVE",
	6: "SIX",
	7: "SEVEN",
	8: "COSMOS",
}

var Series_value = map[string]int32{
	"NONE":   0,
	"ONE":    1,
	"TWO":    2,
	"THREE":  3,
	"FOUR":   4,
	"FIVE":   5,
	"SIX":    6,
	"SEVEN":  7,
	"COSMOS": 8,
}

func (x Series) String() string {
	return proto.EnumName(Series_name, int32(x))
}

func (Series) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1212d8617de62345, []int{0}
}

type RewardPool struct {
	TotalAmount   types.Coin `protobuf:"bytes,1,opt,name=total_amount,json=totalAmount,proto3,castkey=github.com/cosmos/cosmos-sdk/types.Coin" json:"total_amount" yaml:"total_amount"`
	ClaimedAmount types.Coin `protobuf:"bytes,2,opt,name=claimed_amount,json=claimedAmount,proto3,castkey=github.com/cosmos/cosmos-sdk/types.Coin" json:"claimed_amount" yaml:"claimed_amount"`
	StartTime     time.Time  `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" yaml:"start_time"`
	EndTime       time.Time  `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time" yaml:"end_time"`
	Series        Series     `protobuf:"varint,5,opt,name=series,proto3,enum=gitopia.gitopia.rewards.Series" json:"series,omitempty" yaml:"series"`
}

func (m *RewardPool) Reset()         { *m = RewardPool{} }
func (m *RewardPool) String() string { return proto.CompactTextString(m) }
func (*RewardPool) ProtoMessage()    {}
func (*RewardPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_1212d8617de62345, []int{0}
}
func (m *RewardPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardPool.Merge(m, src)
}
func (m *RewardPool) XXX_Size() int {
	return m.Size()
}
func (m *RewardPool) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardPool.DiscardUnknown(m)
}

var xxx_messageInfo_RewardPool proto.InternalMessageInfo

func (m *RewardPool) GetTotalAmount() types.Coin {
	if m != nil {
		return m.TotalAmount
	}
	return types.Coin{}
}

func (m *RewardPool) GetClaimedAmount() types.Coin {
	if m != nil {
		return m.ClaimedAmount
	}
	return types.Coin{}
}

func (m *RewardPool) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *RewardPool) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

func (m *RewardPool) GetSeries() Series {
	if m != nil {
		return m.Series
	}
	return Series_NONE
}

func init() {
	proto.RegisterEnum("gitopia.gitopia.rewards.Series", Series_name, Series_value)
	proto.RegisterType((*RewardPool)(nil), "gitopia.gitopia.rewards.RewardPool")
}

func init() {
	proto.RegisterFile("gitopia/gitopia/rewards/pool.proto", fileDescriptor_1212d8617de62345)
}

var fileDescriptor_1212d8617de62345 = []byte{
	// 503 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x3f, 0x6f, 0xd4, 0x30,
	0x18, 0xc6, 0xcf, 0xed, 0xfd, 0xab, 0x4b, 0x4b, 0x1a, 0x40, 0x1c, 0x87, 0x48, 0xaa, 0x2c, 0x54,
	0x48, 0xb5, 0xd5, 0xc2, 0xc4, 0xc6, 0x55, 0x29, 0x2d, 0x12, 0x77, 0x28, 0x39, 0x4a, 0xc5, 0x52,
	0x39, 0x89, 0x09, 0x11, 0x49, 0x1c, 0xc5, 0xbe, 0x42, 0x57, 0xc4, 0xc4, 0xd4, 0x99, 0x4f, 0xd4,
	0xb1, 0x23, 0xd3, 0x15, 0xdd, 0x7d, 0x83, 0x7e, 0x02, 0x14, 0xdb, 0x81, 0x82, 0x84, 0x2a, 0x26,
	0xbf, 0xb1, 0x9f, 0xe7, 0x79, 0x7f, 0x7a, 0x1d, 0x43, 0x27, 0x4e, 0x04, 0x2b, 0x12, 0x82, 0xeb,
	0xb5, 0xa4, 0x1f, 0x49, 0x19, 0x71, 0x5c, 0x30, 0x96, 0xa2, 0xa2, 0x64, 0x82, 0x99, 0x77, 0xf5,
	0x19, 0xaa, 0x57, 0xad, 0xe9, 0xdf, 0x8e, 0x59, 0xcc, 0xa4, 0x06, 0x57, 0x95, 0x92, 0xf7, 0xad,
	0x90, 0xf1, 0x8c, 0x71, 0x1c, 0x10, 0x4e, 0xf1, 0xf1, 0x56, 0x40, 0x05, 0xd9, 0xc2, 0x21, 0x4b,
	0x72, 0x7d, 0x6e, 0xc7, 0x8c, 0xc5, 0x29, 0xc5, 0xf2, 0x2b, 0x98, 0xbc, 0xc3, 0x22, 0xc9, 0x28,
	0x17, 0x24, 0x2b, 0x94, 0xc0, 0xf9, 0xd6, 0x84, 0xd0, 0x93, 0x2d, 0x5e, 0x31, 0x96, 0x9a, 0x5f,
	0x00, 0xbc, 0x21, 0x98, 0x20, 0xe9, 0x11, 0xc9, 0xd8, 0x24, 0x17, 0x3d, 0xb0, 0x0e, 0x36, 0x96,
	0xb7, 0xef, 0x21, 0xd5, 0x07, 0x55, 0x7d, 0x90, 0xee, 0x83, 0x76, 0x58, 0x92, 0x0f, 0x76, 0xcf,
	0xa6, 0x76, 0xe3, 0x72, 0x6a, 0xdf, 0x3a, 0x21, 0x59, 0xfa, 0xd4, 0xb9, 0x6a, 0x76, 0x3e, 0x5f,
	0xd8, 0x0f, 0xe3, 0x44, 0xbc, 0x9f, 0x04, 0x28, 0x64, 0x19, 0xd6, 0xac, 0x6a, 0xd9, 0xe4, 0xd1,
	0x07, 0x2c, 0x4e, 0x0a, 0xca, 0x65, 0x8e, 0xb7, 0x2c, 0x9d, 0xcf, 0xa4, 0xd1, 0xfc, 0x0a, 0xe0,
	0x6a, 0x98, 0x92, 0x24, 0xa3, 0x51, 0x0d, 0xb2, 0x70, 0x1d, 0xc8, 0x9e, 0x06, 0xb9, 0xa3, 0x40,
	0xfe, 0xb4, 0xff, 0x17, 0xca, 0x8a, 0xf6, 0x6a, 0x98, 0x43, 0x08, 0xb9, 0x20, 0xa5, 0x38, 0xaa,
	0x66, 0xd7, 0x5b, 0x94, 0x1c, 0x7d, 0xa4, 0x06, 0x8b, 0xea, 0xc1, 0xa2, 0x71, 0x3d, 0xd8, 0xc1,
	0x03, 0x0d, 0xb2, 0xa6, 0x40, 0x7e, 0x7b, 0x9d, 0xd3, 0x0b, 0x1b, 0x78, 0x4b, 0x72, 0xa3, 0x92,
	0x9b, 0x1e, 0xec, 0xd2, 0x3c, 0x52, 0xb9, 0xcd, 0x6b, 0x73, 0xef, 0xeb, 0xdc, 0x9b, 0x2a, 0xb7,
	0x76, 0xaa, 0xd4, 0x0e, 0xcd, 0x23, 0x99, 0xf9, 0x02, 0xb6, 0x39, 0x2d, 0x13, 0xca, 0x7b, 0xad,
	0x75, 0xb0, 0xb1, 0xba, 0x6d, 0xa3, 0x7f, 0xfc, 0x51, 0xc8, 0x97, 0xb2, 0xc1, 0xda, 0xe5, 0xd4,
	0x5e, 0xd1, 0xa8, 0x72, 0xc7, 0xf1, 0x74, 0xc2, 0xa3, 0x10, 0xb6, 0x95, 0xc8, 0xec, 0xc2, 0xe6,
	0x70, 0x34, 0x74, 0x8d, 0x86, 0xd9, 0x81, 0x8b, 0x55, 0x01, 0xaa, 0x62, 0xfc, 0x66, 0x64, 0x2c,
	0x98, 0x4b, 0xb0, 0x35, 0xde, 0xf3, 0x5c, 0xd7, 0x58, 0xac, 0x64, 0xbb, 0xa3, 0xd7, 0x9e, 0xd1,
	0x94, 0xd5, 0xfe, 0x81, 0x6b, 0xb4, 0x2a, 0x9d, 0xbf, 0x7f, 0x68, 0xb4, 0x2b, 0x9d, 0xef, 0x1e,
	0xb8, 0x43, 0xa3, 0x63, 0x42, 0xd8, 0xde, 0x19, 0xf9, 0x2f, 0x47, 0xbe, 0xd1, 0x1d, 0x3c, 0x3f,
	0x9b, 0x59, 0xe0, 0x7c, 0x66, 0x81, 0x1f, 0x33, 0x0b, 0x9c, 0xce, 0xad, 0xc6, 0xf9, 0xdc, 0x6a,
	0x7c, 0x9f, 0x5b, 0x8d, 0xb7, 0x9b, 0x57, 0x2e, 0xec, 0xef, 0xa7, 0x73, 0xfc, 0x04, 0x7f, 0xfa,
	0xf5, 0x7e, 0xe4, 0xdd, 0x05, 0x6d, 0x39, 0xb3, 0xc7, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x38,
	0x84, 0x0d, 0x74, 0x67, 0x03, 0x00, 0x00,
}

func (m *RewardPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Series != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.Series))
		i--
		dAtA[i] = 0x28
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintPool(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintPool(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.ClaimedAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.TotalAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RewardPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalAmount.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.ClaimedAmount.Size()
	n += 1 + l + sovPool(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovPool(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovPool(uint64(l))
	if m.Series != 0 {
		n += 1 + sovPool(uint64(m.Series))
	}
	return n
}

func sovPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPool(x uint64) (n int) {
	return sovPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RewardPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClaimedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Series", wireType)
			}
			m.Series = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Series |= Series(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPool = fmt.Errorf("proto: unexpected end of group")
)
