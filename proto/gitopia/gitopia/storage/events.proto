syntax = "proto3";
package gitopia.gitopia.storage;

import "google/protobuf/timestamp.proto";
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/gitopia/gitopia/v6/x/storage/types";

// EventProviderRegistered is emitted when a provider is registered
message EventProviderRegistered {
  string address = 1;
  string peer_id = 2;
}

// EventProviderStatusUpdated is emitted when provider status is updated
message EventProviderStatusUpdated {
  string address = 1;
  bool online = 2;
}

// EventPackfileUpdated is emitted when a packfile is updated
message EventPackfileUpdated {
  uint64 repository_id = 1;
  string new_cid = 2;
  string old_cid = 3;
  string new_name = 4;
  string old_name = 5;
}

// EventReleaseAssetUpdated is emitted when a release asset is updated
message EventReleaseAssetUpdated {
  uint64 repository_id = 1;
  string tag = 2;
  string name = 3;
  string new_cid = 4;
  string old_cid = 5;
  string new_sha256 = 6;
  string old_sha256 = 7;
}

// EventChallengeCreated is emitted when a new challenge is created
message EventChallengeCreated {
  uint64 challenge_id = 1;
  string provider = 2;
}

// EventChallengeCompleted is emitted when a challenge is completed
message EventChallengeCompleted {
  uint64 challenge_id = 1;
  string provider = 2;
  bool success = 3;
}

// EventProviderUnregistered is emitted when a provider initiates unregistration
message EventProviderUnregistered {
  string address = 1;
  google.protobuf.Timestamp unstake_completion_time = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
}

// EventProviderUnstakeCompleted is emitted when a provider's unstaking is completed
message EventProviderUnstakeCompleted {
  string address = 1;
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
}
