syntax = "proto3";
package gitopia.gitopia.storage;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gitopia/gitopia/storage/types.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/gitopia/gitopia/v6/x/storage/types";

// Msg defines the Msg service.
service Msg {
  // RegisterProvider registers a new storage provider
  rpc RegisterProvider(MsgRegisterProvider) returns (MsgRegisterProviderResponse);
  
  // UpdateRepositoryPackfile updates repository packfile CID and root hash
  rpc UpdateRepositoryPackfile(MsgUpdateRepositoryPackfile) returns (MsgUpdateRepositoryPackfileResponse);

  // UpdateReleaseAsset updates release asset
  rpc UpdateReleaseAsset(MsgUpdateReleaseAsset) returns (MsgUpdateReleaseAssetResponse);
  
  // SubmitChallengeResponse submits proof for storage challenge
  rpc SubmitChallengeResponse(MsgSubmitChallengeResponse) returns (MsgSubmitChallengeResponseResponse);

  // WithdrawProviderRewards withdraws accumulated rewards for a provider
  rpc WithdrawProviderRewards(MsgWithdrawProviderRewards) returns (MsgWithdrawProviderRewardsResponse);

  // UnregisterProvider initiates the process of leaving the storage network
  rpc UnregisterProvider(MsgUnregisterProvider) returns (MsgUnregisterProviderResponse);

  // CompleteUnstake completes the unstaking process after the cooldown period
  rpc CompleteUnstake(MsgCompleteUnstake) returns (MsgCompleteUnstakeResponse);
}

// MsgRegisterProvider defines a message for registering as a storage provider
message MsgRegisterProvider {
  string creator = 1;
  string address = 2;
  cosmos.base.v1beta1.Coin stake = 3 [(gogoproto.nullable) = false];
}

message MsgRegisterProviderResponse {}

// MsgUpdateRepositoryPackfile defines a message for updating repository packfile
message MsgUpdateRepositoryPackfile {
  string creator = 1;
  uint64 repository_id = 2;
  string name = 3;
  string cid = 4;
  bytes root_hash = 5;
  uint64 size = 6;
}

message MsgUpdateRepositoryPackfileResponse {}

// MsgUpdateReleaseAsset defines a message for updating release asset
message MsgUpdateReleaseAsset {
  string creator = 1;
  uint64 repository_id = 2;
  string tag = 3;
  string name = 4;
  string cid = 5;
  bytes root_hash = 6;
  uint64 size = 7;
  string sha256 = 8;
}

message MsgUpdateReleaseAssetResponse {}

// MsgSubmitChallengeResponse defines a message for submitting challenge response
message MsgSubmitChallengeResponse {
  string creator = 1;
  uint64 challenge_id = 2;
  bytes data = 3;
  Proof proof = 4;
}

message MsgSubmitChallengeResponseResponse {}

// MsgWithdrawProviderRewards defines a message for withdrawing provider rewards
message MsgWithdrawProviderRewards {
  string creator = 1;
}

message MsgWithdrawProviderRewardsResponse {
  repeated cosmos.base.v1beta1.Coin amount = 1 [(gogoproto.nullable) = false];
}

// MsgUnregisterProvider defines a message for initiating the unregistration process
message MsgUnregisterProvider {
  string creator = 1;
}

message MsgUnregisterProviderResponse {
  google.protobuf.Timestamp unstake_completion_time = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
}

// MsgCompleteUnstake defines a message for completing the unstaking process
message MsgCompleteUnstake {
  string creator = 1;
}

message MsgCompleteUnstakeResponse {
  cosmos.base.v1beta1.Coin amount = 1 [(gogoproto.nullable) = false];
}
