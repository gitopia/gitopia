syntax = "proto3";
package gitopia.gitopia.gitopia;

import "gogoproto/gogo.proto";
import "gitopia/gitopia/gitopia/task.proto";
import "gitopia/gitopia/gitopia/branch.proto";
import "gitopia/gitopia/gitopia/tag.proto";
import "gitopia/gitopia/gitopia/bounty.proto";
// this line is used by starport scaffolding # proto/tx/import
import "gitopia/gitopia/gitopia/release.proto";
import "gitopia/gitopia/gitopia/pullRequest.proto";
import "gitopia/gitopia/gitopia/dao.proto";
import "gitopia/gitopia/gitopia/comment.proto";
import "gitopia/gitopia/gitopia/issue.proto";
import "gitopia/gitopia/gitopia/repository.proto";
import "gitopia/gitopia/gitopia/whois.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gitopia/gitopia/gitopia/attachment.proto";
import "gitopia/gitopia/gitopia/reaction.proto";
import "gitopia/gitopia/gitopia/params.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/group/v1/types.proto";
import "amino/amino.proto";

option go_package = "github.com/gitopia/gitopia/v6/x/gitopia/types";

// Msg defines the Msg service.
service Msg {
  // this line is used by starport scaffolding # proto/tx/rpc
  rpc ToggleForcePush(MsgToggleForcePush) returns (MsgToggleForcePushResponse);
  rpc CreateTask(MsgCreateTask) returns (MsgCreateTaskResponse);
  rpc UpdateTask(MsgUpdateTask) returns (MsgUpdateTaskResponse);
  rpc DeleteTask(MsgDeleteTask) returns (MsgDeleteTaskResponse);
  rpc SetBranch(MsgSetBranch) returns (MsgSetBranchResponse);
  rpc MultiSetBranch(MsgMultiSetBranch) returns (MsgMultiSetBranchResponse);
  rpc DeleteBranch(MsgDeleteBranch) returns (MsgDeleteBranchResponse);
  rpc MultiDeleteBranch(MsgMultiDeleteBranch) returns (MsgMultiDeleteBranchResponse);
  rpc SetTag(MsgSetTag) returns (MsgSetTagResponse);
  rpc MultiSetTag(MsgMultiSetTag) returns (MsgMultiSetTagResponse);
  rpc DeleteTag(MsgDeleteTag) returns (MsgDeleteTagResponse);
  rpc MultiDeleteTag(MsgMultiDeleteTag) returns (MsgMultiDeleteTagResponse);
  rpc CreateBounty(MsgCreateBounty) returns (MsgCreateBountyResponse);
  rpc UpdateBountyExpiry(MsgUpdateBountyExpiry) returns (MsgUpdateBountyExpiryResponse);
  rpc CloseBounty(MsgCloseBounty) returns (MsgCloseBountyResponse);
  rpc DeleteBounty(MsgDeleteBounty) returns (MsgDeleteBountyResponse);
// this line is used by starport scaffolding # proto/tx/rpc
  rpc Exercise(MsgExercise) returns (MsgExerciseResponse);
  rpc CreateRelease(MsgCreateRelease) returns (MsgCreateReleaseResponse);
  rpc UpdateRelease(MsgUpdateRelease) returns (MsgUpdateReleaseResponse);
  rpc DeleteRelease(MsgDeleteRelease) returns (MsgDeleteReleaseResponse);
  rpc CreatePullRequest(MsgCreatePullRequest) returns (MsgCreatePullRequestResponse);
  rpc UpdatePullRequestTitle(MsgUpdatePullRequestTitle) returns (MsgUpdatePullRequestTitleResponse);
  rpc UpdatePullRequestDescription(MsgUpdatePullRequestDescription) returns (MsgUpdatePullRequestDescriptionResponse);
  rpc InvokeMergePullRequest(MsgInvokeMergePullRequest) returns (MsgInvokeMergePullRequestResponse);
  rpc InvokeDaoMergePullRequest(MsgInvokeDaoMergePullRequest) returns (MsgInvokeDaoMergePullRequestResponse);
  rpc SetPullRequestState(MsgSetPullRequestState) returns (MsgSetPullRequestStateResponse);
  rpc AddPullRequestReviewers(MsgAddPullRequestReviewers) returns (MsgAddPullRequestReviewersResponse);
  rpc RemovePullRequestReviewers(MsgRemovePullRequestReviewers) returns (MsgRemovePullRequestReviewersResponse);
  rpc AddPullRequestAssignees(MsgAddPullRequestAssignees) returns (MsgAddPullRequestAssigneesResponse);
  rpc RemovePullRequestAssignees(MsgRemovePullRequestAssignees) returns (MsgRemovePullRequestAssigneesResponse);
  rpc LinkPullRequestIssueByIid(MsgLinkPullRequestIssueByIid) returns (MsgLinkPullRequestIssueByIidResponse);
  rpc UnlinkPullRequestIssueByIid(MsgUnlinkPullRequestIssueByIid) returns (MsgUnlinkPullRequestIssueByIidResponse);
  rpc AddPullRequestLabels(MsgAddPullRequestLabels) returns (MsgAddPullRequestLabelsResponse);
  rpc RemovePullRequestLabels(MsgRemovePullRequestLabels) returns (MsgRemovePullRequestLabelsResponse);
  rpc DeletePullRequest(MsgDeletePullRequest) returns (MsgDeletePullRequestResponse);
  rpc CreateDao(MsgCreateDao) returns (MsgCreateDaoResponse);
  rpc RenameDao(MsgRenameDao) returns (MsgRenameDaoResponse);
  rpc UpdateDaoDescription(MsgUpdateDaoDescription) returns (MsgUpdateDaoDescriptionResponse);
  rpc UpdateDaoWebsite(MsgUpdateDaoWebsite) returns (MsgUpdateDaoWebsiteResponse);
  rpc UpdateDaoLocation(MsgUpdateDaoLocation) returns (MsgUpdateDaoLocationResponse);
  rpc UpdateDaoAvatar(MsgUpdateDaoAvatar) returns (MsgUpdateDaoAvatarResponse);
  rpc UpdateDaoMetadata(MsgUpdateDaoMetadata) returns (MsgUpdateDaoMetadataResponse);
  rpc DaoTreasurySpend(MsgDaoTreasurySpend) returns (MsgDaoTreasurySpendResponse);
  rpc UpdateDaoConfig(MsgUpdateDaoConfig) returns (MsgUpdateDaoConfigResponse);
  rpc DaoCreateRelease(MsgDaoCreateRelease) returns (MsgDaoCreateReleaseResponse);
  rpc DeleteDao(MsgDeleteDao) returns (MsgDeleteDaoResponse);
  
  rpc CreateComment(MsgCreateComment) returns (MsgCreateCommentResponse);
  rpc UpdateComment(MsgUpdateComment) returns (MsgUpdateCommentResponse);
  rpc DeleteComment(MsgDeleteComment) returns (MsgDeleteCommentResponse);
  rpc ToggleCommentResolved(MsgToggleCommentResolved) returns (MsgToggleCommentResolvedResponse);
  rpc CreateIssue(MsgCreateIssue) returns (MsgCreateIssueResponse);
  rpc UpdateIssueTitle(MsgUpdateIssueTitle) returns (MsgUpdateIssueTitleResponse);
  rpc UpdateIssueDescription(MsgUpdateIssueDescription) returns (MsgUpdateIssueDescriptionResponse);
  rpc ToggleIssueState(MsgToggleIssueState) returns (MsgToggleIssueStateResponse);
  rpc AddIssueAssignees(MsgAddIssueAssignees) returns (MsgAddIssueAssigneesResponse);
  rpc RemoveIssueAssignees(MsgRemoveIssueAssignees) returns (MsgRemoveIssueAssigneesResponse);
  rpc AddIssueLabels(MsgAddIssueLabels) returns (MsgAddIssueLabelsResponse);
  rpc RemoveIssueLabels(MsgRemoveIssueLabels) returns (MsgRemoveIssueLabelsResponse);
  rpc DeleteIssue(MsgDeleteIssue) returns (MsgDeleteIssueResponse);
  rpc CreateRepository(MsgCreateRepository) returns (MsgCreateRepositoryResponse);
  rpc ForkRepository(MsgForkRepository) returns (MsgForkRepositoryResponse);
  rpc ForkRepositorySuccess(MsgForkRepositorySuccess) returns (MsgForkRepositorySuccessResponse);
  rpc RenameRepository(MsgRenameRepository) returns (MsgRenameRepositoryResponse);
  rpc UpdateRepositoryDescription(MsgUpdateRepositoryDescription) returns (MsgUpdateRepositoryDescriptionResponse);
  rpc ToggleRepositoryArchived(MsgToggleRepositoryArchived) returns (MsgToggleRepositoryArchivedResponse);
  rpc ChangeOwner(MsgChangeOwner) returns (MsgChangeOwnerResponse);
  rpc UpdateRepositoryCollaborator(MsgUpdateRepositoryCollaborator) returns (MsgUpdateRepositoryCollaboratorResponse);
  rpc UpdateDaoRepositoryCollaborator(MsgUpdateDaoRepositoryCollaborator) returns (MsgUpdateDaoRepositoryCollaboratorResponse);
  rpc RemoveRepositoryCollaborator(MsgRemoveRepositoryCollaborator) returns (MsgRemoveRepositoryCollaboratorResponse);
  rpc RemoveDaoRepositoryCollaborator(MsgRemoveDaoRepositoryCollaborator) returns (MsgRemoveDaoRepositoryCollaboratorResponse);
  rpc CreateRepositoryLabel(MsgCreateRepositoryLabel) returns (MsgCreateRepositoryLabelResponse);
  rpc UpdateRepositoryLabel(MsgUpdateRepositoryLabel) returns (MsgUpdateRepositoryLabelResponse);
  rpc DeleteRepositoryLabel(MsgDeleteRepositoryLabel) returns (MsgDeleteRepositoryLabelResponse);
  rpc SetDefaultBranch(MsgSetDefaultBranch) returns (MsgSetDefaultBranchResponse);
  rpc ToggleRepositoryForking(MsgToggleRepositoryForking) returns (MsgToggleRepositoryForkingResponse);
  rpc ToggleArweaveBackup(MsgToggleArweaveBackup) returns (MsgToggleArweaveBackupResponse);
  rpc DeleteRepository(MsgDeleteRepository) returns (MsgDeleteRepositoryResponse);
  rpc CreateUser(MsgCreateUser) returns (MsgCreateUserResponse);
  rpc UpdateUserUsername(MsgUpdateUserUsername) returns (MsgUpdateUserUsernameResponse);
  rpc UpdateUserName(MsgUpdateUserName) returns (MsgUpdateUserNameResponse);
  rpc UpdateUserBio(MsgUpdateUserBio) returns (MsgUpdateUserBioResponse);
  rpc UpdateUserAvatar(MsgUpdateUserAvatar) returns (MsgUpdateUserAvatarResponse);
  rpc DeleteUser(MsgDeleteUser) returns (MsgDeleteUserResponse);
  // rpc TransferUser(MsgTransferUser) returns (MsgTransferUserResponse);
  rpc UpdateRepositoryBackupRef(MsgUpdateRepositoryBackupRef) returns (MsgUpdateRepositoryBackupRefResponse);
  rpc AddRepositoryBackupRef(MsgAddRepositoryBackupRef) returns (MsgAddRepositoryBackupRefResponse);
  rpc UpdateUserPinnedRepositories(MsgUpdateUserPinnedRepositories) returns (MsgUpdateUserPinnedRepositoriesResponse);
  rpc UpdateDaoPinnedRepositories(MsgUpdateDaoPinnedRepositories) returns (MsgUpdateDaoPinnedRepositoriesResponse);
  
  // UpdateParams defines a governance operation for updating the x/gitopia module
  // parameters. The authority is hard-coded to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  rpc DistributePlatformIncentives(MsgDistributePlatformIncentives) returns (MsgDistributePlatformIncentivesResponse);
}

message MsgExercise {
  string creator = 1;
  cosmos.base.v1beta1.Coin amount = 2
    [(gogoproto.nullable) = false,
      (gogoproto.castkey) = "github.com/cosmos/cosmos-sdk/types.Coin"]; 
  string to = 3;
}

message MsgExerciseResponse {}

message MsgToggleForcePush {
  string creator = 1;
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
  string branchName = 3;
}

message MsgToggleForcePushResponse {}

message MsgCreateTask {
  string creator = 1;
  TaskType taskType = 2;
  string provider = 3;
}

message MsgCreateTaskResponse {
  uint64 id = 1;
}

message MsgUpdateTask {
  string creator = 1;
  uint64 id = 2;
  TaskState state = 3;
  string message = 4;
}

message MsgUpdateTaskResponse {}

message MsgDeleteTask {
  string creator = 1;
  uint64 id = 2;
}

message MsgUpdateRepositoryBackupRef {
  string creator = 1;
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
  RepositoryBackup.Store store = 3;
  string ref = 4;
}

message MsgUpdateRepositoryBackupRefResponse {}

message MsgAddRepositoryBackupRef {
  string creator = 1;
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
  RepositoryBackup.Store store = 3;
  string ref = 4;
}

message MsgAddRepositoryBackupRefResponse {}

message MsgDeleteTaskResponse {}
message MsgDeleteStorageProviderResponse {}

message MsgSetBranch {
  string creator = 1;
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
  Branch branch = 3 [(gogoproto.nullable) = false];
  message Branch { 
    string name = 1;
    string sha = 2;
  }
}

message MsgSetBranchResponse {}

message MsgSetDefaultBranch {
  string creator = 1;
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
  string branch = 3;
}

message MsgSetDefaultBranchResponse { }

message MsgMultiSetBranch {
  string creator = 1;
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
  repeated Branch branches = 3 [(gogoproto.nullable) = false];
  message Branch { 
    string name = 1;
    string sha = 2;
  }
}

message MsgMultiSetBranchResponse { }

message MsgDeleteBranch {
  string creator = 1;
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
  string branch = 3;
}

message MsgDeleteBranchResponse { }

message MsgMultiDeleteBranch {
  string creator = 1;
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
  repeated string branches = 3;
}

message MsgMultiDeleteBranchResponse { }

message MsgSetTag {
  string creator = 1;
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
  Tag tag = 3 [(gogoproto.nullable) = false];
  message Tag { 
    string name = 1;
    string sha = 2;
  }
}

message MsgSetTagResponse { }

message MsgMultiSetTag {
  string creator = 1;
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
  repeated Tag tags = 3 [(gogoproto.nullable) = false];
  message Tag { 
    string name = 1;
    string sha = 2;
  }
}

message MsgMultiSetTagResponse { }

message MsgDeleteTag {
  string creator = 1;
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
  string tag = 3;
}

message MsgDeleteTagResponse { }

message MsgMultiDeleteTag {
  string creator = 1;
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
  repeated string tags = 3;
}

message MsgMultiDeleteTagResponse { }

message MsgCreateBounty {
  string creator = 1;
  repeated cosmos.base.v1beta1.Coin amount = 2
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"]; 
  int64 expiry = 3;
  uint64 repositoryId = 4;
  uint64 parentIid = 5;
  BountyParent parent = 6;
}

message MsgCreateBountyResponse {
  uint64 id = 1;
}

message MsgUpdateBountyExpiry {
  string creator = 1;
  uint64 id = 2;
  int64 expiry = 3;
}

message MsgUpdateBountyExpiryResponse {}

message MsgCloseBounty {
  string creator = 1;
  uint64 id = 2;
}

message MsgCloseBountyResponse {}

message MsgDeleteBounty {
  string creator = 1;
  uint64 id = 2;
}

message MsgDeleteBountyResponse {}

// this line is used by starport scaffolding # proto/tx/message
message MsgCreateRelease {
  string creator = 1;
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
  string tagName = 3;
  string target = 4;
  string name = 5;
  string description = 6;
  string attachments = 7;
  bool draft = 8;
  bool preRelease = 9;
  bool isTag = 10;
  string provider = 11;
}

message MsgCreateReleaseResponse {
  uint64 id = 1;
}

message MsgUpdateRelease {
  string creator = 1;
  uint64 id = 2;
  string tagName = 3;
  string target = 4;
  string name = 5;
  string description = 6;
  string attachments = 7;
  bool draft = 8;
  bool preRelease = 9;
  bool isTag = 10;
  string provider = 11;
}

message MsgUpdateReleaseResponse { }

message MsgDeleteRelease {
  string creator = 1;
  uint64 id = 2;
  string provider = 3;
}

message MsgDeleteReleaseResponse { }

message MsgCreatePullRequest {
  string creator = 1;
  string title = 2;
  string description = 3;
  string headBranch = 4;
  RepositoryId headRepositoryId = 5 [(gogoproto.nullable) = false];
  string baseBranch = 6;
  RepositoryId baseRepositoryId = 7 [(gogoproto.nullable) = false];
  repeated string reviewers = 8;
  repeated string assignees = 9;
  repeated uint64 labelIds = 10;
  repeated uint64 issueIids = 11;
}

message MsgCreatePullRequestResponse {
  uint64 id = 1;
  uint64 iid = 2;
}

message MsgUpdatePullRequestTitle {
  string creator = 1;
  uint64 repositoryId = 2;
  uint64 iid = 3;
  string title = 4;
}

message MsgUpdatePullRequestTitleResponse { }

message MsgUpdatePullRequestDescription {
  string creator = 1;
  uint64 repositoryId = 2;
  uint64 iid = 3;
  string description = 4;
}

message MsgUpdatePullRequestDescriptionResponse { }

message MsgInvokeMergePullRequest {
  string creator = 1;
  uint64 repositoryId = 2;
  uint64 iid = 3;
  string provider = 4;
}

message MsgInvokeMergePullRequestResponse { }

message MsgInvokeDaoMergePullRequest {
  option (cosmos.msg.v1.signer) = "admin";
  option (amino.name)           = "gitopia/InvokeDaoMergePullRequest";

  // admin is the account address of the group admin
  string admin = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 repositoryId = 2;
  uint64 iid = 3;
  string provider = 4;
}

message MsgInvokeDaoMergePullRequestResponse { }

message MsgSetPullRequestState {
  string creator = 1;
  uint64 repositoryId = 2;
  uint64 iid = 3;
  string state = 4;
  string mergeCommitSha = 5;
  string commentBody = 6;
  uint64 taskId = 7;
}

message MsgSetPullRequestStateResponse {
  string state = 1;
}

message MsgAddPullRequestReviewers {
  string creator = 1;
  uint64 repositoryId = 2;
  uint64 iid = 3;
  repeated string reviewers = 4;
}

message MsgAddPullRequestReviewersResponse { }

message MsgRemovePullRequestReviewers {
  string creator = 1;
  uint64 repositoryId = 2;
  uint64 iid = 3;
  repeated string reviewers = 4;
}

message MsgRemovePullRequestReviewersResponse { }

message MsgAddPullRequestAssignees {
  string creator = 1;
  uint64 repositoryId = 2;
  uint64 iid = 3;
  repeated string assignees = 4;
}

message MsgAddPullRequestAssigneesResponse { }

message MsgRemovePullRequestAssignees {
  string creator = 1;
  uint64 repositoryId = 2;
  uint64 iid = 3;
  repeated string assignees = 4;
}

message MsgRemovePullRequestAssigneesResponse { }

message MsgLinkPullRequestIssueByIid {
  string creator = 1;
  uint64 repositoryId = 2;
  uint64 pullRequestIid = 3;
  uint64 issueIid = 4;
}

message MsgLinkPullRequestIssueByIidResponse { }

message MsgUnlinkPullRequestIssueByIid {
  string creator = 1;
  uint64 repositoryId = 2;
  uint64 pullRequestIid = 3;
  uint64 issueIid = 4;
}

message MsgUnlinkPullRequestIssueByIidResponse { }

message MsgAddPullRequestLabels {
  string creator = 1;
  uint64 repositoryId = 2;
  uint64 iid = 3;
  repeated uint64 labelIds = 4;
}

message MsgAddPullRequestLabelsResponse { }

message MsgRemovePullRequestLabels {
  string creator = 1;
  uint64 repositoryId = 2;
  uint64 iid = 3;
  repeated uint64 labelIds = 4;
}

message MsgRemovePullRequestLabelsResponse { }

message MsgDeletePullRequest {
  string creator = 1;
  uint64 repositoryId = 2;
  uint64 iid = 3;
}

message MsgDeletePullRequestResponse { }

message MsgCreateDao {
  string creator = 1;
  string name = 2;
  string description = 3;
  string avatarUrl = 4;
  string location = 5;
  string website = 6;

  // members defines the group members.
  repeated cosmos.group.v1.MemberRequest members = 7 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];

  // voting_period defines the voting period of the dao in hours.
  string voting_period = 8;
  
  // percentage is the minimum percentage of the weighted sum of `YES` votes must
  // meet for a proposal to succeed.
  string percentage = 9;

  DaoConfig config = 10;
}

message MsgCreateDaoResponse {
  string id = 1;
}

message MsgRenameDao {
  option (cosmos.msg.v1.signer) = "admin";
  option (amino.name)           = "gitopia/RenameDao";

  // admin is the account address of the group admin.
  string admin = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string id = 2;
  string name = 3;
}

message MsgRenameDaoResponse { }

message MsgUpdateDaoDescription {
  option (cosmos.msg.v1.signer) = "admin";
  option (amino.name)           = "gitopia/UpdateDaoDescription";

  // admin is the account address of the group admin.
  string admin = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string id = 2;
  string description = 3;
}

message MsgUpdateDaoDescriptionResponse { }

message MsgUpdateDaoWebsite {
  option (cosmos.msg.v1.signer) = "admin";
  option (amino.name)           = "gitopia/UpdateDaoWebsite";

  // admin is the account address of the group admin.
  string admin = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string id = 2;
  string url = 3;
}

message MsgUpdateDaoWebsiteResponse { }

message MsgUpdateDaoLocation {
  option (cosmos.msg.v1.signer) = "admin";
  option (amino.name)           = "gitopia/UpdateDaoLocation";

  // admin is the account address of the group admin.
  string admin = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string id = 2;
  string location = 3;
}

message MsgUpdateDaoLocationResponse { }

message MsgUpdateDaoAvatar {
  option (cosmos.msg.v1.signer) = "admin";
  option (amino.name)           = "gitopia/UpdateDaoAvatar";

  // admin is the account address of the group admin.
  string admin = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string id = 2;
  string url = 3;
}

message MsgUpdateDaoAvatarResponse { }

message MsgUpdateDaoMetadata {
  option (cosmos.msg.v1.signer) = "admin";
  option (amino.name)           = "gitopia/UpdateDaoMetadata";

  // admin is the account address of the group admin.
  string admin = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string id = 2;
  string name = 3;
  string description = 4;
  string avatarUrl = 5;
  string location = 6;
  string website = 7;
}

message MsgUpdateDaoMetadataResponse { }

// MsgDaoTreasurySpend defines a message for sending tokens from the dao address to another account. This message is typically executed via a group proposal.
message MsgDaoTreasurySpend {
  option (cosmos.msg.v1.signer) = "admin";
  option (amino.name)           = "gitopia/DaoTreasurySpend";

  // admin is the account address of the group admin.
  string admin = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string id = 2;
  string   recipient = 3;
  repeated cosmos.base.v1beta1.Coin amount = 4 [
    (gogoproto.nullable)     = false,
    (amino.dont_omitempty)   = true,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// MsgDaoTreasurySpendResponse defines the response to executing a
// MsgDaoTreasurySpend message.
message MsgDaoTreasurySpendResponse {}

message MsgUpdateDaoConfig {
  option (cosmos.msg.v1.signer) = "admin";
  option (amino.name)           = "gitopia/UpdateDaoConfig";

  // admin is the account address of the group admin
  string admin = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // dao id to update config for
  string id = 2;

  // updated config settings
  DaoConfig config = 3 [(gogoproto.nullable) = false];
}

message MsgUpdateDaoConfigResponse {}

message MsgDaoCreateRelease {
  option (cosmos.msg.v1.signer) = "admin";
  option (amino.name)           = "gitopia/DaoCreateRelease";

  // admin is the account address of the group admin
  string admin = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
  string tagName = 3;
  string target = 4;
  string name = 5;
  string description = 6;
  string attachments = 7;
  bool draft = 8;
  bool preRelease = 9;
  bool isTag = 10;
}

message MsgDaoCreateReleaseResponse {
  uint64 id = 1;
}

message MsgDeleteDao {
  option (cosmos.msg.v1.signer) = "admin";
  option (amino.name)           = "gitopia/DeleteDao";

  // admin is the account address of the group admin.
  string admin = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string id = 2;
}

message MsgDeleteDaoResponse { }

message MsgCreateComment {
  string creator = 1;
  uint64 repositoryId = 2;
  uint64 parentIid = 3;
  CommentParent parent = 4;
  string body = 5;
  repeated Attachment attachments = 6; 
  string diffHunk = 7;
  string path = 8;
  uint64 position = 9;
}

message MsgCreateCommentResponse {
  uint64 id = 1;
}

message MsgUpdateComment {
  string creator = 1;
  uint64 repositoryId = 2;
  uint64 parentIid = 3;
  CommentParent parent = 4;
  uint64 commentIid = 5;
  string body = 6;
  repeated Attachment attachments = 7;
}

message MsgUpdateCommentResponse { }

message MsgDeleteComment {
  string creator = 1;
  uint64 repositoryId = 2;
  uint64 parentIid = 3;
  CommentParent parent = 4;
  uint64 commentIid = 5;
}

message MsgDeleteCommentResponse { }

message MsgToggleCommentResolved {
  string creator = 1;
  uint64 repositoryId = 2;
  uint64 parentIid = 3;
  CommentParent parent = 4;
  uint64 commentIid = 5;
}

message MsgToggleCommentResolvedResponse {
  bool resolved = 1;
}

message MsgCreateIssue {
  string creator = 1;
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
  string title = 3;
  string description = 4;
  repeated uint64 labelIds = 5;
  uint64 weight = 6;
  repeated string assignees = 7;
  repeated cosmos.base.v1beta1.Coin bountyAmount = 8
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"]; 
  int64 bountyExpiry = 9;
}

message MsgCreateIssueResponse {
  uint64 id = 1;
  uint64 iid = 2;
}

message MsgUpdateIssueTitle {
  string creator = 1;
  uint64 repositoryId = 2;
  uint64 iid = 3;
  string title = 4;
}

message MsgUpdateIssueTitleResponse { }

message MsgUpdateIssueDescription {
  string creator = 1;
  uint64 repositoryId = 2;
  uint64 iid = 3;
  string description = 4;
}

message MsgUpdateIssueDescriptionResponse { }

message MsgToggleIssueState {
  string creator = 1;
  uint64 repositoryId = 2;
  uint64 iid = 3;
  string commentBody = 4;
}

message MsgToggleIssueStateResponse {
  string state = 1;
}

message MsgAddIssueAssignees {
  string creator = 1;
  uint64 repositoryId = 2;
  uint64 iid = 3;
  repeated string assignees = 4;
}

message MsgAddIssueAssigneesResponse { }

message MsgRemoveIssueAssignees {
  string creator = 1;
  uint64 repositoryId = 2;
  uint64 iid = 3;
  repeated string assignees = 4;
}

message MsgRemoveIssueAssigneesResponse { }

message MsgAddIssueLabels {
  string creator = 1;
  uint64 repositoryId = 2;
  uint64 iid = 3;
  repeated uint64 labelIds = 4;
}

message MsgAddIssueLabelsResponse { }

message MsgRemoveIssueLabels {
  string creator = 1;
  uint64 repositoryId = 2;
  uint64 iid = 3;
  repeated uint64 labelIds = 4;
}

message MsgRemoveIssueLabelsResponse { }

message MsgDeleteIssue {
  string creator = 1;
  uint64 repositoryId = 2;
  uint64 iid = 3;
}

message MsgDeleteIssueResponse { }

message MsgCreateRepository {
  string creator = 1;
  string name = 2;
  string owner = 3;
  string description = 4;
}

message MsgCreateRepositoryResponse {
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
}

message MsgForkRepository {
  string creator = 1;
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
  string forkRepositoryName = 3;
  string forkRepositoryDescription = 4;
  string branch = 5;
  string owner = 6;
  uint64 taskId = 7;
}

message MsgForkRepositoryResponse {
  uint64 id = 1;
}

message MsgForkRepositorySuccess {
  string creator = 1;
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
  uint64 taskId = 3;
}

message MsgForkRepositorySuccessResponse {
  uint64 id = 1;
}

message MsgRenameRepository {
  string creator = 1;
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
  string name = 3;
}

message MsgRenameRepositoryResponse { }

message MsgUpdateRepositoryDescription {
  string creator = 1;
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
  string description = 3;
}

message MsgUpdateRepositoryDescriptionResponse { }

message MsgToggleRepositoryArchived {
  string creator = 1;
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
}

message MsgToggleRepositoryArchivedResponse { }

message MsgChangeOwner {
  string creator = 1;
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
  string owner = 3;
}

message MsgChangeOwnerResponse { }

message MsgUpdateRepositoryCollaborator {
  string creator = 1;
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
  string user = 3;
  string role = 4;
}

message MsgUpdateRepositoryCollaboratorResponse { }

message MsgUpdateDaoRepositoryCollaborator {
  option (cosmos.msg.v1.signer) = "admin";
  option (amino.name)           = "gitopia/UpdateDaoRepositoryCollaborator";

  // admin is the account address of the group admin
  string admin = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
  string user = 3;
  string role = 4;
}

message MsgUpdateDaoRepositoryCollaboratorResponse { }

message MsgRemoveRepositoryCollaborator {
  string creator = 1;
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
  string user = 3;
}

message MsgRemoveRepositoryCollaboratorResponse { }

message MsgRemoveDaoRepositoryCollaborator {
  option (cosmos.msg.v1.signer) = "admin";
  option (amino.name)           = "gitopia/RemoveDaoRepositoryCollaborator";

  // admin is the account address of the group admin
  string admin = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
  string user = 3;
}

message MsgRemoveDaoRepositoryCollaboratorResponse { }

message MsgCreateRepositoryLabel {
  string creator = 1;
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
  string name = 3;
  string color = 4;
  string description = 5;
}

message MsgCreateRepositoryLabelResponse { 
  uint64 id = 1;
}

message MsgUpdateRepositoryLabel {
  string creator = 1;
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
  uint64 labelId = 3;
  string name = 4;
  string color = 5;
  string description = 6;
}

message MsgUpdateRepositoryLabelResponse { }

message MsgDeleteRepositoryLabel {
  string creator = 1;
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
  uint64 labelId = 3;
}

message MsgDeleteRepositoryLabelResponse { }

message MsgToggleRepositoryForking {
  string creator = 1;
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
}

message MsgToggleRepositoryForkingResponse { 
  bool allowForking = 1;
}

message MsgToggleArweaveBackup {
  string creator = 1;
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
}

message MsgToggleArweaveBackupResponse { 
  bool enableArweaveBackup = 1;
}

message MsgDeleteRepository {
  string creator = 1;
  RepositoryId repositoryId = 2 [(gogoproto.nullable) = false];
}

message MsgDeleteRepositoryResponse { }

message MsgCreateUser {
  string creator = 1;
  string username = 2;
  string name = 3;
  string avatarUrl = 4; 
  string bio = 5;
}

message MsgCreateUserResponse {
  string id = 1;
}

message MsgUpdateUserUsername {
  string creator = 1;
  string username = 2;
}

message MsgUpdateUserUsernameResponse { }

message MsgUpdateUserName {
  string creator = 1;
  string name = 2;
}

message MsgUpdateUserNameResponse { }

message MsgUpdateUserBio {
  string creator = 1;
  string bio = 2;
}

message MsgUpdateUserBioResponse { }

message MsgUpdateUserAvatar {
  string creator = 1;
  string url = 2;
}

message MsgUpdateUserAvatarResponse { }

message MsgDeleteUser {
  string creator = 1;
  string id = 2;
}

message MsgDeleteUserResponse { }

// message MsgTransferUser {
//   string creator = 1;
//   string address = 2;
// }

// message MsgTransferUserResponse { }

message MsgUpdateUserPinnedRepositories  {
  string creator = 1;
  uint64 repositoryId = 2;
}

message MsgUpdateUserPinnedRepositoriesResponse { }

message MsgUpdateDaoPinnedRepositories  {
  option (cosmos.msg.v1.signer) = "admin";
  option (amino.name)           = "gitopia/UpdateDaoPinnedRepositories";

  // admin is the account address of the group admin.
  string admin = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  uint64 repositoryId = 2;
  string id = 3;
}

message MsgUpdateDaoPinnedRepositoriesResponse { }

message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the x/gitopia parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false];
}

message MsgUpdateParamsResponse {}

message MsgDistributePlatformIncentives {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  repeated Address addresses = 3 [(gogoproto.nullable) = false];
  message Address {
    string address = 1;
    cosmos.base.v1beta1.Coin amount = 2
      [(gogoproto.nullable) = false,
        (gogoproto.castkey) = "github.com/cosmos/cosmos-sdk/types.Coin"]; 
  }
}

message MsgDistributePlatformIncentivesResponse {}
