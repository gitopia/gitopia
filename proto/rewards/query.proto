syntax = "proto3";
package gitopia.gitopia.rewards;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "rewards/task.proto";
import "rewards/rewards.proto";
import "rewards/pool.proto";
import "cosmos/base/v1beta1/coin.proto";
import "rewards/params.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/gitopia/gitopia/v4/x/rewards/types";

// Query defines the gRPC querier service.
service Query {
	// Params returns the total set of rewards parameters.
	rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
		option (google.api.http).get = "/gitopia/gitopia/rewards/params";
	}

	// Queries a list of tasks items.
	rpc Tasks(QueryTasksRequest) returns (QueryTasksResponse) {
		option (google.api.http).get = "/gitopia/gitopia/rewards/tasks/{address}";
	}

// Queries a Rewards by index.
	rpc Reward(QueryGetRewardRequest) returns (QueryGetRewardResponse) {
		option (google.api.http).get = "/gitopia/gitopia/rewards/rewards/{recipient}";
	}

	// Queries a list of Rewards items.
	rpc RewardsAll(QueryAllRewardsRequest) returns (QueryAllRewardsResponse) {
		option (google.api.http).get = "/gitopia/gitopia/rewards/rewards";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryTasksRequest {
	string address = 1;
}

message QueryTasksResponse {
	repeated Task tasks = 1 [(gogoproto.nullable) = false];
}

message QueryGetRewardRequest {
	  string recipient = 1;

}

message QueryGetRewardResponseReward {
	string creator = 1;
	Series series = 2;
  	cosmos.base.v1beta1.Coin amount = 3
    [(gogoproto.nullable) = false, 
	(gogoproto.castkey) = "github.com/cosmos/cosmos-sdk/types.Coin"]; 
  cosmos.base.v1beta1.Coin claimed_amount = 4
    [(gogoproto.nullable) = false, 
	(gogoproto.castkey) = "github.com/cosmos/cosmos-sdk/types.Coin"]; 
  cosmos.base.v1beta1.Coin claimable_amount = 5
    [(gogoproto.nullable) = false, 
	(gogoproto.castkey) = "github.com/cosmos/cosmos-sdk/types.Coin"]; 
  cosmos.base.v1beta1.Coin remaining_claimable_amount = 6
    [(gogoproto.nullable) = false, 
	(gogoproto.castkey) = "github.com/cosmos/cosmos-sdk/types.Coin"]; 
}

message QueryGetRewardResponse {
	string recipient = 1; 
	repeated QueryGetRewardResponseReward rewards = 2 [
		(gogoproto.nullable) = false,
		(gogoproto.moretags) = "yaml:\"reward\""
	  ];
}

message QueryAllRewardsRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllRewardsResponse {
	repeated Reward rewards = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
